{"version":3,"file":"rx-plugin.d.js","names":[],"sources":["../../../src/types/rx-plugin.d.ts"],"sourcesContent":["import type {\r\n    RxQuery,\r\n    RxQueryOP,\r\n    MangoQuery\r\n} from './rx-query.d.ts';\r\nimport type {\r\n    RxCollection,\r\n    RxCollectionCreator\r\n} from './rx-collection.d.ts';\r\nimport type {\r\n    RxStorageInstanceCreationParams\r\n} from './rx-storage.d.ts';\r\nimport type {\r\n    DeepReadonly,\r\n    FilledMangoQuery,\r\n    RxDatabase,\r\n    RxDatabaseCreator,\r\n    RxDocument,\r\n    RxStorage,\r\n    RxReplicationWriteToMasterRow,\r\n    WithDeleted,\r\n    RxState,\r\n    BulkWriteRow,\r\n    RxStorageInstance\r\n} from './index.d.ts';\r\nimport type { RxSchema } from '../rx-schema.d.ts';\r\n\r\nexport type RxPluginPrePrepareRxQueryArgs = {\r\n    op: RxQueryOP;\r\n    queryObj: MangoQuery | string | number | Array<any>;\r\n    collection: RxCollection;\r\n};\r\n\r\nexport type RxPluginPreCreateRxQueryArgs = {\r\n    op: RxQueryOP;\r\n    queryObj: MangoQuery;\r\n    collection: RxCollection;\r\n};\r\n\r\nexport type RxPluginPreAddRxPluginArgs = {\r\n    // the plugin that is getting added\r\n    plugin: RxPlugin | any;\r\n    // previous added plugins\r\n    plugins: Set<RxPlugin | any>;\r\n};\r\n\r\nexport type RxPluginPrePrepareQueryArgs = {\r\n    rxQuery: RxQuery<any>;\r\n    mangoQuery: FilledMangoQuery<any>;\r\n};\r\n\r\n\r\n/**\r\n * Depending on which plugins are used together,\r\n * it is important that the plugin is able to define if\r\n * the hooks must be added as first or as last array item.\r\n * For example the encryption plugin must run encryption\r\n * before the key-compression changes the fieldnames.\r\n */\r\nexport type RxPluginHooks<Input> = {\r\n    /**\r\n     * Hook function that is added as first.\r\n     */\r\n    before?: (i: Input) => void;\r\n    /**\r\n     * Hook function that is added as last.\r\n     */\r\n    after?: (i: Input) => void;\r\n};\r\n\r\nexport interface RxPlugin {\r\n    /**\r\n     * A string to uniquely identifies the plugin.\r\n     * Can be used to throw when different versions of the same plugin are used.\r\n     * And also other checks.\r\n     * Use kebab-case.\r\n     */\r\n    readonly name: string;\r\n\r\n    /**\r\n     * set this to true so RxDB\r\n     * knows that this object in a rxdb plugin\r\n     */\r\n    readonly rxdb: true;\r\n\r\n    /**\r\n     * Init function where dependent plugins could be added.\r\n     * (optional)\r\n     */\r\n    init?(): any;\r\n\r\n    prototypes?: {\r\n        RxSchema?: (proto: RxSchema) => void;\r\n        RxDocument?: (proto: RxDocument) => void;\r\n        RxQuery?: (proto: RxQuery) => void;\r\n        RxCollection?: (proto: RxCollection) => void;\r\n        RxDatabase?: (proto: RxDatabase) => void;\r\n    };\r\n    overwritable?: {\r\n        isDevMode?: () => boolean;\r\n        deepFreezeWhenDevMode?: <T>(obj: T) => DeepReadonly<T>;\r\n        validatePassword?: Function;\r\n        checkAdapter?: Function;\r\n        tunnelErrorMessage?: Function;\r\n    };\r\n    hooks?: {\r\n        preAddRxPlugin?: RxPluginHooks<RxPluginPreAddRxPluginArgs>;\r\n        preCreateRxDatabase?: RxPluginHooks<any>;\r\n        createRxDatabase?: RxPluginHooks<{\r\n            database: RxDatabase;\r\n            creator: RxDatabaseCreator;\r\n        }>;\r\n        preCloseRxDatabase?: RxPluginHooks<RxDatabase>;\r\n        postRemoveRxDatabase?: RxPluginHooks<{\r\n            databaseName: string;\r\n            storage: RxStorage<any, any>;\r\n        }>;\r\n        createRxCollection?: RxPluginHooks<{\r\n            collection: RxCollection;\r\n            creator: RxCollectionCreator;\r\n        }>;\r\n        createRxState?: RxPluginHooks<{\r\n            collection: RxCollection;\r\n            state: RxState<unknown, unknown>;\r\n        }>;\r\n        preCreateRxCollection?: RxPluginHooks<RxCollectionCreator<any> & {\r\n            name: string;\r\n            database: RxDatabase;\r\n        }>;\r\n        postCloseRxCollection?: RxPluginHooks<RxCollection>;\r\n        postRemoveRxCollection?: RxPluginHooks<{\r\n            storage: RxStorage<any, any>;\r\n            databaseName: string;\r\n            collectionName: string;\r\n        }>;\r\n        preCreateRxSchema?: RxPluginHooks<any>;\r\n        createRxSchema?: RxPluginHooks<any>;\r\n        prePrepareRxQuery?: RxPluginHooks<RxPluginPrePrepareRxQueryArgs>;\r\n        preCreateRxQuery?: RxPluginHooks<RxPluginPreCreateRxQueryArgs>;\r\n        prePrepareQuery?: RxPluginHooks<RxPluginPrePrepareQueryArgs>;\r\n        createRxQuery?: RxPluginHooks<RxQuery>;\r\n        createRxDocument?: RxPluginHooks<any>;\r\n        postCreateRxDocument?: RxPluginHooks<any>;\r\n        preCreateRxStorageInstance?: RxPluginHooks<RxStorageInstanceCreationParams<any, any>>;\r\n        /**\r\n         * Runs before a write to the storage instance of a RxCollection or RxDatabase.\r\n         */\r\n        preStorageWrite?: RxPluginHooks<{\r\n            storageInstance: RxStorageInstance<any, any, any, any>;\r\n            rows: BulkWriteRow<any>[];\r\n        }>;\r\n        preMigrateDocument?: RxPluginHooks<any>;\r\n        postMigrateDocument?: RxPluginHooks<any>;\r\n        postCleanup?: RxPluginHooks<{\r\n            databaseName: string;\r\n            collectionName: string;\r\n        }>;\r\n        preReplicationMasterWrite?: RxPluginHooks<{\r\n            rows: RxReplicationWriteToMasterRow<any>[];\r\n            collection: RxCollection;\r\n        }>;\r\n        preReplicationMasterWriteDocumentsHandle?: RxPluginHooks<{\r\n            result: WithDeleted<any>[];\r\n            collection: RxCollection;\r\n        }>;\r\n    };\r\n}\r\n"],"mappings":"","ignoreList":[]}