{"version":3,"file":"conflict-handling.d.js","names":[],"sources":["../../../src/types/conflict-handling.d.ts"],"sourcesContent":["import type { WithDeleted } from './rx-storage.d.ts';\r\n\r\n/**\r\n * Notice that the conflict handler input/output\r\n * does not work on RxDocumentData<RxDocType>, but only on WithDeleted<RxDocType>.\r\n * This is because the _meta attributes are meant for the local storing of document data, they not replicated\r\n * and therefore cannot be used to resolve conflicts.\r\n */\r\nexport type RxConflictHandlerInput<RxDocType> = {\r\n    assumedMasterState?: WithDeleted<RxDocType>;\r\n    realMasterState: WithDeleted<RxDocType>;\r\n    newDocumentState: WithDeleted<RxDocType>;\r\n};\r\n\r\n/**\r\n * The conflict handler either returns:\r\n * - The resolved new document state\r\n * - A flag to identify the given 'realMasterState' and 'newDocumentState'\r\n *   as being exactly equal, so no conflict has to be resolved.\r\n */\r\nexport type RxConflictHandlerOutput<RxDocType> = {\r\n    isEqual: false;\r\n    documentData: WithDeleted<RxDocType>;\r\n} | {\r\n    isEqual: true;\r\n};\r\n\r\nexport type RxConflictHandlerOld<RxDocType> = (\r\n    i: RxConflictHandlerInput<RxDocType>,\r\n    context: string\r\n) => Promise<RxConflictHandlerOutput<RxDocType>>;\r\n\r\n\r\nexport type RxConflictHandler<RxDocType> = {\r\n    /**\r\n     * This must be non-async\r\n     * because it will be called very often and must be fast.\r\n     */\r\n    isEqual: (\r\n        a: WithDeleted<RxDocType>,\r\n        b: WithDeleted<RxDocType>,\r\n        context: string\r\n    ) => boolean;\r\n    resolve: (\r\n        i: RxConflictHandlerInput<RxDocType>,\r\n        context: string\r\n    ) => Promise<WithDeleted<RxDocType>>;\r\n};\r\n"],"mappings":"","ignoreList":[]}