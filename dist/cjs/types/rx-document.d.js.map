{"version":3,"file":"rx-document.d.js","names":[],"sources":["../../../src/types/rx-document.d.ts"],"sourcesContent":["import {\r\n    Observable\r\n} from 'rxjs';\r\n\r\nimport type {\r\n    RxCollection,\r\n} from './rx-collection.d.ts';\r\nimport type {\r\n    RxAttachment,\r\n    RxAttachmentCreator\r\n} from './rx-attachment.d.ts';\r\nimport type { RxDocumentData, WithDeleted } from './rx-storage.d.ts';\r\nimport type { RxChangeEvent } from './rx-change-event.d.ts';\r\nimport type { DeepReadonly, MaybePromise, PlainJsonValue } from './util.d.ts';\r\nimport type { UpdateQuery } from './plugins/update.d.ts';\r\nimport type { CRDTEntry } from './plugins/crdt.d.ts';\r\n\r\n\r\n\r\nexport type RxDocument<RxDocumentType = {}, OrmMethods = {}, Reactivity = unknown> = RxDocumentBase<\r\n    RxDocumentType,\r\n    OrmMethods,\r\n    Reactivity\r\n> & RxDocumentType & OrmMethods & ExtendObservables<RxDocumentType> & ExtendReactivity<RxDocumentType, Reactivity>;\r\n\r\n\r\n/**\r\n * Extend the base properties by the property$ fields\r\n * so it knows that RxDocument.age also has RxDocument.age$ which is\r\n * an observable.\r\n * TODO how to do this for the nested fields?\r\n */\r\ntype ExtendObservables<RxDocumentType> = {\r\n    [P in keyof RxDocumentType as `${string & P}$`]: Observable<RxDocumentType[P]>;\r\n};\r\n\r\ntype ExtendReactivity<RxDocumentType, Reactivity> = {\r\n    [P in keyof RxDocumentType as `${string & P}$$`]: Reactivity;\r\n};\r\n\r\n/**\r\n * The public facing modify update function.\r\n * It only gets the document parts as input, that\r\n * are mutateable by the user.\r\n */\r\nexport type ModifyFunction<RxDocumentType> = (\r\n    doc: WithDeleted<RxDocumentType>\r\n) => MaybePromise<WithDeleted<RxDocumentType>> | MaybePromise<RxDocumentType>;\r\n\r\n/**\r\n * Meta data that is attached to each document by RxDB.\r\n */\r\nexport type RxDocumentMeta = {\r\n    /**\r\n     * Last write time.\r\n     * Unix epoch in milliseconds.\r\n     */\r\n    lwt: number;\r\n\r\n    /**\r\n     * Any other value can be attached to the _meta data.\r\n     * Mostly done by plugins to mark documents.\r\n     */\r\n    [k: string]: PlainJsonValue;\r\n};\r\n\r\nexport declare interface RxDocumentBase<RxDocType, OrmMethods = {}, Reactivity = unknown> {\r\n    isInstanceOfRxDocument: true;\r\n    collection: RxCollection<RxDocType, OrmMethods, Reactivity>;\r\n    readonly deleted: boolean;\r\n\r\n    readonly $: Observable<RxDocument<RxDocType, OrmMethods, Reactivity>>;\r\n    readonly $$: Reactivity;\r\n    readonly deleted$: Observable<boolean>;\r\n    readonly deleted$$: Reactivity;\r\n\r\n    readonly primary: string;\r\n    readonly allAttachments$: Observable<RxAttachment<RxDocType, OrmMethods, Reactivity>[]>;\r\n\r\n    // internal things\r\n    _data: RxDocumentData<RxDocType>;\r\n    primaryPath: string;\r\n    revision: string;\r\n    /**\r\n     * Used to de-duplicate the enriched property objects\r\n     * of the document.\r\n     */\r\n    _propertyCache: Map<string, any>;\r\n    $emit(cE: RxChangeEvent<RxDocType>): void;\r\n    _saveData(newData: any, oldData: any): Promise<RxDocument<RxDocType, OrmMethods, Reactivity>>;\r\n    // /internal things\r\n\r\n    // Returns the latest state of the document\r\n    getLatest(): RxDocument<RxDocType, OrmMethods, Reactivity>;\r\n\r\n\r\n    get$(path: string): Observable<any>;\r\n    get$$(path: string): Reactivity;\r\n    get(objPath: string): DeepReadonly<any>;\r\n    populate(objPath: string): Promise<RxDocument<RxDocType, OrmMethods, Reactivity> | any | null>;\r\n\r\n    /**\r\n     * mutate the document with a function\r\n     */\r\n    modify(mutationFunction: ModifyFunction<RxDocType>, context?: string): Promise<RxDocument<RxDocType, OrmMethods, Reactivity>>;\r\n    incrementalModify(mutationFunction: ModifyFunction<RxDocType>, context?: string): Promise<RxDocument<RxDocType, OrmMethods, Reactivity>>;\r\n\r\n    /**\r\n     * patches the given properties\r\n     */\r\n    patch(patch: Partial<RxDocType>): Promise<RxDocument<RxDocType, OrmMethods, Reactivity>>;\r\n    incrementalPatch(patch: Partial<RxDocType>): Promise<RxDocument<RxDocType, OrmMethods, Reactivity>>;\r\n\r\n    update(updateObj: UpdateQuery<RxDocType>): Promise<RxDocument<RxDocType, OrmMethods, Reactivity>>;\r\n    incrementalUpdate(updateObj: UpdateQuery<RxDocType>): Promise<RxDocument<RxDocType, OrmMethods, Reactivity>>;\r\n\r\n    updateCRDT(updateObj: CRDTEntry<RxDocType> | CRDTEntry<RxDocType>[]): Promise<RxDocument<RxDocType, OrmMethods, Reactivity>>;\r\n\r\n    remove(): Promise<RxDocument<RxDocType, OrmMethods, Reactivity>>;\r\n    incrementalRemove(): Promise<RxDocument<RxDocType, OrmMethods, Reactivity>>;\r\n\r\n    // only for temporary documents\r\n    set(objPath: string, value: any): RxDocument<RxDocType, OrmMethods, Reactivity>;\r\n    save(): Promise<boolean>;\r\n\r\n    // attachments\r\n    putAttachment(\r\n        creator: RxAttachmentCreator\r\n    ): Promise<RxAttachment<RxDocType, OrmMethods, Reactivity>>;\r\n    getAttachment(id: string): RxAttachment<RxDocType, OrmMethods, Reactivity> | null;\r\n    allAttachments(): RxAttachment<RxDocType, OrmMethods, Reactivity>[];\r\n\r\n    toJSON(withRevAndAttachments: true): DeepReadonly<RxDocumentData<RxDocType>>;\r\n    toJSON(withRevAndAttachments?: false): DeepReadonly<RxDocType>;\r\n\r\n    toMutableJSON(withRevAndAttachments: true): RxDocumentData<RxDocType>;\r\n    toMutableJSON(withRevAndAttachments?: false): RxDocType;\r\n\r\n    close(): void;\r\n}\r\n"],"mappings":"","ignoreList":[]}