{"version":3,"file":"rx-error.d.js","names":[],"sources":["../../../src/types/rx-error.d.ts"],"sourcesContent":["import type { RxJsonSchema } from './rx-schema.d.ts';\r\nimport {\r\n    RxSchema\r\n} from '../rx-schema.ts';\r\nimport type { RxPlugin } from './rx-plugin.d.ts';\r\nimport { ERROR_MESSAGES } from '../plugins/dev-mode/error-messages.ts';\r\nimport type { RxReplicationWriteToMasterRow } from './replication-protocol.d.ts';\r\nimport type { BulkWriteRow, RxDocumentData } from './rx-storage.d.ts';\r\n\r\ntype KeyOf<T extends object> = Extract<keyof T, string>;\r\nexport type RxErrorKey = KeyOf<typeof ERROR_MESSAGES>;\r\n\r\nexport type {\r\n    RxError,\r\n    RxTypeError\r\n} from '../rx-error.ts';\r\n\r\n/**\r\n * this lists all possible parameters\r\n */\r\nexport interface RxErrorParameters {\r\n    readonly error?: PlainJsonError;\r\n    readonly errors?: PlainJsonError[];\r\n    readonly writeError?: RxStorageWriteError<any>;\r\n    readonly schemaPath?: string;\r\n    readonly objPath?: string;\r\n    readonly rootPath?: string;\r\n    readonly childpath?: string;\r\n    readonly obj?: any;\r\n    readonly document?: any;\r\n    readonly schema?: Readonly<RxJsonSchema<any> | RxSchema>;\r\n    readonly schemaObj?: any;\r\n    readonly pluginKey?: string;\r\n    readonly originalDoc?: Readonly<any>;\r\n    readonly finalDoc?: Readonly<any>;\r\n    readonly regex?: string;\r\n    readonly fieldName?: string;\r\n    readonly id?: string;\r\n    readonly data?: any;\r\n    readonly missingCollections?: string[];\r\n    readonly primaryPath?: string;\r\n    readonly primary?: string;\r\n    readonly primaryKey?: string;\r\n    readonly have?: any;\r\n    readonly should?: any;\r\n    readonly name?: string;\r\n    readonly adapter?: any;\r\n    readonly link?: string;\r\n    readonly path?: string;\r\n    readonly value?: any;\r\n    readonly givenName?: string;\r\n    readonly fromVersion?: number;\r\n    readonly toVersion?: number;\r\n    readonly version?: number;\r\n    readonly args?: any;\r\n    readonly opts?: any;\r\n    readonly dataBefore?: any;\r\n    readonly dataAfter?: any;\r\n    readonly pull?: boolean;\r\n    readonly push?: boolean;\r\n    readonly url?: string;\r\n    readonly key?: string;\r\n    readonly queryObj?: any;\r\n    readonly query?: any;\r\n    readonly op?: string;\r\n    readonly skip?: any;\r\n    readonly limit?: any;\r\n    readonly passwordHash?: string;\r\n    readonly existingPasswordHash?: string;\r\n    readonly password?: string | any;\r\n    readonly minPassLength?: number;\r\n    readonly own?: any;\r\n    readonly source?: any;\r\n    readonly method?: any;\r\n    readonly field?: string;\r\n    readonly ref?: string;\r\n    readonly funName?: string;\r\n    readonly functionName?: string;\r\n    readonly schemaHash?: string;\r\n    readonly previousSchema?: Readonly<RxJsonSchema<any>>;\r\n    readonly previousSchemaHash?: string;\r\n    readonly type?: string;\r\n    readonly when?: string;\r\n    readonly parallel?: boolean;\r\n    readonly collection?: any;\r\n    readonly database?: any;\r\n    readonly storage?: string;\r\n    readonly indexes?: Array<string | string[]> | Readonly<Array<string | string[]>>;\r\n    readonly index?: string | string[] | readonly string[];\r\n    readonly plugin?: RxPlugin | any;\r\n    readonly plugins?: Set<RxPlugin | any>;\r\n\r\n    // used in the replication plugin\r\n\r\n    /**\r\n     * The checkpoint of the response from the last successful\r\n     * pull by the client.\r\n     * Null if there was no pull operation before\r\n     * so that there is no last pulled checkpoint.\r\n     */\r\n    readonly checkpoint?: any;\r\n    /**\r\n     * The documents that failed to be pushed.\r\n     * Typed as 'any' because they might be modified by the push modifier.\r\n     */\r\n    readonly pushRows?: RxReplicationWriteToMasterRow<any>[];\r\n    readonly direction?: 'pull' | 'push';\r\n\r\n}\r\n\r\n/**\r\n * Error-Items which are created by the jsonschema-validator\r\n */\r\nexport type RxValidationError = {\r\n    readonly field: string;\r\n    readonly message: string;\r\n};\r\n\r\n/**\r\n * Use to have a transferable error object\r\n * in plain json instead of a JavaScript Error instance.\r\n */\r\nexport type PlainJsonError = {\r\n    name: string;\r\n    message: string;\r\n    rxdb?: true;\r\n    code?: RxErrorKey;\r\n    url?: string;\r\n    extensions?: Record<string, any>;\r\n    parameters?: RxErrorParameters;\r\n    stack?: string;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Error that can happen per document when\r\n * RxStorage.bulkWrite() is called\r\n */\r\nexport type RxStorageWriteErrorBase<RxDocType> = {\r\n\r\n    status: number\r\n    | 409 // conflict\r\n    | 422 // schema validation error\r\n    | 510 // attachment data missing\r\n    ;\r\n\r\n    /**\r\n     * set this property to make it easy\r\n     * to detect if the object is a RxStorageBulkWriteError\r\n     */\r\n    isError: true;\r\n\r\n    // primary key of the document\r\n    documentId: string;\r\n\r\n    // the original document data that should have been written.\r\n    writeRow: BulkWriteRow<RxDocType>;\r\n};\r\n\r\nexport type RxStorageWriteErrorConflict<RxDocType> = RxStorageWriteErrorBase<RxDocType> & {\r\n    status: 409;\r\n    /**\r\n     * A conflict error state must contain the\r\n     * document state in the database.\r\n     * This ensures that we can continue resolving a conflict\r\n     * without having to pull the document out of the db first.\r\n     * Is not set if the error happens on an insert.\r\n     */\r\n    documentInDb: RxDocumentData<RxDocType>;\r\n};\r\n\r\nexport type RxStorageWriteErrorValidation<RxDocType> = RxStorageWriteErrorBase<RxDocType> & {\r\n    status: 422;\r\n    /**\r\n     * Other properties that give\r\n     * information about the error,\r\n     * for example a schema validation error\r\n     * might contain the exact error from the validator here.\r\n     * Must be plain JSON!\r\n     */\r\n    validationErrors: RxValidationError[];\r\n    /**\r\n     * For easier debugging,\r\n     * we directly put the schema into the error.\r\n     */\r\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>;\r\n};\r\n\r\nexport type RxStorageWriteErrorAttachment<RxDocType> = RxStorageWriteErrorBase<RxDocType> & {\r\n    status: 510;\r\n    attachmentId: string;\r\n    documentInDb?: RxDocumentData<RxDocType>;\r\n};\r\n\r\n\r\nexport type RxStorageWriteError<RxDocType> =\r\n    RxStorageWriteErrorConflict<RxDocType> |\r\n    RxStorageWriteErrorValidation<RxDocType> |\r\n    RxStorageWriteErrorAttachment<RxDocType>;\r\n"],"mappings":"","ignoreList":[]}