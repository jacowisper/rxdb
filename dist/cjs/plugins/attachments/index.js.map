{"version":3,"file":"index.js","names":["_rxjs","require","_index","_attachmentsUtils","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","RxAttachment","doc","id","type","length","digest","assignMethodsToAttachment","_proto","remove","collection","incrementalWriteQueue","addWrite","_data","docWriteData","_attachments","then","getData","plainDataBase64","storageInstance","getAttachmentData","primary","ret","createBlobFromBase64","getStringData","data","asString","blobToString","fromStorageInstanceResult","attachmentData","rxDocument","putAttachment","ensureSchemaSupportsAttachments","dataSize","getBlobSize","dataString","blobToBase64String","database","hashFunction","flatClone","writeResult","newDocument","_docCache","getCachedRxDocument","attachmentDataOfId","attachment","getAttachment","docData","allAttachments","map","preMigrateDocument","attachments","newAttachments","Promise","all","attachmentId","docPrimary","oldCollection","schema","primaryPath","rawAttachmentData","postMigrateDocument","_action","PROMISE_RESOLVE_VOID","RxDBAttachmentsPlugin","name","rxdb","prototypes","RxDocument","proto","allAttachments$","$","pipe","entries","toJSON","overwritable","hooks","after"],"sources":["../../../../src/plugins/attachments/index.ts"],"sourcesContent":["import {\r\n    map\r\n} from 'rxjs';\r\n\r\nimport {\r\n    blobToBase64String,\r\n    blobToString,\r\n    createBlobFromBase64,\r\n    flatClone,\r\n    getBlobSize,\r\n    PROMISE_RESOLVE_VOID\r\n} from '../../plugins/utils/index.ts';\r\nimport type {\r\n    RxDocument,\r\n    RxPlugin,\r\n    RxDocumentWriteData,\r\n    RxAttachmentData,\r\n    RxDocumentData,\r\n    RxAttachmentCreator,\r\n    RxAttachmentWriteData,\r\n    RxCollection\r\n} from '../../types/index.ts';\r\nimport {\r\n    assignMethodsToAttachment,\r\n    ensureSchemaSupportsAttachments\r\n} from './attachments-utils.ts';\r\n\r\n\r\n\r\n/**\r\n * an RxAttachment is basically just the attachment-stub\r\n * wrapped so that you can access the attachment-data\r\n */\r\nexport class RxAttachment {\r\n    public doc: RxDocument;\r\n    public id: string;\r\n    public type: string;\r\n    public length: number;\r\n    public digest: string;\r\n    constructor({\r\n        doc,\r\n        id,\r\n        type,\r\n        length,\r\n        digest\r\n    }: any) {\r\n        this.doc = doc;\r\n        this.id = id;\r\n        this.type = type;\r\n        this.length = length;\r\n        this.digest = digest;\r\n\r\n        assignMethodsToAttachment(this);\r\n    }\r\n\r\n    remove(): Promise<void> {\r\n        return this.doc.collection.incrementalWriteQueue.addWrite(\r\n            this.doc._data,\r\n            docWriteData => {\r\n                delete docWriteData._attachments[this.id];\r\n                return docWriteData;\r\n            }\r\n        ).then(() => { });\r\n    }\r\n\r\n    /**\r\n     * returns the data for the attachment\r\n     */\r\n    async getData(): Promise<Blob> {\r\n        const plainDataBase64 = await this.doc.collection.storageInstance.getAttachmentData(\r\n            this.doc.primary,\r\n            this.id,\r\n            this.digest\r\n        );\r\n        const ret = await createBlobFromBase64(\r\n            plainDataBase64,\r\n            this.type as any\r\n        );\r\n        return ret;\r\n    }\r\n\r\n    async getStringData(): Promise<string> {\r\n        const data = await this.getData();\r\n        const asString = await blobToString(data);\r\n        return asString;\r\n    }\r\n}\r\n\r\nexport function fromStorageInstanceResult<RxDocType>(\r\n    id: string,\r\n    attachmentData: RxAttachmentData,\r\n    rxDocument: RxDocument<RxDocType>\r\n) {\r\n    return new RxAttachment({\r\n        doc: rxDocument,\r\n        id,\r\n        type: attachmentData.type,\r\n        length: attachmentData.length,\r\n        digest: attachmentData.digest\r\n    });\r\n}\r\n\r\n\r\n\r\nexport async function putAttachment<RxDocType>(\r\n    this: RxDocument<RxDocType>,\r\n    attachmentData: RxAttachmentCreator\r\n): Promise<RxAttachment> {\r\n    ensureSchemaSupportsAttachments(this);\r\n\r\n    const dataSize = getBlobSize(attachmentData.data);\r\n    const dataString = await blobToBase64String(attachmentData.data);\r\n    const digest = await this.collection.database.hashFunction(dataString);\r\n\r\n    const id = attachmentData.id;\r\n    const type = attachmentData.type;\r\n    const data = dataString;\r\n\r\n    return this.collection.incrementalWriteQueue.addWrite(\r\n        this._data,\r\n        (docWriteData: RxDocumentWriteData<RxDocType>) => {\r\n            docWriteData = flatClone(docWriteData);\r\n            docWriteData._attachments = flatClone(docWriteData._attachments);\r\n            docWriteData._attachments[id] = {\r\n                length: dataSize,\r\n                type,\r\n                data,\r\n                digest\r\n            };\r\n            return docWriteData;\r\n        }).then(writeResult => {\r\n            const newDocument = this.collection._docCache.getCachedRxDocument(writeResult);\r\n            const attachmentDataOfId = writeResult._attachments[id];\r\n            const attachment = fromStorageInstanceResult(\r\n                id,\r\n                attachmentDataOfId,\r\n                newDocument\r\n            );\r\n            return attachment;\r\n        });\r\n}\r\n\r\n/**\r\n * get an attachment of the document by its id\r\n */\r\nexport function getAttachment(\r\n    this: RxDocument,\r\n    id: string\r\n): RxAttachment | null {\r\n    ensureSchemaSupportsAttachments(this);\r\n    const docData: any = this._data;\r\n    if (!docData._attachments || !docData._attachments[id])\r\n        return null;\r\n\r\n    const attachmentData = docData._attachments[id];\r\n    const attachment = fromStorageInstanceResult(\r\n        id,\r\n        attachmentData,\r\n        this\r\n    );\r\n    return attachment;\r\n}\r\n\r\n/**\r\n * returns all attachments of the document\r\n */\r\nexport function allAttachments(\r\n    this: RxDocument\r\n): RxAttachment[] {\r\n    ensureSchemaSupportsAttachments(this);\r\n    const docData: any = this._data;\r\n\r\n    // if there are no attachments, the field is missing\r\n    if (!docData._attachments) {\r\n        return [];\r\n    }\r\n    return Object.keys(docData._attachments)\r\n        .map(id => {\r\n            return fromStorageInstanceResult(\r\n                id,\r\n                docData._attachments[id],\r\n                this\r\n            );\r\n        });\r\n}\r\n\r\nexport async function preMigrateDocument<RxDocType>(\r\n    data: {\r\n        docData: RxDocumentData<RxDocType>;\r\n        oldCollection: RxCollection<RxDocType>;\r\n    }\r\n): Promise<void> {\r\n    const attachments = data.docData._attachments;\r\n    if (attachments) {\r\n        const newAttachments: { [attachmentId: string]: RxAttachmentWriteData; } = {};\r\n        await Promise.all(\r\n            Object.keys(attachments).map(async (attachmentId) => {\r\n                const attachment: RxAttachmentData = attachments[attachmentId];\r\n                const docPrimary: string = (data.docData as any)[data.oldCollection.schema.primaryPath];\r\n                const rawAttachmentData = await data.oldCollection.storageInstance.getAttachmentData(\r\n                    docPrimary,\r\n                    attachmentId,\r\n                    attachment.digest\r\n                );\r\n                const digest = await data.oldCollection.database.hashFunction(rawAttachmentData);\r\n                newAttachments[attachmentId] = {\r\n                    length: attachment.length,\r\n                    type: attachment.type,\r\n                    data: rawAttachmentData,\r\n                    digest\r\n                };\r\n            })\r\n        );\r\n\r\n        /**\r\n         * Hooks mutate the input\r\n         * instead of returning stuff\r\n         */\r\n        (data.docData as RxDocumentWriteData<RxDocType>)._attachments = newAttachments;\r\n    }\r\n}\r\n\r\nexport function postMigrateDocument(_action: any): Promise<void> {\r\n    /**\r\n     * No longer needed because\r\n     * we store the attachments data buffers directly in the document.\r\n     */\r\n    return PROMISE_RESOLVE_VOID;\r\n}\r\n\r\nexport const RxDBAttachmentsPlugin: RxPlugin = {\r\n    name: 'attachments',\r\n    rxdb: true,\r\n    prototypes: {\r\n        RxDocument: (proto: any) => {\r\n            proto.putAttachment = putAttachment;\r\n            proto.getAttachment = getAttachment;\r\n            proto.allAttachments = allAttachments;\r\n            Object.defineProperty(proto, 'allAttachments$', {\r\n                get: function allAttachments$(this: RxDocument) {\r\n                    return this.$\r\n                        .pipe(\r\n                            map(rxDocument => Object.entries(\r\n                                rxDocument.toJSON(true)._attachments\r\n                            )),\r\n                            map(entries => {\r\n                                return (entries as any)\r\n                                    .map(([id, attachmentData]: any) => {\r\n                                        return fromStorageInstanceResult(\r\n                                            id,\r\n                                            attachmentData,\r\n                                            this\r\n                                        );\r\n                                    });\r\n                            })\r\n                        );\r\n                }\r\n            });\r\n        }\r\n    },\r\n    overwritable: {},\r\n    hooks: {\r\n        preMigrateDocument: {\r\n            after: preMigrateDocument\r\n        },\r\n        postMigrateDocument: {\r\n            after: postMigrateDocument\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport * from './attachments-utils.ts';\r\n"],"mappings":"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","ignoreList":[]}