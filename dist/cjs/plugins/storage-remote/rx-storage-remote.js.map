{"version":3,"file":"rx-storage-remote.js","names":["_rxjs","require","_index","_messageChannelCache","RxStorageRemote","exports","settings","name","rxdbVersion","RXDB_VERSION","seed","randomToken","lastRequestId","mode","messageChannelIfOneMode","getMessageChannel","_proto","prototype","getRequestId","newId","createStorageInstance","params","connectionId","cacheKeys","push","collectionName","databaseName","messageChannel","requestId","waitForOkPromise","firstValueFrom","messages$","pipe","filter","msg","answerTo","send","method","version","waitForOkResult","error","closeMessageChannel","Error","JSON","stringify","RxStorageInstanceRemote","schema","options","customRequest","data","messageChannelCreator","waitForAnswerPromise","response","close","return","getMessageReturn","parse","storage","internals","changes$","Subject","subs","subscribe","next","_proto2","requestRemote","methodName","responsePromise","message","bulkWrite","documentWrites","context","findDocumentsById","ids","deleted","query","preparedQuery","count","getAttachmentData","documentId","attachmentId","digest","getChangedDocumentsSince","limit","checkpoint","changeStream","asObservable","cleanup","minDeletedTime","closed","forEach","sub","unsubscribe","complete","remove","getRxStorageRemote","withDefaults","Object","assign"],"sources":["../../../../src/plugins/storage-remote/rx-storage-remote.ts"],"sourcesContent":["import {\r\n    firstValueFrom,\r\n    filter,\r\n    Observable,\r\n    Subject,\r\n    Subscription\r\n} from 'rxjs';\r\nimport type {\r\n    BulkWriteRow,\r\n    EventBulk,\r\n    RxDocumentData,\r\n    RxJsonSchema,\r\n    RxStorage,\r\n    RxStorageBulkWriteResponse,\r\n    RxStorageChangeEvent,\r\n    RxStorageCountResult,\r\n    RxStorageInstance,\r\n    RxStorageInstanceCreationParams,\r\n    RxStorageQueryResult\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    RXDB_VERSION,\r\n    randomToken\r\n} from '../../plugins/utils/index.ts';\r\nimport type {\r\n    MessageFromRemote,\r\n    MessageToRemote,\r\n    RemoteMessageChannel,\r\n    RxStorageRemoteInternals,\r\n    RxStorageRemoteSettings\r\n} from './storage-remote-types.ts';\r\nimport { closeMessageChannel, getMessageChannel } from './message-channel-cache.ts';\r\n\r\n\r\nexport class RxStorageRemote implements RxStorage<RxStorageRemoteInternals, any> {\r\n    public readonly name: string = 'remote';\r\n    public readonly rxdbVersion = RXDB_VERSION;\r\n\r\n    private seed: string = randomToken(10);\r\n    private lastRequestId: number = 0;\r\n    public messageChannelIfOneMode?: Promise<RemoteMessageChannel>;\r\n    constructor(\r\n        public readonly settings: RxStorageRemoteSettings\r\n    ) {\r\n        if (settings.mode === 'one') {\r\n            this.messageChannelIfOneMode = getMessageChannel(\r\n                settings,\r\n                [],\r\n                true\r\n            );\r\n        }\r\n    }\r\n\r\n    public getRequestId() {\r\n        const newId = this.lastRequestId++;\r\n        return this.seed + '|' + newId;\r\n    }\r\n\r\n    async createStorageInstance<RxDocType>(\r\n        params: RxStorageInstanceCreationParams<RxDocType, any>\r\n    ): Promise<RxStorageInstanceRemote<RxDocType>> {\r\n        const connectionId = 'c|' + this.getRequestId();\r\n\r\n        const cacheKeys: string[] = [\r\n            'mode-' + this.settings.mode\r\n        ];\r\n        switch (this.settings.mode) {\r\n            case 'collection':\r\n                cacheKeys.push('collection-' + params.collectionName);\r\n            // eslint-disable-next-line no-fallthrough\r\n            case 'database':\r\n                cacheKeys.push('database-' + params.databaseName);\r\n            // eslint-disable-next-line no-fallthrough\r\n            case 'storage':\r\n                cacheKeys.push('seed-' + this.seed);\r\n        }\r\n        const messageChannel = await (this.messageChannelIfOneMode ?\r\n            this.messageChannelIfOneMode :\r\n            getMessageChannel(\r\n                this.settings,\r\n                cacheKeys\r\n            )\r\n        );\r\n\r\n        const requestId = this.getRequestId();\r\n        const waitForOkPromise = firstValueFrom(messageChannel.messages$.pipe(\r\n            filter(msg => msg.answerTo === requestId)\r\n        ));\r\n        messageChannel.send({\r\n            connectionId,\r\n            method: 'create',\r\n            version: RXDB_VERSION,\r\n            requestId,\r\n            params\r\n        });\r\n\r\n        const waitForOkResult = await waitForOkPromise;\r\n        if (waitForOkResult.error) {\r\n            await closeMessageChannel(messageChannel);\r\n            throw new Error('could not create instance ' + JSON.stringify(waitForOkResult.error));\r\n        }\r\n\r\n        return new RxStorageInstanceRemote(\r\n            this,\r\n            params.databaseName,\r\n            params.collectionName,\r\n            params.schema,\r\n            {\r\n                params,\r\n                connectionId,\r\n                messageChannel\r\n            },\r\n            params.options\r\n        );\r\n    }\r\n\r\n    async customRequest<In, Out>(data: In): Promise<Out> {\r\n        const messageChannel = await this.settings.messageChannelCreator();\r\n        const requestId = this.getRequestId();\r\n        const connectionId = 'custom|request|' + requestId;\r\n        const waitForAnswerPromise = firstValueFrom(messageChannel.messages$.pipe(\r\n            filter(msg => msg.answerTo === requestId)\r\n        ));\r\n        messageChannel.send({\r\n            connectionId,\r\n            method: 'custom',\r\n            version: RXDB_VERSION,\r\n            requestId,\r\n            params: data\r\n        });\r\n        const response = await waitForAnswerPromise;\r\n        if (response.error) {\r\n            await messageChannel.close();\r\n            throw new Error('could not run customRequest(): ' + JSON.stringify({\r\n                data,\r\n                error: response.error\r\n            }));\r\n        } else {\r\n            await messageChannel.close();\r\n            return response.return;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Because postMessage() can be very slow on complex objects,\r\n * and some RxStorage implementations do need a JSON-string internally\r\n * anyway, it is allowed to transfer a string instead of an object\r\n * which must then be JSON.parse()-ed before RxDB can use it.\r\n * @link https://surma.dev/things/is-postmessage-slow/\r\n */\r\nfunction getMessageReturn(\r\n    msg: MessageFromRemote\r\n) {\r\n    if (msg.method === 'getAttachmentData') {\r\n        return msg.return;\r\n    } else {\r\n        if (typeof msg.return === 'string') {\r\n            return JSON.parse(msg.return);\r\n        } else {\r\n            return msg.return;\r\n        }\r\n    }\r\n}\r\n\r\nexport class RxStorageInstanceRemote<RxDocType> implements RxStorageInstance<RxDocType, RxStorageRemoteInternals, any, any> {\r\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> = new Subject();\r\n    private subs: Subscription[] = [];\r\n\r\n    private closed?: Promise<void>;\r\n    messages$: Observable<MessageFromRemote>;\r\n\r\n    constructor(\r\n        public readonly storage: RxStorageRemote,\r\n        public readonly databaseName: string,\r\n        public readonly collectionName: string,\r\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\r\n        public readonly internals: RxStorageRemoteInternals,\r\n        public readonly options: Readonly<any>\r\n    ) {\r\n        this.messages$ = this.internals.messageChannel.messages$.pipe(\r\n            filter(msg => msg.connectionId === this.internals.connectionId)\r\n        );\r\n        this.subs.push(\r\n            this.messages$.subscribe(msg => {\r\n                if (msg.method === 'changeStream') {\r\n                    this.changes$.next(getMessageReturn(msg));\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    private async requestRemote(\r\n        methodName: keyof RxStorageInstance<any, any, any>,\r\n        params: any\r\n    ) {\r\n        const requestId = this.storage.getRequestId();\r\n        const responsePromise = firstValueFrom(\r\n            this.messages$.pipe(\r\n                filter(msg => msg.answerTo === requestId)\r\n            )\r\n        );\r\n        const message: MessageToRemote = {\r\n            connectionId: this.internals.connectionId,\r\n            requestId,\r\n            version: RXDB_VERSION,\r\n            method: methodName,\r\n            params\r\n        };\r\n        this.internals.messageChannel.send(message);\r\n        const response = await responsePromise;\r\n        if (response.error) {\r\n            throw new Error('could not requestRemote: ' + JSON.stringify({\r\n                methodName,\r\n                params,\r\n                error: response.error\r\n            }, null, 4));\r\n        } else {\r\n            return getMessageReturn(response);\r\n        }\r\n    }\r\n    bulkWrite(\r\n        documentWrites: BulkWriteRow<RxDocType>[],\r\n        context: string\r\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\r\n        return this.requestRemote('bulkWrite', [documentWrites, context]);\r\n    }\r\n    findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentData<RxDocType>[]> {\r\n        return this.requestRemote('findDocumentsById', [ids, deleted]);\r\n    }\r\n    query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\r\n        return this.requestRemote('query', [preparedQuery]);\r\n    }\r\n    count(preparedQuery: any): Promise<RxStorageCountResult> {\r\n        return this.requestRemote('count', [preparedQuery]);\r\n    }\r\n    getAttachmentData(documentId: string, attachmentId: string, digest: string): Promise<string> {\r\n        return this.requestRemote('getAttachmentData', [documentId, attachmentId, digest]);\r\n    }\r\n    getChangedDocumentsSince(\r\n        limit: number,\r\n        checkpoint?: any\r\n    ): Promise<\r\n        {\r\n            documents: RxDocumentData<RxDocType>[];\r\n            checkpoint: any;\r\n        }> {\r\n        return this.requestRemote('getChangedDocumentsSince', [limit, checkpoint]);\r\n    }\r\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> {\r\n        return this.changes$.asObservable();\r\n    }\r\n    cleanup(minDeletedTime: number): Promise<boolean> {\r\n        return this.requestRemote('cleanup', [minDeletedTime]);\r\n    }\r\n    async close(): Promise<void> {\r\n        if (this.closed) {\r\n            return this.closed;\r\n        }\r\n        this.closed = (async () => {\r\n            this.subs.forEach(sub => sub.unsubscribe());\r\n            this.changes$.complete();\r\n            await this.requestRemote('close', []);\r\n            await closeMessageChannel(this.internals.messageChannel);\r\n        })();\r\n        return this.closed;\r\n    }\r\n    async remove(): Promise<void> {\r\n        if (this.closed) {\r\n            throw new Error('already closed');\r\n        }\r\n        this.closed = (async () => {\r\n            await this.requestRemote('remove', []);\r\n            await closeMessageChannel(this.internals.messageChannel);\r\n        })();\r\n        return this.closed;\r\n    }\r\n}\r\n\r\nexport function getRxStorageRemote(settings: RxStorageRemoteSettings): RxStorageRemote {\r\n    const withDefaults = Object.assign({\r\n        mode: 'storage'\r\n    }, settings);\r\n    return new RxStorageRemote(withDefaults);\r\n}\r\n"],"mappings":"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","ignoreList":[]}