{"version":3,"file":"index.js","names":["_rxjs","require","_index","_index2","_index3","_rxError","_replicationHelper","_rxDatabaseInternalStore","_plugin","_rxStorageHelper","_overwritable","_hooks","REPLICATION_STATE_BY_COLLECTION","exports","WeakMap","RxReplicationState","replicationIdentifier","collection","deletedField","pull","push","live","retryTime","autoStart","toggleOnDocumentVisible","subs","subjects","received","Subject","sent","error","canceled","BehaviorSubject","active","received$","asObservable","sent$","error$","canceled$","active$","wasStarted","onCancel","callOnStart","undefined","remoteEvents$","metaInfoPromise","metaInstanceCollectionName","database","hashFunction","name","join","metaInstanceSchema","getRxReplicationMetaInstanceSchema","schema","jsonSchema","hasEncryption","collectionName","replicationStates","getFromMapOrCreate","onClose","cancel","Object","keys","forEach","key","defineProperty","get","startPromise","Promise","res","_proto","prototype","start","isStopped","internalReplicationState","events","paused","next","reSync","preventHibernateBrowserTab","pullModifier","modifier","DEFAULT_MODIFIER","pushModifier","metaInfo","metaInstance","all","storage","createStorageInstance","databaseName","databaseInstanceToken","token","multiInstance","options","password","devMode","overwritable","isDevMode","addConnectedStorageToCollection","replicateRxStorageInstance","pushBatchSize","batchSize","pullBatchSize","initialCheckpoint","upstream","downstream","forkInstance","storageInstance","identifier","conflictHandler","replicationHandler","masterChangeStream$","pipe","filter","_v","mergeMap","ev","useEv","flatClone","documents","handlePulledDocuments","map","d","masterChangesSince","checkpoint","done","result","isStoppedOrPaused","handler","err","emitError","newRxError","errors","toArray","er","errorToPlainJson","direction","awaitRetry","ensureNotFalsy","useResult","masterWrite","rows","runAsyncPluginHooks","useRowsOrNull","row","newDocumentState","assumedMasterState","swapDefaultDeletedTodeletedField","useRows","arrayFilterNotEmpty","length","Array","isArray","pushRows","args","rxdb","conflicts","subscribe","processed","down","document","up","writeToMasterRow","combineLatest","isActive","stream$","awaitRxStorageReplicationFirstInSync","awaitRxStorageReplicationInSync","pause","isPaused","getValue","awaitInitialReplication","awaitInSync","t","requestIdlePromise","emitEvent","PROMISE_RESOLVE_FALSE","promises","fn","toPromise","cancelRxStorageReplication","checkpointQueue","then","close","sub","unsubscribe","complete","remove","removeConnectedStorageFromCollection","replicateRxCollection","waitForLeadership","addRxPlugin","RxDBLeaderElectionPlugin","replicationState","addEventListener","visibilityState","isVisible","isLeader","removeEventListener","startReplicationOnLeaderShip","mustWaitForLeadership","waitTillRun","PROMISE_RESOLVE_TRUE"],"sources":["../../../../src/plugins/replication/index.ts"],"sourcesContent":["/**\r\n * This plugin contains the primitives to create\r\n * a RxDB client-server replication.\r\n * It is used in the other replication plugins\r\n * but also can be used as standalone with a custom replication handler.\r\n */\r\n\r\nimport {\r\n    BehaviorSubject,\r\n    combineLatest,\r\n    filter,\r\n    mergeMap,\r\n    Observable,\r\n    Subject,\r\n    Subscription\r\n} from 'rxjs';\r\nimport type {\r\n    ReplicationOptions,\r\n    ReplicationPullHandlerResult,\r\n    ReplicationPullOptions,\r\n    ReplicationPushOptions,\r\n    RxCollection,\r\n    RxDocumentData,\r\n    RxError,\r\n    RxJsonSchema,\r\n    RxReplicationPullStreamItem,\r\n    RxReplicationWriteToMasterRow,\r\n    RxStorageInstance,\r\n    RxStorageInstanceReplicationState,\r\n    RxStorageReplicationMeta,\r\n    RxTypeError,\r\n    WithDeleted\r\n} from '../../types/index.d.ts';\r\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\r\nimport {\r\n    arrayFilterNotEmpty,\r\n    ensureNotFalsy,\r\n    errorToPlainJson,\r\n    flatClone,\r\n    getFromMapOrCreate,\r\n    PROMISE_RESOLVE_FALSE,\r\n    PROMISE_RESOLVE_TRUE,\r\n    toArray,\r\n    toPromise\r\n} from '../../plugins/utils/index.ts';\r\nimport {\r\n    awaitRxStorageReplicationFirstInSync,\r\n    awaitRxStorageReplicationInSync,\r\n    cancelRxStorageReplication,\r\n    getRxReplicationMetaInstanceSchema,\r\n    replicateRxStorageInstance\r\n} from '../../replication-protocol/index.ts';\r\nimport { newRxError } from '../../rx-error.ts';\r\nimport {\r\n    awaitRetry,\r\n    DEFAULT_MODIFIER,\r\n    swapDefaultDeletedTodeletedField,\r\n    handlePulledDocuments,\r\n    preventHibernateBrowserTab\r\n} from './replication-helper.ts';\r\nimport {\r\n    addConnectedStorageToCollection,\r\n    removeConnectedStorageFromCollection\r\n} from '../../rx-database-internal-store.ts';\r\nimport { addRxPlugin } from '../../plugin.ts';\r\nimport { hasEncryption } from '../../rx-storage-helper.ts';\r\nimport { overwritable } from '../../overwritable.ts';\r\nimport {\r\n    runAsyncPluginHooks\r\n} from '../../hooks.ts';\r\n\r\n\r\nexport const REPLICATION_STATE_BY_COLLECTION: WeakMap<RxCollection, RxReplicationState<any, any>[]> = new WeakMap();\r\n\r\nexport class RxReplicationState<RxDocType, CheckpointType> {\r\n    public readonly subs: Subscription[] = [];\r\n    public readonly subjects = {\r\n        received: new Subject<RxDocumentData<RxDocType>>(), // all documents that are received from the endpoint\r\n        sent: new Subject<WithDeleted<RxDocType>>(), // all documents that are send to the endpoint\r\n        error: new Subject<RxError | RxTypeError>(), // all errors that are received from the endpoint, emits new Error() objects\r\n        canceled: new BehaviorSubject<boolean>(false), // true when the replication was canceled\r\n        active: new BehaviorSubject<boolean>(false) // true when something is running, false when not\r\n    };\r\n\r\n    readonly received$: Observable<RxDocumentData<RxDocType>> = this.subjects.received.asObservable();\r\n    readonly sent$: Observable<WithDeleted<RxDocType>> = this.subjects.sent.asObservable();\r\n    readonly error$: Observable<RxError | RxTypeError> = this.subjects.error.asObservable();\r\n    readonly canceled$: Observable<any> = this.subjects.canceled.asObservable();\r\n    readonly active$: Observable<boolean> = this.subjects.active.asObservable();\r\n\r\n    wasStarted: boolean = false;\r\n\r\n    readonly metaInfoPromise: Promise<{ collectionName: string, schema: RxJsonSchema<RxDocumentData<RxStorageReplicationMeta<RxDocType, any>>> }>;\r\n\r\n    public startPromise: Promise<void>;\r\n\r\n    public onCancel: (() => void)[] = [];\r\n\r\n    constructor(\r\n        /**\r\n         * The identifier, used to flag revisions\r\n         * and to identify which documents state came from the remote.\r\n         */\r\n        public readonly replicationIdentifier: string,\r\n        public readonly collection: RxCollection<RxDocType>,\r\n        public readonly deletedField: string,\r\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\r\n        public readonly push?: ReplicationPushOptions<RxDocType>,\r\n        public readonly live?: boolean,\r\n        public retryTime?: number,\r\n        public autoStart?: boolean,\r\n        public toggleOnDocumentVisible?: boolean\r\n    ) {\r\n        this.metaInfoPromise = (async () => {\r\n            const metaInstanceCollectionName = 'rx-replication-meta-' + await collection.database.hashFunction([\r\n                this.collection.name,\r\n                this.replicationIdentifier\r\n            ].join('-'));\r\n            const metaInstanceSchema = getRxReplicationMetaInstanceSchema(\r\n                this.collection.schema.jsonSchema,\r\n                hasEncryption(this.collection.schema.jsonSchema)\r\n            );\r\n            return {\r\n                collectionName: metaInstanceCollectionName,\r\n                schema: metaInstanceSchema\r\n            };\r\n        })();\r\n        const replicationStates = getFromMapOrCreate(\r\n            REPLICATION_STATE_BY_COLLECTION,\r\n            collection,\r\n            () => []\r\n        );\r\n        replicationStates.push(this);\r\n\r\n        // stop the replication when the collection gets closed\r\n        this.collection.onClose.push(() => this.cancel());\r\n\r\n        // create getters for the observables\r\n        Object.keys(this.subjects).forEach(key => {\r\n            Object.defineProperty(this, key + '$', {\r\n                get: function () {\r\n                    return this.subjects[key].asObservable();\r\n                }\r\n            });\r\n        });\r\n        const startPromise = new Promise<void>(res => {\r\n            this.callOnStart = res;\r\n        });\r\n        this.startPromise = startPromise;\r\n    }\r\n\r\n    private callOnStart: () => void = undefined as any;\r\n\r\n    public internalReplicationState?: RxStorageInstanceReplicationState<RxDocType>;\r\n    public metaInstance?: RxStorageInstance<RxStorageReplicationMeta<RxDocType, CheckpointType>, any, {}, any>;\r\n    public remoteEvents$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\r\n\r\n    public async start(): Promise<void> {\r\n        if (this.isStopped()) {\r\n            return;\r\n        }\r\n\r\n        if (this.internalReplicationState) {\r\n            this.internalReplicationState.events.paused.next(false);\r\n        }\r\n\r\n        /**\r\n         * If started after a pause,\r\n         * just re-sync once and continue.\r\n         */\r\n        if (this.wasStarted) {\r\n            this.reSync();\r\n            return;\r\n        }\r\n        this.wasStarted = true;\r\n\r\n\r\n        if (!this.toggleOnDocumentVisible) {\r\n            preventHibernateBrowserTab(this);\r\n        }\r\n\r\n        // fill in defaults for pull & push\r\n        const pullModifier = this.pull && this.pull.modifier ? this.pull.modifier : DEFAULT_MODIFIER;\r\n        const pushModifier = this.push && this.push.modifier ? this.push.modifier : DEFAULT_MODIFIER;\r\n\r\n        const database = this.collection.database;\r\n        const metaInfo = await this.metaInfoPromise;\r\n\r\n        const [metaInstance] = await Promise.all([\r\n            this.collection.database.storage.createStorageInstance<RxStorageReplicationMeta<RxDocType, CheckpointType>>({\r\n                databaseName: database.name,\r\n                collectionName: metaInfo.collectionName,\r\n                databaseInstanceToken: database.token,\r\n                multiInstance: database.multiInstance,\r\n                options: {},\r\n                schema: metaInfo.schema,\r\n                password: database.password,\r\n                devMode: overwritable.isDevMode()\r\n            }),\r\n            addConnectedStorageToCollection(\r\n                this.collection,\r\n                metaInfo.collectionName,\r\n                metaInfo.schema\r\n            )\r\n        ]);\r\n        this.metaInstance = metaInstance;\r\n\r\n\r\n        this.internalReplicationState = replicateRxStorageInstance({\r\n            pushBatchSize: this.push && this.push.batchSize ? this.push.batchSize : 100,\r\n            pullBatchSize: this.pull && this.pull.batchSize ? this.pull.batchSize : 100,\r\n            initialCheckpoint: {\r\n                upstream: this.push ? this.push.initialCheckpoint : undefined,\r\n                downstream: this.pull ? this.pull.initialCheckpoint : undefined\r\n            },\r\n            forkInstance: this.collection.storageInstance,\r\n            metaInstance: this.metaInstance,\r\n            hashFunction: database.hashFunction,\r\n            identifier: 'rxdbreplication' + this.replicationIdentifier,\r\n            conflictHandler: this.collection.conflictHandler,\r\n            replicationHandler: {\r\n                masterChangeStream$: this.remoteEvents$.asObservable().pipe(\r\n                    filter(_v => !!this.pull),\r\n                    mergeMap(async (ev) => {\r\n                        if (ev === 'RESYNC') {\r\n                            return ev;\r\n                        }\r\n                        const useEv = flatClone(ev);\r\n                        useEv.documents = handlePulledDocuments(this.collection, this.deletedField, useEv.documents);\r\n                        useEv.documents = await Promise.all(\r\n                            useEv.documents.map(d => pullModifier(d))\r\n                        );\r\n                        return useEv;\r\n                    })\r\n                ),\r\n                masterChangesSince: async (\r\n                    checkpoint: CheckpointType | undefined,\r\n                    batchSize: number\r\n                ) => {\r\n                    if (!this.pull) {\r\n                        return {\r\n                            checkpoint: null,\r\n                            documents: []\r\n                        };\r\n                    }\r\n                    /**\r\n                     * Retries must be done here in the replication primitives plugin,\r\n                     * because the replication protocol itself has no\r\n                     * error handling.\r\n                     */\r\n                    let done = false;\r\n                    let result: ReplicationPullHandlerResult<RxDocType, CheckpointType> = {} as any;\r\n                    while (!done && !this.isStoppedOrPaused()) {\r\n                        try {\r\n                            result = await this.pull.handler(\r\n                                checkpoint,\r\n                                batchSize\r\n                            );\r\n                            done = true;\r\n                        } catch (err: any | Error | Error[]) {\r\n                            const emitError = newRxError('RC_PULL', {\r\n                                checkpoint,\r\n                                errors: toArray(err).map(er => errorToPlainJson(er)),\r\n                                direction: 'pull'\r\n                            });\r\n                            this.subjects.error.next(emitError);\r\n                            await awaitRetry(this.collection, ensureNotFalsy(this.retryTime));\r\n                        }\r\n                    }\r\n\r\n                    if (this.isStoppedOrPaused()) {\r\n                        return {\r\n                            checkpoint: null,\r\n                            documents: []\r\n                        };\r\n                    }\r\n\r\n                    const useResult = flatClone(result);\r\n                    useResult.documents = handlePulledDocuments(this.collection, this.deletedField, useResult.documents);\r\n                    useResult.documents = await Promise.all(\r\n                        useResult.documents.map(d => pullModifier(d))\r\n                    );\r\n                    return useResult;\r\n                },\r\n                masterWrite: async (\r\n                    rows: RxReplicationWriteToMasterRow<RxDocType>[]\r\n                ) => {\r\n                    if (!this.push) {\r\n                        return [];\r\n                    }\r\n                    let done = false;\r\n\r\n                    await runAsyncPluginHooks('preReplicationMasterWrite', {\r\n                        rows,\r\n                        collection: this.collection\r\n                    });\r\n\r\n                    const useRowsOrNull = await Promise.all(\r\n                        rows.map(async (row) => {\r\n                            row.newDocumentState = await pushModifier(row.newDocumentState);\r\n                            if (row.newDocumentState === null) {\r\n                                return null;\r\n                            }\r\n                            if (row.assumedMasterState) {\r\n                                row.assumedMasterState = await pushModifier(row.assumedMasterState);\r\n                            }\r\n                            if (this.deletedField !== '_deleted') {\r\n                                row.newDocumentState = swapDefaultDeletedTodeletedField(this.deletedField, row.newDocumentState) as any;\r\n                                if (row.assumedMasterState) {\r\n                                    row.assumedMasterState = swapDefaultDeletedTodeletedField(this.deletedField, row.assumedMasterState) as any;\r\n                                }\r\n                            }\r\n                            return row;\r\n                        })\r\n                    );\r\n                    const useRows: RxReplicationWriteToMasterRow<RxDocType>[] = useRowsOrNull.filter(arrayFilterNotEmpty);\r\n\r\n                    let result: WithDeleted<RxDocType>[] = null as any;\r\n\r\n                    // In case all the rows have been filtered and nothing has to be sent\r\n                    if (useRows.length === 0) {\r\n                        done = true;\r\n                        result = [];\r\n                    }\r\n\r\n                    while (!done && !this.isStoppedOrPaused()) {\r\n                        try {\r\n                            result = await this.push.handler(useRows);\r\n                            /**\r\n                             * It is a common problem that people have wrongly behaving backend\r\n                             * that do not return an array with the conflicts on push requests.\r\n                             * So we run this check here to make it easier to debug.\r\n                             * @link https://github.com/pubkey/rxdb/issues/4103\r\n                             */\r\n                            if (!Array.isArray(result)) {\r\n                                throw newRxError(\r\n                                    'RC_PUSH_NO_AR',\r\n                                    {\r\n                                        pushRows: rows,\r\n                                        direction: 'push',\r\n                                        args: { result }\r\n                                    }\r\n                                );\r\n                            }\r\n                            done = true;\r\n                        } catch (err: any | Error | Error[] | RxError) {\r\n                            const emitError = (err as RxError).rxdb ? err : newRxError('RC_PUSH', {\r\n                                pushRows: rows,\r\n                                errors: toArray(err).map(er => errorToPlainJson(er)),\r\n                                direction: 'push'\r\n                            });\r\n                            this.subjects.error.next(emitError);\r\n                            await awaitRetry(this.collection, ensureNotFalsy(this.retryTime));\r\n                        }\r\n                    }\r\n                    if (this.isStoppedOrPaused()) {\r\n                        return [];\r\n                    }\r\n\r\n                    await runAsyncPluginHooks('preReplicationMasterWriteDocumentsHandle', {\r\n                        result,\r\n                        collection: this.collection\r\n                    });\r\n\r\n                    const conflicts = handlePulledDocuments(this.collection, this.deletedField, ensureNotFalsy(result));\r\n                    return conflicts;\r\n                }\r\n            }\r\n        });\r\n        this.subs.push(\r\n            this.internalReplicationState.events.error.subscribe(err => {\r\n                this.subjects.error.next(err);\r\n            }),\r\n            this.internalReplicationState.events.processed.down\r\n                .subscribe(row => this.subjects.received.next(row.document as any)),\r\n            this.internalReplicationState.events.processed.up\r\n                .subscribe(writeToMasterRow => {\r\n                    this.subjects.sent.next(writeToMasterRow.newDocumentState);\r\n                }),\r\n            combineLatest([\r\n                this.internalReplicationState.events.active.down,\r\n                this.internalReplicationState.events.active.up\r\n            ]).subscribe(([down, up]) => {\r\n                const isActive = down || up;\r\n                this.subjects.active.next(isActive);\r\n            })\r\n        );\r\n\r\n        if (\r\n            this.pull &&\r\n            this.pull.stream$ &&\r\n            this.live\r\n        ) {\r\n            this.subs.push(\r\n                this.pull.stream$.subscribe({\r\n                    next: ev => {\r\n                        if (!this.isStoppedOrPaused()) {\r\n                            this.remoteEvents$.next(ev);\r\n                        }\r\n                    },\r\n                    error: err => {\r\n                        this.subjects.error.next(err);\r\n                    }\r\n                })\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Non-live replications run once\r\n         * and then automatically get canceled.\r\n         */\r\n        if (!this.live) {\r\n            await awaitRxStorageReplicationFirstInSync(this.internalReplicationState);\r\n            await awaitRxStorageReplicationInSync(this.internalReplicationState);\r\n            await this.cancel();\r\n        }\r\n        this.callOnStart();\r\n    }\r\n\r\n    pause() {\r\n        ensureNotFalsy(this.internalReplicationState).events.paused.next(true);\r\n    }\r\n\r\n    isPaused(): boolean {\r\n        return this.internalReplicationState ? this.internalReplicationState.events.paused.getValue() : false;\r\n    }\r\n\r\n    isStopped(): boolean {\r\n        if (this.subjects.canceled.getValue()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isStoppedOrPaused() {\r\n        return this.isPaused() || this.isStopped();\r\n    }\r\n\r\n    async awaitInitialReplication(): Promise<void> {\r\n        await this.startPromise;\r\n        return awaitRxStorageReplicationFirstInSync(\r\n            ensureNotFalsy(this.internalReplicationState)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns a promise that resolves when:\r\n     * - All local data is replicated with the remote\r\n     * - No replication cycle is running or in retry-state\r\n     *\r\n     * WARNING: USing this function directly in a multi-tab browser application\r\n     * is dangerous because only the leading instance will ever be replicated,\r\n     * so this promise will not resolve in the other tabs.\r\n     * For multi-tab support you should set and observe a flag in a local document.\r\n     */\r\n    async awaitInSync(): Promise<true> {\r\n        await this.startPromise;\r\n        await awaitRxStorageReplicationFirstInSync(ensureNotFalsy(this.internalReplicationState));\r\n\r\n        /**\r\n         * To reduce the amount of re-renders and make testing\r\n         * and to make the whole behavior more predictable,\r\n         * we await these things multiple times.\r\n         * For example the state might be in sync already and at the\r\n         * exact same time a pull.stream$ event comes in and we want to catch\r\n         * that in the same call to awaitInSync() instead of resolving\r\n         * while actually the state is not in sync.\r\n         */\r\n        let t = 2;\r\n        while (t > 0) {\r\n            t--;\r\n\r\n            /**\r\n             * Often awaitInSync() is called directly after a document write,\r\n             * like in the unit tests.\r\n             * So we first have to await the idleness to ensure that all RxChangeEvents\r\n             * are processed already.\r\n             */\r\n            await this.collection.database.requestIdlePromise();\r\n            await awaitRxStorageReplicationInSync(ensureNotFalsy(this.internalReplicationState));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    reSync() {\r\n        this.remoteEvents$.next('RESYNC');\r\n    }\r\n    emitEvent(ev: RxReplicationPullStreamItem<RxDocType, CheckpointType>) {\r\n        this.remoteEvents$.next(ev);\r\n    }\r\n\r\n    async cancel(): Promise<any> {\r\n        if (this.isStopped()) {\r\n            return PROMISE_RESOLVE_FALSE;\r\n        }\r\n\r\n        const promises: Promise<any>[] = this.onCancel.map(fn => toPromise(fn()));\r\n\r\n        if (this.internalReplicationState) {\r\n            await cancelRxStorageReplication(this.internalReplicationState);\r\n        }\r\n        if (this.metaInstance) {\r\n            promises.push(\r\n                ensureNotFalsy(this.internalReplicationState).checkpointQueue\r\n                    .then(() => ensureNotFalsy(this.metaInstance).close())\r\n            );\r\n        }\r\n\r\n        this.subs.forEach(sub => sub.unsubscribe());\r\n        this.subjects.canceled.next(true);\r\n\r\n        this.subjects.active.complete();\r\n        this.subjects.canceled.complete();\r\n        this.subjects.error.complete();\r\n        this.subjects.received.complete();\r\n        this.subjects.sent.complete();\r\n\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    async remove() {\r\n        await ensureNotFalsy(this.metaInstance).remove();\r\n        const metaInfo = await this.metaInfoPromise;\r\n        await this.cancel();\r\n        await removeConnectedStorageFromCollection(\r\n            this.collection,\r\n            metaInfo.collectionName,\r\n            metaInfo.schema\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport function replicateRxCollection<RxDocType, CheckpointType>(\r\n    {\r\n        replicationIdentifier,\r\n        collection,\r\n        deletedField = '_deleted',\r\n        pull,\r\n        push,\r\n        live = true,\r\n        retryTime = 1000 * 5,\r\n        waitForLeadership = true,\r\n        autoStart = true,\r\n        toggleOnDocumentVisible = false\r\n    }: ReplicationOptions<RxDocType, CheckpointType>\r\n): RxReplicationState<RxDocType, CheckpointType> {\r\n    addRxPlugin(RxDBLeaderElectionPlugin);\r\n\r\n    /**\r\n     * It is a common error to forget to add these config\r\n     * objects. So we check here because it makes no sense\r\n     * to start a replication with neither push nor pull.\r\n     */\r\n    if (!pull && !push) {\r\n        throw newRxError('UT3', {\r\n            collection: collection.name,\r\n            args: {\r\n                replicationIdentifier\r\n            }\r\n        });\r\n    }\r\n\r\n    const replicationState = new RxReplicationState<RxDocType, CheckpointType>(\r\n        replicationIdentifier,\r\n        collection,\r\n        deletedField,\r\n        pull,\r\n        push,\r\n        live,\r\n        retryTime,\r\n        autoStart,\r\n        toggleOnDocumentVisible\r\n    );\r\n\r\n\r\n    if (\r\n        toggleOnDocumentVisible &&\r\n        typeof document !== 'undefined' &&\r\n        typeof document.addEventListener === 'function' &&\r\n        typeof document.visibilityState === 'string'\r\n    ) {\r\n        const handler = () => {\r\n            if (replicationState.isStopped()) {\r\n                return;\r\n            }\r\n            const isVisible = document.visibilityState;\r\n            if (isVisible) {\r\n                replicationState.start();\r\n            } else {\r\n                /**\r\n                 * Only pause if not the current leader.\r\n                 * If no tab is visible, the elected leader should still continue\r\n                 * the replication.\r\n                 */\r\n                if (!collection.database.isLeader()) {\r\n                    replicationState.pause();\r\n                }\r\n            }\r\n        }\r\n        document.addEventListener('visibilitychange', handler);\r\n        replicationState.onCancel.push(\r\n            () => document.removeEventListener('visibilitychange', handler)\r\n        );\r\n    }\r\n\r\n\r\n    startReplicationOnLeaderShip(waitForLeadership, replicationState);\r\n    return replicationState as any;\r\n}\r\n\r\n\r\nexport function startReplicationOnLeaderShip(\r\n    waitForLeadership: boolean,\r\n    replicationState: RxReplicationState<any, any>\r\n) {\r\n    /**\r\n     * Always await this Promise to ensure that the current instance\r\n     * is leader when waitForLeadership=true\r\n     */\r\n    const mustWaitForLeadership = waitForLeadership && replicationState.collection.database.multiInstance;\r\n    const waitTillRun: Promise<any> = mustWaitForLeadership ? replicationState.collection.database.waitForLeadership() : PROMISE_RESOLVE_TRUE;\r\n    return waitTillRun.then(() => {\r\n        if (replicationState.isStopped()) {\r\n            return;\r\n        }\r\n        if (replicationState.autoStart) {\r\n            replicationState.start();\r\n        }\r\n    });\r\n}\r\n"],"mappings":"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","ignoreList":[]}