{"version":3,"file":"mongodb-helper.js","names":["_index","require","_rxSchemaHelper","RX_STORAGE_NAME_MONGODB","exports","MONGO_ID_SUBSTITUTE_FIELDNAME","primarySwapMongoDBQuerySelector","primaryKey","selector","flatClone","Array","isArray","map","item","ret","Object","entries","forEach","k","v","_id","startsWith","prepareMongoDBQuery","schema","mutateableQuery","getPrimaryFieldOfPrimaryKey","preparedQuery","query","mongoSelector","mongoSort","swapToMongoSort","sort","swapMongoToRxDoc","docData","value","swapRxDocToMongo","sortPart","key","direction","mongoKey","mongoDirection","getMongoDBIndexName","index","join"],"sources":["../../../../src/plugins/storage-mongodb/mongodb-helper.ts"],"sourcesContent":["import type {\r\n    FilledMangoQuery,\r\n    MangoQuerySelector,\r\n    MangoQuerySortPart,\r\n    RxDocumentData,\r\n    RxJsonSchema\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    Sort as MongoSort\r\n} from 'mongodb';\r\nimport { flatClone } from '../utils/index.ts';\r\nimport { MongoDBPreparedQuery, MongoQuerySelector } from './mongodb-types.ts';\r\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\r\nexport const RX_STORAGE_NAME_MONGODB = 'mongodb';\r\n\r\n/**\r\n * MongoDB uses the _id field by itself (max 12 bytes)\r\n * so we have to substitute the _id field if\r\n * it is used in the RxDocType.\r\n */\r\nexport const MONGO_ID_SUBSTITUTE_FIELDNAME = '__id';\r\n\r\nexport function primarySwapMongoDBQuerySelector<RxDocType>(\r\n    primaryKey: keyof RxDocType,\r\n    selector: MangoQuerySelector<RxDocType>\r\n): MongoQuerySelector<RxDocType> {\r\n    selector = flatClone(selector);\r\n\r\n    if (primaryKey !== '_id') {\r\n        return selector as any;\r\n    }\r\n    if (Array.isArray(selector)) {\r\n        return selector.map(item => primarySwapMongoDBQuerySelector(primaryKey, item)) as any;\r\n    } else if (typeof selector === 'object') {\r\n        const ret: any = {};\r\n        Object.entries(selector).forEach(([k, v]) => {\r\n            if (k === primaryKey) {\r\n                ret._id = v;\r\n            } else {\r\n                if (k.startsWith('$')) {\r\n                    ret[k] = primarySwapMongoDBQuerySelector(primaryKey, v as any);\r\n                } else {\r\n                    ret[k] = v;\r\n                }\r\n            }\r\n        });\r\n        return ret;\r\n    } else {\r\n        return selector;\r\n    }\r\n}\r\n\r\n\r\nexport function prepareMongoDBQuery<RxDocType>(\r\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\r\n    mutateableQuery: FilledMangoQuery<RxDocType>\r\n) {\r\n    const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey) as any;\r\n    const preparedQuery: MongoDBPreparedQuery<RxDocType> = {\r\n        query: mutateableQuery,\r\n        mongoSelector: primarySwapMongoDBQuerySelector(\r\n            primaryKey,\r\n            mutateableQuery.selector\r\n        ),\r\n        mongoSort: swapToMongoSort(mutateableQuery.sort)\r\n    };\r\n    return preparedQuery;\r\n};\r\n\r\n\r\nexport function swapMongoToRxDoc<RxDocType>(\r\n    docData: any\r\n): RxDocumentData<RxDocType> {\r\n    docData = flatClone(docData);\r\n    if ((docData as any)[MONGO_ID_SUBSTITUTE_FIELDNAME]) {\r\n        const value = (docData as any)[MONGO_ID_SUBSTITUTE_FIELDNAME];\r\n        delete (docData as any)[MONGO_ID_SUBSTITUTE_FIELDNAME];\r\n        (docData as any)._id = value;\r\n    } else {\r\n        delete (docData as any)._id;\r\n    }\r\n    return docData;\r\n}\r\n\r\nexport function swapRxDocToMongo<RxDocType>(\r\n    docData: RxDocumentData<RxDocType>\r\n): any {\r\n    docData = flatClone(docData);\r\n    if ((docData as any)._id) {\r\n        const value = (docData as any)._id;\r\n        delete (docData as any)._id;\r\n        (docData as any)[MONGO_ID_SUBSTITUTE_FIELDNAME] = value;\r\n    }\r\n    return docData;\r\n}\r\n\r\nexport function swapToMongoSort<RxDocType>(\r\n    sort: MangoQuerySortPart<RxDocType>[]\r\n): MongoSort {\r\n    const ret: MongoSort = {};\r\n    sort.forEach(sortPart => {\r\n        const [key, direction] = Object.entries(sortPart)[0];\r\n        const mongoKey = key === '_id' ? MONGO_ID_SUBSTITUTE_FIELDNAME : key;\r\n        const mongoDirection = direction === 'asc' ? 1 : -1;\r\n        ret[mongoKey] = mongoDirection;\r\n    });\r\n    return ret;\r\n}\r\n\r\nexport function getMongoDBIndexName(index: string[]): string {\r\n    return index.join('|');\r\n}\r\n"],"mappings":"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","ignoreList":[]}