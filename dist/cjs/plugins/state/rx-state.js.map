{"version":3,"file":"rx-state.js","names":["_rxjs","require","_overwritable","_rxStorageHelper","_index","_helpers","_rxError","_hooks","debugId","deepFrozenCache","WeakMap","RxStateBase","exports","prefix","collection","_id","_state","_nonPersisted","_writeQueue","PROMISE_RESOLVE_VOID","_initDone","_instanceId","randomToken","RX_STATE_COLLECTION_SCHEMA","properties","sId","maxLength","_ownEmits$","Subject","onClose","push","_lastIdQuery","findOne","sort","id","$","subscribe","merge","eventBulks$","pipe","tap","eventBulk","events","index","length","event","operation","documentData","mergeOperationsIntoState","ops","shareReplay","RXJS_SHARE_REPLAY_DEFAULTS","map","_proto","prototype","set","path","modifier","_triggerWrite","then","useWrites","done","lastIdDoc","exec","appendToArray","nextId","nextRxStateId","undefined","newState","clone","writeRow","value","getProperty","newValue","setProperty","k","v","insert","next","err","code","catch","error","newRxError","name","get","ret","overwritable","isDevMode","isValidWeakMapKey","frozen","getFromMapOrCreate","deepFreezeWhenDevMode","get$","startWith","distinctUntilChanged","deepEqual","get$$","obs","reactivity","database","getReactivityFactory","fromObservable","_cleanup","firstWrite","lastWrite","firstNr","parseInt","lastNr","find","selector","$lte","remove","createRxState","collectionName","addCollections","schema","collections","rxState","checkpoint","result","getChangedDocumentsSince","storageInstance","documents","document","proxy","Proxy","target","property","bind","lastChar","charAt","endsWith","key","slice","receiver","Error","runPluginHooks","state","operations"],"sources":["../../../../src/plugins/state/rx-state.ts"],"sourcesContent":["import {\r\n    Observable,\r\n    Subject,\r\n    distinctUntilChanged,\r\n    map,\r\n    merge,\r\n    shareReplay,\r\n    startWith,\r\n    tap\r\n} from 'rxjs';\r\nimport { overwritable } from '../../overwritable.ts';\r\nimport { getChangedDocumentsSince } from '../../rx-storage-helper.ts';\r\nimport type {\r\n    RxCollection,\r\n    RxDatabase,\r\n    RxQuery,\r\n    RxDocument,\r\n    RxError,\r\n    Paths\r\n} from '../../types';\r\nimport {\r\n    RXJS_SHARE_REPLAY_DEFAULTS,\r\n    getProperty,\r\n    setProperty,\r\n    PROMISE_RESOLVE_VOID,\r\n    appendToArray,\r\n    clone,\r\n    randomToken,\r\n    deepEqual,\r\n    getFromMapOrCreate\r\n} from '../utils/index.ts';\r\nimport {\r\n    RX_STATE_COLLECTION_SCHEMA,\r\n    isValidWeakMapKey,\r\n    nextRxStateId\r\n} from './helpers.ts';\r\nimport {\r\n    RxStateDocument,\r\n    RxStateOperation,\r\n    RxStateModifier\r\n} from './types.ts';\r\nimport { newRxError } from '../../rx-error.ts';\r\nimport { runPluginHooks } from '../../hooks.ts';\r\n\r\n\r\nlet debugId = 0;\r\n\r\n\r\nconst deepFrozenCache = new WeakMap<any, any>();\r\n\r\n/**\r\n * RxDB internally used properties are\r\n * prefixed with lodash _ to make them less\r\n * likely to clash with actual state properties\r\n * from the user.\r\n */\r\nexport class RxStateBase<T, Reactivity = unknown> {\r\n    // used for debugging\r\n    public _id: number = debugId++;\r\n    public _state: T | any = {};\r\n    public $: Observable<T>;\r\n    public _lastIdQuery: RxQuery<RxStateDocument, RxDocument<RxStateDocument, {}> | null>;\r\n    public _nonPersisted: {\r\n        path: string;\r\n        modifier: RxStateModifier;\r\n    }[] = [];\r\n    public _writeQueue = PROMISE_RESOLVE_VOID;\r\n    public _initDone = false;\r\n    public _instanceId = randomToken(RX_STATE_COLLECTION_SCHEMA.properties.sId.maxLength);\r\n    public _ownEmits$ = new Subject<T>();\r\n\r\n    constructor(\r\n        public readonly prefix: string,\r\n        public readonly collection: RxCollection<RxStateDocument>\r\n    ) {\r\n        this.collection.onClose.push(() => this._writeQueue);\r\n        this._lastIdQuery = this.collection.findOne({\r\n            sort: [\r\n                { id: 'desc' }\r\n            ]\r\n        });\r\n        // make it \"hot\" for better write performance\r\n        this._lastIdQuery.$.subscribe();\r\n\r\n        this.$ = merge(\r\n            this._ownEmits$,\r\n            this.collection.eventBulks$.pipe(\r\n                tap(eventBulk => {\r\n                    if (!this._initDone) {\r\n                        return;\r\n                    }\r\n                    const events = eventBulk.events;\r\n                    for (let index = 0; index < events.length; index++) {\r\n                        const event = events[index];\r\n                        if (\r\n                            event.operation === 'INSERT' &&\r\n                            event.documentData.sId !== this._instanceId\r\n                        ) {\r\n                            mergeOperationsIntoState(this._state, event.documentData.ops);\r\n                        }\r\n                    }\r\n                })\r\n            )\r\n        ).pipe(\r\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\r\n            map(() => this._state)\r\n        );\r\n        // directly subscribe because of the tap() side effect\r\n        this.$.subscribe();\r\n    }\r\n\r\n    async set(\r\n        path: Paths<T> | '',\r\n        modifier: RxStateModifier\r\n    ) {\r\n        this._nonPersisted.push({\r\n            path,\r\n            modifier\r\n        });\r\n        return this._triggerWrite();\r\n    }\r\n\r\n    /**\r\n     * To have deterministic writes,\r\n     * and to ensure that multiple js realms do not overwrite\r\n     * each other, the write happens with incremental ids\r\n     * that would throw conflict errors and trigger a retry.\r\n     */\r\n    _triggerWrite() {\r\n        this._writeQueue = this._writeQueue.then(async () => {\r\n            if (this._nonPersisted.length === 0) {\r\n                return;\r\n            }\r\n            let useWrites: typeof this._nonPersisted = [];\r\n            let done = false;\r\n            while (!done) {\r\n                const lastIdDoc = await this._lastIdQuery.exec();\r\n                appendToArray(useWrites, this._nonPersisted);\r\n                this._nonPersisted = [];\r\n                const nextId = nextRxStateId(lastIdDoc ? lastIdDoc.id : undefined);\r\n                try {\r\n                    /**\r\n                     * TODO instead of a deep-clone we should\r\n                     * only clone the parts where we know that they\r\n                     * will be changed. This would improve performance.\r\n                     */\r\n                    let newState = clone(this._state);\r\n                    const ops: RxStateOperation[] = [];\r\n                    for (let index = 0; index < useWrites.length; index++) {\r\n                        const writeRow = useWrites[index];\r\n                        const value = getProperty(newState, writeRow.path);\r\n                        const newValue = writeRow.modifier(value);\r\n                        /**\r\n                         * Here we have to clone the value because\r\n                         * some storages like the memory storage\r\n                         * make input data deep-frozen in dev-mode.\r\n                         */\r\n                        if (writeRow.path === '') {\r\n                            newState = clone(newValue);\r\n                        } else {\r\n                            setProperty(newState, writeRow.path, clone(newValue));\r\n                        }\r\n                        ops.push({\r\n                            k: writeRow.path,\r\n                            /**\r\n                             * Here we have to clone the value because\r\n                             * some storages like the memory storage\r\n                             * make input data deep-frozen in dev-mode.\r\n                             */\r\n                            v: clone(newValue)\r\n                        });\r\n                    }\r\n                    await this.collection.insert({\r\n                        id: nextId,\r\n                        sId: this._instanceId,\r\n                        ops\r\n                    });\r\n                    this._state = newState;\r\n                    this._ownEmits$.next(this._state);\r\n                    done = true;\r\n                } catch (err) {\r\n                    if ((err as RxError).code !== 'CONFLICT') {\r\n                        throw err;\r\n                    }\r\n                }\r\n            }\r\n        }).catch(error => {\r\n            throw newRxError('SNH', {\r\n                name: 'RxState WRITE QUEUE ERROR',\r\n                error\r\n            });\r\n        });\r\n        return this._writeQueue;\r\n    }\r\n\r\n    get(path?: Paths<T>) {\r\n        let ret;\r\n        if (!path) {\r\n            ret = this._state;\r\n        } else {\r\n            ret = getProperty(this._state, path);\r\n        }\r\n\r\n        /**\r\n         * In dev-mode we have to clone the value before deep-freezing\r\n         * it to not have an immutable subobject in the state value.\r\n         * But calling .get() with the same path multiple times,\r\n         * should return exactly the same object instance\r\n         * so it does not cause re-renders on react.\r\n         * So in dev-mode we have to \r\n         */\r\n        if (overwritable.isDevMode() && isValidWeakMapKey(ret)) {\r\n            const frozen = getFromMapOrCreate(\r\n                deepFrozenCache,\r\n                ret,\r\n                () => overwritable.deepFreezeWhenDevMode(clone(ret))\r\n            );\r\n            return frozen;\r\n        }\r\n\r\n        return ret;\r\n    }\r\n    get$(path?: Paths<T>): Observable<any> {\r\n        return this.$.pipe(\r\n            map(() => this.get(path)),\r\n            startWith(this.get(path)),\r\n            distinctUntilChanged(deepEqual),\r\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\r\n        );\r\n    }\r\n    get$$(path?: Paths<T>): Reactivity {\r\n        const obs = this.get$(path);\r\n        const reactivity = this.collection.database.getReactivityFactory();\r\n        return reactivity.fromObservable(\r\n            obs,\r\n            this.get(path),\r\n            this.collection.database\r\n        ) as any;\r\n    }\r\n\r\n    /**\r\n     * Merges the state operations into a single write row\r\n     * to store space and make recreating the state from\r\n     * disc faster.\r\n     */\r\n    async _cleanup() {\r\n        const firstWrite = await this.collection.findOne({\r\n            sort: [{ id: 'asc' }]\r\n        }).exec();\r\n        const lastWrite = await this._lastIdQuery.exec();\r\n\r\n        if (!firstWrite || !lastWrite) {\r\n            return;\r\n        }\r\n\r\n        const firstNr = parseInt(firstWrite.id, 10);\r\n        const lastNr = parseInt(lastWrite.id, 10);\r\n        if ((lastNr - 5) < firstNr) {\r\n            // only run if more then 5 write rows\r\n            return;\r\n        }\r\n\r\n        // update whole state object\r\n        await this._writeQueue;\r\n        await this.set('', () => this._state);\r\n\r\n        // delete old ones\r\n        await this.collection.find({\r\n            selector: {\r\n                id: {\r\n                    $lte: lastWrite.id\r\n                }\r\n            }\r\n        }).remove();\r\n    }\r\n}\r\n\r\n\r\nexport async function createRxState<T>(\r\n    database: RxDatabase,\r\n    prefix: string\r\n): Promise<RxStateBase<T>> {\r\n    const collectionName = 'rx-state-' + prefix;\r\n    await database.addCollections({\r\n        [collectionName]: {\r\n            schema: RX_STATE_COLLECTION_SCHEMA as any\r\n        }\r\n    });\r\n    const collection: RxCollection<RxStateDocument> = database.collections[collectionName];\r\n\r\n    const rxState = new RxStateBase<T>(\r\n        prefix,\r\n        collection\r\n    );\r\n\r\n\r\n    /**\r\n     * Directly get the state and put it into memory.\r\n     * This ensures we can do non-async accesses to the\r\n     * correct state.\r\n     */\r\n    let done = false;\r\n    let checkpoint: any = undefined;\r\n    while (!done) {\r\n        const result = await getChangedDocumentsSince<RxStateDocument, any>(\r\n            collection.storageInstance,\r\n            1000,\r\n            checkpoint\r\n        );\r\n        checkpoint = result.checkpoint;\r\n        const documents = result.documents;\r\n        if (documents.length === 0) {\r\n            done = true;\r\n        } else {\r\n            for (let index = 0; index < documents.length; index++) {\r\n                const document = documents[index];\r\n                mergeOperationsIntoState(rxState._state, document.ops);\r\n            }\r\n        }\r\n    }\r\n    rxState._initDone = true;\r\n\r\n    const proxy = new Proxy(\r\n        rxState as any,\r\n        {\r\n            get(target, property: any) {\r\n                if (typeof property !== 'string') {\r\n                    return target[property];\r\n                }\r\n                if ((rxState as any)[property]) {\r\n                    const ret = (rxState as any)[property];\r\n                    if (typeof ret === 'function') {\r\n                        return ret.bind(rxState);\r\n                    } else {\r\n                        return ret;\r\n                    }\r\n                }\r\n                const lastChar = property.charAt(property.length - 1);\r\n                if (property.endsWith('$$')) {\r\n                    const key = property.slice(0, -2);\r\n                    return rxState.get$$(key as any);\r\n                } else if (lastChar === '$') {\r\n                    const key = property.slice(0, -1);\r\n                    return rxState.get$(key as any);\r\n                } else {\r\n                    return rxState.get(property as any);\r\n                }\r\n            },\r\n            set(target, newValue, receiver) {\r\n                throw new Error('Do not write to RxState');\r\n            }\r\n        }\r\n    );\r\n\r\n    runPluginHooks('createRxState', {\r\n        collection,\r\n        state: proxy\r\n    });\r\n\r\n    return proxy;\r\n}\r\n\r\n\r\nexport function mergeOperationsIntoState<T>(\r\n    state: T,\r\n    operations: RxStateOperation[]\r\n) {\r\n    for (let index = 0; index < operations.length; index++) {\r\n        const operation = operations[index];\r\n        setProperty(state, operation.k, clone(operation.v));\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]}