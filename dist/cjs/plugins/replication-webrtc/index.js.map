{"version":3,"file":"index.js","names":["_rxjs","require","_plugin","_index","_index2","_index3","_index4","_webrtcHelper","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_rxError","_signalingServer","_webrtcTypes","_connectionHandlerSimplePeer","replicateWebRTC","options","collection","addRxPlugin","RxDBLeaderElectionPlugin","pull","batchSize","push","database","multiInstance","waitForLeadership","requestCounter","requestFlag","randomToken","getRequestId","count","token","storageToken","pool","RxWebRTCReplicationPool","connectionHandlerCreator","subs","connectionHandler","error$","subscribe","err","next","disconnect$","peer","removePeer","message$","pipe","filter","data","message","method","send","id","result","connectSub","connect$","canceled","isPeerValid","isValid","peerToken","tokenResponse","sendMessageAndAwaitAnswer","params","error","newRxError","isMaster","isMasterInWebRTCReplication","hashFunction","replicationState","masterHandler","masterReplicationHandler","masterChangeStreamSub","masterChangeStream$","ev","streamResponse","p","unsubscribe","messageSub","msgPeer","bind","response","replicateRxCollection","replicationIdentifier","name","topic","join","autoStart","deletedField","live","retryTime","assign","handler","lastPulledCheckpoint","answer","ensureNotFalsy","stream$","response$","m","map","undefined","docs","addPeer","peerStates$","BehaviorSubject","Map","Subject","onClose","cancel","rxStorageInstanceToReplicationHandler","storageInstance","conflictHandler","_proto","peerState","getValue","set","getFromMapOrThrow","delete","sub","awaitFirstPeer","firstValueFrom","peerStates","size","Array","from","close"],"sources":["../../../../src/plugins/replication-webrtc/index.ts"],"sourcesContent":["import {\r\n    BehaviorSubject,\r\n    filter,\r\n    firstValueFrom,\r\n    map,\r\n    Subject,\r\n    Subscription\r\n} from 'rxjs';\r\nimport { addRxPlugin } from '../../plugin.ts';\r\nimport { rxStorageInstanceToReplicationHandler } from '../../replication-protocol/index.ts';\r\nimport type {\r\n    RxCollection,\r\n    RxError,\r\n    RxReplicationHandler,\r\n    RxReplicationWriteToMasterRow,\r\n    RxTypeError\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    ensureNotFalsy,\r\n    getFromMapOrThrow,\r\n    randomToken\r\n} from '../../plugins/utils/index.ts';\r\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\r\nimport { replicateRxCollection } from '../replication/index.ts';\r\nimport {\r\n    isMasterInWebRTCReplication,\r\n    sendMessageAndAwaitAnswer\r\n} from './webrtc-helper.ts';\r\nimport type {\r\n    WebRTCConnectionHandler,\r\n    WebRTCPeerState,\r\n    WebRTCReplicationCheckpoint,\r\n    WebRTCResponse,\r\n    RxWebRTCReplicationState,\r\n    SyncOptionsWebRTC\r\n} from './webrtc-types.ts';\r\nimport { newRxError } from '../../rx-error.ts';\r\n\r\n\r\nexport async function replicateWebRTC<RxDocType, PeerType>(\r\n    options: SyncOptionsWebRTC<RxDocType, PeerType>\r\n): Promise<RxWebRTCReplicationPool<RxDocType, PeerType>> {\r\n    const collection = options.collection;\r\n    addRxPlugin(RxDBLeaderElectionPlugin);\r\n\r\n    // fill defaults\r\n    if (options.pull) {\r\n        if (!options.pull.batchSize) {\r\n            options.pull.batchSize = 20;\r\n        }\r\n    }\r\n    if (options.push) {\r\n        if (!options.push.batchSize) {\r\n            options.push.batchSize = 20;\r\n        }\r\n    }\r\n\r\n    if (collection.database.multiInstance) {\r\n        await collection.database.waitForLeadership();\r\n    }\r\n\r\n    // used to easier debug stuff\r\n    let requestCounter = 0;\r\n    const requestFlag = randomToken(10);\r\n    function getRequestId() {\r\n        const count = requestCounter++;\r\n        return collection.database.token + '|' + requestFlag + '|' + count;\r\n    }\r\n\r\n    const storageToken = await collection.database.storageToken;\r\n    const pool = new RxWebRTCReplicationPool(\r\n        collection,\r\n        options,\r\n        await options.connectionHandlerCreator(options)\r\n    );\r\n\r\n\r\n    pool.subs.push(\r\n        pool.connectionHandler.error$.subscribe(err => pool.error$.next(err)),\r\n        pool.connectionHandler.disconnect$.subscribe(peer => pool.removePeer(peer))\r\n    );\r\n\r\n    /**\r\n     * Answer if someone requests our storage token\r\n     */\r\n    pool.subs.push(\r\n        pool.connectionHandler.message$.pipe(\r\n            filter(data => data.message.method === 'token')\r\n        ).subscribe(data => {\r\n            pool.connectionHandler.send(data.peer, {\r\n                id: data.message.id,\r\n                result: storageToken\r\n            });\r\n        })\r\n    );\r\n\r\n    const connectSub = pool.connectionHandler.connect$\r\n        .pipe(\r\n            filter(() => !pool.canceled)\r\n        )\r\n        .subscribe(async (peer) => {\r\n            if (options.isPeerValid) {\r\n                const isValid = await options.isPeerValid(peer);\r\n                if (!isValid) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            let peerToken: string;\r\n            try {\r\n                const tokenResponse = await sendMessageAndAwaitAnswer(\r\n                    pool.connectionHandler,\r\n                    peer,\r\n                    {\r\n                        id: getRequestId(),\r\n                        method: 'token',\r\n                        params: []\r\n                    }\r\n                );\r\n                peerToken = tokenResponse.result;\r\n            } catch (error: any) {\r\n                /**\r\n                 * If could not get the tokenResponse,\r\n                 * just ignore that peer.\r\n                 */\r\n                pool.error$.next(newRxError('RC_WEBRTC_PEER', {\r\n                    error\r\n                }));\r\n                return;\r\n            }\r\n            const isMaster = await isMasterInWebRTCReplication(collection.database.hashFunction, storageToken, peerToken);\r\n\r\n            let replicationState: RxWebRTCReplicationState<RxDocType> | undefined;\r\n            if (isMaster) {\r\n                const masterHandler = pool.masterReplicationHandler;\r\n                const masterChangeStreamSub = masterHandler.masterChangeStream$.subscribe(ev => {\r\n                    const streamResponse: WebRTCResponse = {\r\n                        id: 'masterChangeStream$',\r\n                        result: ev\r\n                    };\r\n                    pool.connectionHandler.send(peer, streamResponse);\r\n                });\r\n\r\n                // clean up the subscription\r\n                pool.subs.push(\r\n                    masterChangeStreamSub,\r\n                    pool.connectionHandler.disconnect$.pipe(\r\n                        filter(p => p === peer)\r\n                    ).subscribe(() => masterChangeStreamSub.unsubscribe())\r\n                );\r\n\r\n                const messageSub = pool.connectionHandler.message$\r\n                    .pipe(\r\n                        filter(data => data.peer === peer),\r\n                        filter(data => data.message.method !== 'token')\r\n                    )\r\n                    .subscribe(async (data) => {\r\n                        const { peer: msgPeer, message } = data;\r\n                        /**\r\n                         * If it is not a function,\r\n                         * it means that the client requested the masterChangeStream$\r\n                         */\r\n                        const method = (masterHandler as any)[message.method].bind(masterHandler);\r\n                        const result = await (method as any)(...message.params);\r\n                        const response: WebRTCResponse = {\r\n                            id: message.id,\r\n                            result\r\n                        };\r\n                        pool.connectionHandler.send(msgPeer, response);\r\n                    });\r\n                pool.subs.push(messageSub);\r\n            } else {\r\n                replicationState = replicateRxCollection({\r\n                    replicationIdentifier: [collection.name, options.topic, peerToken].join('||'),\r\n                    collection: collection,\r\n                    autoStart: true,\r\n                    deletedField: '_deleted',\r\n                    live: true,\r\n                    retryTime: options.retryTime,\r\n                    waitForLeadership: false,\r\n                    pull: options.pull ? Object.assign({}, options.pull, {\r\n                        async handler(lastPulledCheckpoint: WebRTCReplicationCheckpoint | undefined) {\r\n                            const answer = await sendMessageAndAwaitAnswer(\r\n                                pool.connectionHandler,\r\n                                peer,\r\n                                {\r\n                                    method: 'masterChangesSince',\r\n                                    params: [\r\n                                        lastPulledCheckpoint,\r\n                                        ensureNotFalsy(options.pull).batchSize\r\n                                    ],\r\n                                    id: getRequestId()\r\n                                }\r\n                            );\r\n                            return answer.result;\r\n                        },\r\n                        stream$: pool.connectionHandler.response$.pipe(\r\n                            filter(m => m.response.id === 'masterChangeStream$'),\r\n                            map(m => m.response.result)\r\n                        )\r\n\r\n                    }) : undefined,\r\n                    push: options.push ? Object.assign({}, options.push, {\r\n                        async handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\r\n                            const answer = await sendMessageAndAwaitAnswer(\r\n                                pool.connectionHandler,\r\n                                peer,\r\n                                {\r\n                                    method: 'masterWrite',\r\n                                    params: [docs],\r\n                                    id: getRequestId()\r\n                                }\r\n                            );\r\n                            return answer.result;\r\n                        }\r\n                    }) : undefined\r\n                });\r\n            }\r\n            pool.addPeer(peer, replicationState);\r\n        });\r\n    pool.subs.push(connectSub);\r\n    return pool;\r\n}\r\n\r\n\r\n/**\r\n * Because the WebRTC replication runs between many instances,\r\n * we use a Pool instead of returning a single replication state.\r\n */\r\nexport class RxWebRTCReplicationPool<RxDocType, PeerType> {\r\n    peerStates$: BehaviorSubject<Map<PeerType, WebRTCPeerState<RxDocType, PeerType>>> = new BehaviorSubject(new Map());\r\n    canceled: boolean = false;\r\n    masterReplicationHandler: RxReplicationHandler<RxDocType, WebRTCReplicationCheckpoint>;\r\n    subs: Subscription[] = [];\r\n\r\n    public error$ = new Subject<RxError | RxTypeError>();\r\n\r\n    constructor(\r\n        public readonly collection: RxCollection<RxDocType>,\r\n        public readonly options: SyncOptionsWebRTC<RxDocType, PeerType>,\r\n        public readonly connectionHandler: WebRTCConnectionHandler<PeerType>\r\n    ) {\r\n        this.collection.onClose.push(() => this.cancel());\r\n        this.masterReplicationHandler = rxStorageInstanceToReplicationHandler(\r\n            collection.storageInstance,\r\n            collection.conflictHandler,\r\n            collection.database.token,\r\n        );\r\n    }\r\n\r\n    addPeer(\r\n        peer: PeerType,\r\n        // only if isMaster=false it has a replicationState\r\n        replicationState?: RxWebRTCReplicationState<RxDocType>\r\n    ) {\r\n        const peerState: WebRTCPeerState<RxDocType, PeerType> = {\r\n            peer,\r\n            replicationState,\r\n            subs: []\r\n        };\r\n        this.peerStates$.next(this.peerStates$.getValue().set(peer, peerState));\r\n        if (replicationState) {\r\n            peerState.subs.push(\r\n                replicationState.error$.subscribe(ev => this.error$.next(ev))\r\n            );\r\n        }\r\n    }\r\n    removePeer(peer: PeerType) {\r\n        const peerState = getFromMapOrThrow(this.peerStates$.getValue(), peer);\r\n        this.peerStates$.getValue().delete(peer);\r\n        this.peerStates$.next(this.peerStates$.getValue());\r\n        peerState.subs.forEach(sub => sub.unsubscribe());\r\n        if (peerState.replicationState) {\r\n            peerState.replicationState.cancel();\r\n        }\r\n    }\r\n\r\n    // often used in unit tests\r\n    awaitFirstPeer() {\r\n        return firstValueFrom(\r\n            this.peerStates$.pipe(\r\n                filter(peerStates => peerStates.size > 0)\r\n            )\r\n        );\r\n    }\r\n\r\n    public async cancel() {\r\n        if (this.canceled) {\r\n            return;\r\n        }\r\n        this.canceled = true;\r\n        this.subs.forEach(sub => sub.unsubscribe());\r\n        Array.from(this.peerStates$.getValue().keys()).forEach(peer => {\r\n            this.removePeer(peer);\r\n        });\r\n        await this.connectionHandler.close();\r\n    }\r\n}\r\n\r\nexport * from './webrtc-helper.ts';\r\nexport * from './signaling-server.ts';\r\nexport * from './webrtc-types.ts';\r\n// export * from './connection-handler-webtorrent';\r\n// export * from './connection-handler-p2pcf';\r\nexport * from './connection-handler-simple-peer.ts';\r\n"],"mappings":"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","ignoreList":[]}