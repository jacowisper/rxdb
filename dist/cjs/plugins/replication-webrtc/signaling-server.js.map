{"version":3,"file":"signaling-server.js","names":["_index","require","_connectionHandlerSimplePeer","PEER_ID_LENGTH","exports","startSignalingServerSimplePeer","serverOptions","WebSocketServer","wss","peerById","Map","peersByRoom","serverClosed","on","clear","_loop","promiseWait","minTime","Date","now","SIMPLE_PEER_PING_INTERVAL","Array","from","values","forEach","peer","lastPing","disconnectSocket","id","peerId","reason","console","log","get","socket","close","undefined","rooms","roomId","room","delete","size","ws","randomToken","Set","set","sendMessage","type","yourPeerId","err","error","dir","msgEvent","message","JSON","parse","toString","validateIdString","has","add","getFromMapOrCreate","otherPeerId","otherPeer","otherPeerIds","senderPeerId","receiver","receiverPeerId","port","server","localUrl","msgString","stringify","send","length"],"sources":["../../../../src/plugins/replication-webrtc/signaling-server.ts"],"sourcesContent":["import {\r\n    getFromMapOrCreate,\r\n    promiseWait,\r\n    randomToken\r\n} from '../utils/index.ts';\r\nimport {\r\n    SIMPLE_PEER_PING_INTERVAL,\r\n    type PeerMessage\r\n} from './connection-handler-simple-peer.ts';\r\nimport type {\r\n    WebSocket,\r\n    ServerOptions\r\n} from 'ws';\r\n\r\nexport const PEER_ID_LENGTH = 12;\r\nexport type ServerPeer = {\r\n    id: string;\r\n    socket: WebSocket;\r\n    rooms: Set<string>;\r\n    lastPing: number;\r\n};\r\n\r\n\r\n/**\r\n * Starts a WebRTC signaling server\r\n * that can be used in tests.\r\n*/\r\nexport async function startSignalingServerSimplePeer(\r\n    serverOptions: ServerOptions\r\n) {\r\n    const { WebSocketServer } = await import('ws');\r\n    const wss = new WebSocketServer(serverOptions);\r\n\r\n    const peerById = new Map<string, ServerPeer>();\r\n    const peersByRoom = new Map<string, Set<string>>();\r\n\r\n    let serverClosed = false;\r\n    wss.on('close', () => {\r\n        serverClosed = true\r\n        peerById.clear();\r\n        peersByRoom.clear();\r\n    });\r\n\r\n    /**\r\n     * Clients can disconnect without telling that to the\r\n     * server. Therefore we have to automatically disconnect clients that\r\n     * have not send a ping message in the last 2 minutes.\r\n     */\r\n    (async () => {\r\n        while (!serverClosed) {\r\n            await promiseWait(1000 * 5);\r\n            const minTime = Date.now() - SIMPLE_PEER_PING_INTERVAL;\r\n            Array.from(peerById.values()).forEach(peer => {\r\n                if (peer.lastPing < minTime) {\r\n                    disconnectSocket(peer.id, 'no ping for 2 minutes');\r\n                }\r\n            });\r\n        }\r\n    })();\r\n\r\n    function disconnectSocket(peerId: string, reason: string) {\r\n        console.log('# disconnect peer ' + peerId + ' reason: ' + reason);\r\n        const peer = peerById.get(peerId);\r\n        if (peer) {\r\n            peer.socket.close && peer.socket.close(undefined, reason);\r\n            peer.rooms.forEach(roomId => {\r\n                const room = peersByRoom.get(roomId);\r\n                room?.delete(peerId);\r\n                if (room && room.size === 0) {\r\n                    peersByRoom.delete(roomId);\r\n                }\r\n            });\r\n        }\r\n        peerById.delete(peerId);\r\n    }\r\n\r\n    wss.on('connection', function (ws) {\r\n        /**\r\n         * PeerID is created by the server to prevent malicious\r\n         * actors from falsy claiming other peoples ids.\r\n         */\r\n        const peerId = randomToken(PEER_ID_LENGTH);\r\n        const peer: ServerPeer = {\r\n            id: peerId,\r\n            socket: ws,\r\n            rooms: new Set(),\r\n            lastPing: Date.now()\r\n        };\r\n        peerById.set(peerId, peer);\r\n\r\n        sendMessage(ws, { type: 'init', yourPeerId: peerId });\r\n\r\n\r\n        ws.on('error', err => {\r\n            console.error('SERVER ERROR:');\r\n            console.dir(err);\r\n            disconnectSocket(peerId, 'socket errored');\r\n        });\r\n        ws.on('close', () => {\r\n            disconnectSocket(peerId, 'socket disconnected');\r\n        });\r\n\r\n        ws.on('message', msgEvent => {\r\n            peer.lastPing = Date.now();\r\n            const message = JSON.parse(msgEvent.toString());\r\n            const type = message.type;\r\n            switch (type) {\r\n                case 'join':\r\n                    const roomId = message.room;\r\n                    if (\r\n                        !validateIdString(roomId) ||\r\n                        !validateIdString(peerId)\r\n                    ) {\r\n                        disconnectSocket(peerId, 'invalid ids');\r\n                        return;\r\n                    }\r\n\r\n                    if (peer.rooms.has(peerId)) {\r\n                        return;\r\n                    }\r\n                    peer.rooms.add(roomId);\r\n\r\n\r\n                    const room = getFromMapOrCreate(\r\n                        peersByRoom,\r\n                        message.room,\r\n                        () => new Set()\r\n                    );\r\n\r\n                    room.add(peerId);\r\n\r\n                    // tell everyone about new room state\r\n                    room.forEach(otherPeerId => {\r\n                        const otherPeer = peerById.get(otherPeerId);\r\n                        if (otherPeer) {\r\n                            sendMessage(\r\n                                otherPeer.socket,\r\n                                {\r\n                                    type: 'joined',\r\n                                    otherPeerIds: Array.from(room)\r\n                                }\r\n                            );\r\n                        }\r\n                    });\r\n                    break;\r\n                case 'signal':\r\n                    if (\r\n                        message.senderPeerId !== peerId\r\n                    ) {\r\n                        disconnectSocket(peerId, 'spoofed sender');\r\n                        return;\r\n                    }\r\n                    const receiver = peerById.get(message.receiverPeerId);\r\n                    if (receiver) {\r\n                        sendMessage(\r\n                            receiver.socket,\r\n                            message\r\n                        );\r\n                    }\r\n                    break;\r\n                case 'ping':\r\n                    break;\r\n                default:\r\n                    disconnectSocket(peerId, 'unknown message type ' + type);\r\n            }\r\n\r\n        });\r\n    });\r\n\r\n    return {\r\n        port: serverOptions.port,\r\n        server: wss,\r\n        localUrl: 'ws://localhost:' + serverOptions.port\r\n    };\r\n}\r\n\r\n\r\nfunction sendMessage(ws: WebSocket, message: PeerMessage) {\r\n    const msgString = JSON.stringify(message);\r\n    ws.send(msgString);\r\n}\r\n\r\nfunction validateIdString(roomId: string): boolean {\r\n    if (\r\n        typeof roomId === 'string' &&\r\n        roomId.length > 5 &&\r\n        roomId.length < 100\r\n    ) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n"],"mappings":";;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAKA,IAAAC,4BAAA,GAAAD,OAAA;AASO,IAAME,cAAc,GAAAC,OAAA,CAAAD,cAAA,GAAG,EAAE;AAShC;AACA;AACA;AACA;AACO,eAAeE,8BAA8BA,CAChDC,aAA4B,EAC9B;EACE,IAAM;IAAEC;EAAgB,CAAC,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC;EAC9C,IAAMC,GAAG,GAAG,IAAID,eAAe,CAACD,aAAa,CAAC;EAE9C,IAAMG,QAAQ,GAAG,IAAIC,GAAG,CAAqB,CAAC;EAC9C,IAAMC,WAAW,GAAG,IAAID,GAAG,CAAsB,CAAC;EAElD,IAAIE,YAAY,GAAG,KAAK;EACxBJ,GAAG,CAACK,EAAE,CAAC,OAAO,EAAE,MAAM;IAClBD,YAAY,GAAG,IAAI;IACnBH,QAAQ,CAACK,KAAK,CAAC,CAAC;IAChBH,WAAW,CAACG,KAAK,CAAC,CAAC;EACvB,CAAC,CAAC;;EAEF;AACJ;AACA;AACA;AACA;EACI,CAAC,YAAY;IAAA,IAAAC,KAAA,kBAAAA,CAAA,EACa;MAClB,MAAM,IAAAC,kBAAW,EAAC,IAAI,GAAG,CAAC,CAAC;MAC3B,IAAMC,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGC,sDAAyB;MACtDC,KAAK,CAACC,IAAI,CAACb,QAAQ,CAACc,MAAM,CAAC,CAAC,CAAC,CAACC,OAAO,CAACC,IAAI,IAAI;QAC1C,IAAIA,IAAI,CAACC,QAAQ,GAAGT,OAAO,EAAE;UACzBU,gBAAgB,CAACF,IAAI,CAACG,EAAE,EAAE,uBAAuB,CAAC;QACtD;MACJ,CAAC,CAAC;IACN,CAAC;IARD,OAAO,CAAChB,YAAY;MAAA,MAAAG,KAAA;IAAA;EASxB,CAAC,EAAE,CAAC;EAEJ,SAASY,gBAAgBA,CAACE,MAAc,EAAEC,MAAc,EAAE;IACtDC,OAAO,CAACC,GAAG,CAAC,oBAAoB,GAAGH,MAAM,GAAG,WAAW,GAAGC,MAAM,CAAC;IACjE,IAAML,IAAI,GAAGhB,QAAQ,CAACwB,GAAG,CAACJ,MAAM,CAAC;IACjC,IAAIJ,IAAI,EAAE;MACNA,IAAI,CAACS,MAAM,CAACC,KAAK,IAAIV,IAAI,CAACS,MAAM,CAACC,KAAK,CAACC,SAAS,EAAEN,MAAM,CAAC;MACzDL,IAAI,CAACY,KAAK,CAACb,OAAO,CAACc,MAAM,IAAI;QACzB,IAAMC,IAAI,GAAG5B,WAAW,CAACsB,GAAG,CAACK,MAAM,CAAC;QACpCC,IAAI,EAAEC,MAAM,CAACX,MAAM,CAAC;QACpB,IAAIU,IAAI,IAAIA,IAAI,CAACE,IAAI,KAAK,CAAC,EAAE;UACzB9B,WAAW,CAAC6B,MAAM,CAACF,MAAM,CAAC;QAC9B;MACJ,CAAC,CAAC;IACN;IACA7B,QAAQ,CAAC+B,MAAM,CAACX,MAAM,CAAC;EAC3B;EAEArB,GAAG,CAACK,EAAE,CAAC,YAAY,EAAE,UAAU6B,EAAE,EAAE;IAC/B;AACR;AACA;AACA;IACQ,IAAMb,MAAM,GAAG,IAAAc,kBAAW,EAACxC,cAAc,CAAC;IAC1C,IAAMsB,IAAgB,GAAG;MACrBG,EAAE,EAAEC,MAAM;MACVK,MAAM,EAAEQ,EAAE;MACVL,KAAK,EAAE,IAAIO,GAAG,CAAC,CAAC;MAChBlB,QAAQ,EAAER,IAAI,CAACC,GAAG,CAAC;IACvB,CAAC;IACDV,QAAQ,CAACoC,GAAG,CAAChB,MAAM,EAAEJ,IAAI,CAAC;IAE1BqB,WAAW,CAACJ,EAAE,EAAE;MAAEK,IAAI,EAAE,MAAM;MAAEC,UAAU,EAAEnB;IAAO,CAAC,CAAC;IAGrDa,EAAE,CAAC7B,EAAE,CAAC,OAAO,EAAEoC,GAAG,IAAI;MAClBlB,OAAO,CAACmB,KAAK,CAAC,eAAe,CAAC;MAC9BnB,OAAO,CAACoB,GAAG,CAACF,GAAG,CAAC;MAChBtB,gBAAgB,CAACE,MAAM,EAAE,gBAAgB,CAAC;IAC9C,CAAC,CAAC;IACFa,EAAE,CAAC7B,EAAE,CAAC,OAAO,EAAE,MAAM;MACjBc,gBAAgB,CAACE,MAAM,EAAE,qBAAqB,CAAC;IACnD,CAAC,CAAC;IAEFa,EAAE,CAAC7B,EAAE,CAAC,SAAS,EAAEuC,QAAQ,IAAI;MACzB3B,IAAI,CAACC,QAAQ,GAAGR,IAAI,CAACC,GAAG,CAAC,CAAC;MAC1B,IAAMkC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,QAAQ,CAACI,QAAQ,CAAC,CAAC,CAAC;MAC/C,IAAMT,IAAI,GAAGM,OAAO,CAACN,IAAI;MACzB,QAAQA,IAAI;QACR,KAAK,MAAM;UACP,IAAMT,MAAM,GAAGe,OAAO,CAACd,IAAI;UAC3B,IACI,CAACkB,gBAAgB,CAACnB,MAAM,CAAC,IACzB,CAACmB,gBAAgB,CAAC5B,MAAM,CAAC,EAC3B;YACEF,gBAAgB,CAACE,MAAM,EAAE,aAAa,CAAC;YACvC;UACJ;UAEA,IAAIJ,IAAI,CAACY,KAAK,CAACqB,GAAG,CAAC7B,MAAM,CAAC,EAAE;YACxB;UACJ;UACAJ,IAAI,CAACY,KAAK,CAACsB,GAAG,CAACrB,MAAM,CAAC;UAGtB,IAAMC,IAAI,GAAG,IAAAqB,yBAAkB,EAC3BjD,WAAW,EACX0C,OAAO,CAACd,IAAI,EACZ,MAAM,IAAIK,GAAG,CAAC,CAClB,CAAC;UAEDL,IAAI,CAACoB,GAAG,CAAC9B,MAAM,CAAC;;UAEhB;UACAU,IAAI,CAACf,OAAO,CAACqC,WAAW,IAAI;YACxB,IAAMC,SAAS,GAAGrD,QAAQ,CAACwB,GAAG,CAAC4B,WAAW,CAAC;YAC3C,IAAIC,SAAS,EAAE;cACXhB,WAAW,CACPgB,SAAS,CAAC5B,MAAM,EAChB;gBACIa,IAAI,EAAE,QAAQ;gBACdgB,YAAY,EAAE1C,KAAK,CAACC,IAAI,CAACiB,IAAI;cACjC,CACJ,CAAC;YACL;UACJ,CAAC,CAAC;UACF;QACJ,KAAK,QAAQ;UACT,IACIc,OAAO,CAACW,YAAY,KAAKnC,MAAM,EACjC;YACEF,gBAAgB,CAACE,MAAM,EAAE,gBAAgB,CAAC;YAC1C;UACJ;UACA,IAAMoC,QAAQ,GAAGxD,QAAQ,CAACwB,GAAG,CAACoB,OAAO,CAACa,cAAc,CAAC;UACrD,IAAID,QAAQ,EAAE;YACVnB,WAAW,CACPmB,QAAQ,CAAC/B,MAAM,EACfmB,OACJ,CAAC;UACL;UACA;QACJ,KAAK,MAAM;UACP;QACJ;UACI1B,gBAAgB,CAACE,MAAM,EAAE,uBAAuB,GAAGkB,IAAI,CAAC;MAChE;IAEJ,CAAC,CAAC;EACN,CAAC,CAAC;EAEF,OAAO;IACHoB,IAAI,EAAE7D,aAAa,CAAC6D,IAAI;IACxBC,MAAM,EAAE5D,GAAG;IACX6D,QAAQ,EAAE,iBAAiB,GAAG/D,aAAa,CAAC6D;EAChD,CAAC;AACL;AAGA,SAASrB,WAAWA,CAACJ,EAAa,EAAEW,OAAoB,EAAE;EACtD,IAAMiB,SAAS,GAAGhB,IAAI,CAACiB,SAAS,CAAClB,OAAO,CAAC;EACzCX,EAAE,CAAC8B,IAAI,CAACF,SAAS,CAAC;AACtB;AAEA,SAASb,gBAAgBA,CAACnB,MAAc,EAAW;EAC/C,IACI,OAAOA,MAAM,KAAK,QAAQ,IAC1BA,MAAM,CAACmC,MAAM,GAAG,CAAC,IACjBnC,MAAM,CAACmC,MAAM,GAAG,GAAG,EACrB;IACE,OAAO,IAAI;EACf,CAAC,MAAM;IACH,OAAO,KAAK;EAChB;AACJ","ignoreList":[]}