{"version":3,"file":"index.js","names":["_broadcastChannel","require","_rxStorageMultiinstance","_index","LEADER_ELECTORS_OF_DB","WeakMap","LEADER_ELECTOR_BY_BROADCAST_CHANNEL","getLeaderElectorByBroadcastChannel","broadcastChannel","getFromMapOrCreate","createLeaderElection","getForDatabase","getBroadcastChannelReference","storage","name","token","oldClose","close","bind","removeBroadcastChannelReference","elector","set","leaderElector","isLeader","multiInstance","waitForLeadership","PROMISE_RESOLVE_TRUE","awaitLeadership","then","onClose","db","has","get","die","rxdb","exports","prototypes","RxDatabase","proto","RxDBLeaderElectionPlugin","hooks","preCloseRxDatabase","after"],"sources":["../../../../src/plugins/leader-election/index.ts"],"sourcesContent":["/**\r\n * this plugin adds the leader-election-capabilities to rxdb\r\n */\r\n\r\nimport {\r\n    createLeaderElection,\r\n    LeaderElector,\r\n    BroadcastChannel\r\n} from 'broadcast-channel';\r\nimport {\r\n    getBroadcastChannelReference,\r\n    removeBroadcastChannelReference\r\n} from '../../rx-storage-multiinstance.ts';\r\n\r\nimport type {\r\n    RxDatabase,\r\n    RxPlugin\r\n} from '../../types/index.d.ts';\r\nimport { PROMISE_RESOLVE_TRUE, getFromMapOrCreate } from '../utils/index.ts';\r\n\r\nconst LEADER_ELECTORS_OF_DB: WeakMap<RxDatabase, LeaderElector> = new WeakMap();\r\nconst LEADER_ELECTOR_BY_BROADCAST_CHANNEL: WeakMap<BroadcastChannel, LeaderElector> = new WeakMap();\r\n\r\n\r\n/**\r\n * Returns the leader elector of a broadcast channel.\r\n * Used to ensure we reuse the same elector for the channel each time.\r\n */\r\nexport function getLeaderElectorByBroadcastChannel(broadcastChannel: BroadcastChannel): LeaderElector {\r\n    return getFromMapOrCreate(\r\n        LEADER_ELECTOR_BY_BROADCAST_CHANNEL,\r\n        broadcastChannel,\r\n        () => createLeaderElection(broadcastChannel)\r\n    );\r\n}\r\n\r\n/**\r\n * @overwrites RxDatabase().leaderElector for caching\r\n */\r\nexport function getForDatabase(this: RxDatabase): LeaderElector {\r\n    const broadcastChannel = getBroadcastChannelReference(\r\n        this.storage.name,\r\n        this.token,\r\n        this.name,\r\n        this\r\n    );\r\n\r\n    /**\r\n     * Clean up the reference on RxDatabase.close()\r\n     */\r\n    const oldClose = this.close.bind(this);\r\n    this.close = function () {\r\n        removeBroadcastChannelReference(this.token, this);\r\n        return oldClose();\r\n    };\r\n\r\n\r\n    let elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\r\n    if (!elector) {\r\n        elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\r\n        LEADER_ELECTORS_OF_DB.set(\r\n            this,\r\n            elector\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Overwrite for caching\r\n     */\r\n    this.leaderElector = () => elector;\r\n\r\n    return elector;\r\n}\r\n\r\nexport function isLeader(this: RxDatabase): boolean {\r\n    if (!this.multiInstance) {\r\n        return true;\r\n    }\r\n    return this.leaderElector().isLeader;\r\n}\r\n\r\nexport function waitForLeadership(this: RxDatabase): Promise<boolean> {\r\n    if (!this.multiInstance) {\r\n        return PROMISE_RESOLVE_TRUE;\r\n    } else {\r\n        return this.leaderElector()\r\n            .awaitLeadership()\r\n            .then(() => true);\r\n    }\r\n}\r\n\r\n/**\r\n * runs when the database gets closed\r\n */\r\nexport function onClose(db: RxDatabase) {\r\n    const has = LEADER_ELECTORS_OF_DB.get(db);\r\n    if (has) {\r\n        has.die();\r\n    }\r\n}\r\n\r\nexport const rxdb = true;\r\nexport const prototypes = {\r\n    RxDatabase: (proto: any) => {\r\n        proto.leaderElector = getForDatabase;\r\n        proto.isLeader = isLeader;\r\n        proto.waitForLeadership = waitForLeadership;\r\n    }\r\n};\r\n\r\nexport const RxDBLeaderElectionPlugin: RxPlugin = {\r\n    name: 'leader-election',\r\n    rxdb,\r\n    prototypes,\r\n    hooks: {\r\n        preCloseRxDatabase: {\r\n            after: onClose\r\n        }\r\n    }\r\n};\r\n"],"mappings":";;;;;;;;;;;;AAIA,IAAAA,iBAAA,GAAAC,OAAA;AAKA,IAAAC,uBAAA,GAAAD,OAAA;AASA,IAAAE,MAAA,GAAAF,OAAA;AAlBA;AACA;AACA;;AAkBA,IAAMG,qBAAyD,GAAG,IAAIC,OAAO,CAAC,CAAC;AAC/E,IAAMC,mCAA6E,GAAG,IAAID,OAAO,CAAC,CAAC;;AAGnG;AACA;AACA;AACA;AACO,SAASE,kCAAkCA,CAACC,gBAAkC,EAAiB;EAClG,OAAO,IAAAC,yBAAkB,EACrBH,mCAAmC,EACnCE,gBAAgB,EAChB,MAAM,IAAAE,sCAAoB,EAACF,gBAAgB,CAC/C,CAAC;AACL;;AAEA;AACA;AACA;AACO,SAASG,cAAcA,CAAA,EAAkC;EAC5D,IAAMH,gBAAgB,GAAG,IAAAI,oDAA4B,EACjD,IAAI,CAACC,OAAO,CAACC,IAAI,EACjB,IAAI,CAACC,KAAK,EACV,IAAI,CAACD,IAAI,EACT,IACJ,CAAC;;EAED;AACJ;AACA;EACI,IAAME,QAAQ,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC;EACtC,IAAI,CAACD,KAAK,GAAG,YAAY;IACrB,IAAAE,uDAA+B,EAAC,IAAI,CAACJ,KAAK,EAAE,IAAI,CAAC;IACjD,OAAOC,QAAQ,CAAC,CAAC;EACrB,CAAC;EAGD,IAAII,OAAO,GAAGb,kCAAkC,CAACC,gBAAgB,CAAC;EAClE,IAAI,CAACY,OAAO,EAAE;IACVA,OAAO,GAAGb,kCAAkC,CAACC,gBAAgB,CAAC;IAC9DJ,qBAAqB,CAACiB,GAAG,CACrB,IAAI,EACJD,OACJ,CAAC;EACL;;EAEA;AACJ;AACA;EACI,IAAI,CAACE,aAAa,GAAG,MAAMF,OAAO;EAElC,OAAOA,OAAO;AAClB;AAEO,SAASG,QAAQA,CAAA,EAA4B;EAChD,IAAI,CAAC,IAAI,CAACC,aAAa,EAAE;IACrB,OAAO,IAAI;EACf;EACA,OAAO,IAAI,CAACF,aAAa,CAAC,CAAC,CAACC,QAAQ;AACxC;AAEO,SAASE,iBAAiBA,CAAA,EAAqC;EAClE,IAAI,CAAC,IAAI,CAACD,aAAa,EAAE;IACrB,OAAOE,2BAAoB;EAC/B,CAAC,MAAM;IACH,OAAO,IAAI,CAACJ,aAAa,CAAC,CAAC,CACtBK,eAAe,CAAC,CAAC,CACjBC,IAAI,CAAC,MAAM,IAAI,CAAC;EACzB;AACJ;;AAEA;AACA;AACA;AACO,SAASC,OAAOA,CAACC,EAAc,EAAE;EACpC,IAAMC,GAAG,GAAG3B,qBAAqB,CAAC4B,GAAG,CAACF,EAAE,CAAC;EACzC,IAAIC,GAAG,EAAE;IACLA,GAAG,CAACE,GAAG,CAAC,CAAC;EACb;AACJ;AAEO,IAAMC,IAAI,GAAAC,OAAA,CAAAD,IAAA,GAAG,IAAI;AACjB,IAAME,UAAU,GAAAD,OAAA,CAAAC,UAAA,GAAG;EACtBC,UAAU,EAAGC,KAAU,IAAK;IACxBA,KAAK,CAAChB,aAAa,GAAGX,cAAc;IACpC2B,KAAK,CAACf,QAAQ,GAAGA,QAAQ;IACzBe,KAAK,CAACb,iBAAiB,GAAGA,iBAAiB;EAC/C;AACJ,CAAC;AAEM,IAAMc,wBAAkC,GAAAJ,OAAA,CAAAI,wBAAA,GAAG;EAC9CzB,IAAI,EAAE,iBAAiB;EACvBoB,IAAI;EACJE,UAAU;EACVI,KAAK,EAAE;IACHC,kBAAkB,EAAE;MAChBC,KAAK,EAAEb;IACX;EACJ;AACJ,CAAC","ignoreList":[]}