{"version":3,"file":"index.js","names":["_index","require","_index2","_index3","_index4","_rxjs","_nats","_natsHelper","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_replicationHelper","_natsTypes","RxNatsReplicationState","_RxReplicationState","replicationIdentifier","collection","pull","push","live","retryTime","autoStart","_this","_inheritsLoose2","default","RxReplicationState","replicateNats","options","waitForLeadership","primaryPath","schema","addRxPlugin","RxDBLeaderElectionPlugin","jc","JSONCodec","connectionStatePromise","nc","connect","connection","jetstreamClient","jetstream","jsm","jetstreamManager","streams","add","name","streamName","subjects","subjectPrefix","natsStream","pullStream$","Subject","replicationPrimitivesPull","handler","lastPulledCheckpoint","batchSize","cn","newCheckpoint","sequence","consumer","getConsumer","opt_start_seq","deliver_policy","DeliverPolicy","LastPerSubject","replay_policy","ReplayPolicy","Instant","fetchedMessages","fetch","max_messages","signal","close","useMessages","m","json","seq","ack","documents","checkpoint","ensureNotFalsy","modifier","stream$","asObservable","replicationPrimitivesPush","rows","conflicts","Promise","all","map","writeRow","docId","newDocumentState","remoteDocState","getNatsServerDocumentState","err","message","includes","assumedMasterState","conflictHandler","isEqual","pushDone","publish","encode","expect","lastSubjectSequence","undefined","newServerState","replicationState","error","next","newRxError","document","errorToPlainJson","awaitRetry","startBefore","start","bind","cancelBefore","cancel","lastSeq","lastDocState","getMessage","last_by_subj","newMessages","consume","docData","startReplicationOnLeaderShip"],"sources":["../../../../src/plugins/replication-nats/index.ts"],"sourcesContent":["import {\r\n    ensureNotFalsy,\r\n    errorToPlainJson\r\n} from '../../plugins/utils/index.ts';\r\n\r\n\r\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\r\nimport type {\r\n    RxCollection,\r\n    ReplicationPullOptions,\r\n    ReplicationPushOptions,\r\n    RxReplicationWriteToMasterRow,\r\n    RxReplicationPullStreamItem\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    RxReplicationState,\r\n    startReplicationOnLeaderShip\r\n} from '../replication/index.ts';\r\nimport {\r\n    addRxPlugin,\r\n    newRxError,\r\n    WithDeleted\r\n} from '../../index.ts';\r\n\r\nimport { Subject } from 'rxjs';\r\nimport type {\r\n    NatsCheckpointType,\r\n    NatsSyncOptions\r\n} from './nats-types.ts';\r\nimport { connect, DeliverPolicy, JSONCodec, ReplayPolicy } from 'nats';\r\nimport { getNatsServerDocumentState } from './nats-helper.ts';\r\nimport { awaitRetry } from '../replication/replication-helper.ts';\r\n\r\nexport * from './nats-types.ts';\r\nexport * from './nats-helper.ts';\r\n\r\n\r\nexport class RxNatsReplicationState<RxDocType> extends RxReplicationState<RxDocType, NatsCheckpointType> {\r\n    constructor(\r\n        public readonly replicationIdentifier: string,\r\n        public readonly collection: RxCollection<RxDocType>,\r\n        public readonly pull?: ReplicationPullOptions<RxDocType, NatsCheckpointType>,\r\n        public readonly push?: ReplicationPushOptions<RxDocType>,\r\n        public readonly live: boolean = true,\r\n        public retryTime: number = 1000 * 5,\r\n        public autoStart: boolean = true\r\n    ) {\r\n        super(\r\n            replicationIdentifier,\r\n            collection,\r\n            '_deleted',\r\n            pull,\r\n            push,\r\n            live,\r\n            retryTime,\r\n            autoStart\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function replicateNats<RxDocType>(\r\n    options: NatsSyncOptions<RxDocType>\r\n): RxNatsReplicationState<RxDocType> {\r\n    options.live = typeof options.live === 'undefined' ? true : options.live;\r\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\r\n\r\n    const collection: RxCollection<RxDocType> = options.collection;\r\n    const primaryPath = collection.schema.primaryPath;\r\n    addRxPlugin(RxDBLeaderElectionPlugin);\r\n\r\n    const jc = JSONCodec();\r\n\r\n\r\n    const connectionStatePromise = (async () => {\r\n        const nc = await connect(options.connection);\r\n        const jetstreamClient = nc.jetstream();\r\n        const jsm = await nc.jetstreamManager();\r\n        await jsm.streams.add({\r\n            name: options.streamName, subjects: [\r\n                options.subjectPrefix + '.*'\r\n            ]\r\n        });\r\n        const natsStream = await jetstreamClient.streams.get(options.streamName);\r\n        return {\r\n            nc,\r\n            jetstreamClient,\r\n            jsm,\r\n            natsStream\r\n        };\r\n    })();\r\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, NatsCheckpointType>> = new Subject();\r\n\r\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, NatsCheckpointType> | undefined;\r\n    if (options.pull) {\r\n        replicationPrimitivesPull = {\r\n            async handler(\r\n                lastPulledCheckpoint: NatsCheckpointType | undefined,\r\n                batchSize: number\r\n            ) {\r\n                const cn = await connectionStatePromise;\r\n                const newCheckpoint: NatsCheckpointType = {\r\n                    sequence: lastPulledCheckpoint ? lastPulledCheckpoint.sequence : 0\r\n                };\r\n                const consumer = await cn.natsStream.getConsumer({\r\n                    opt_start_seq: lastPulledCheckpoint ? lastPulledCheckpoint.sequence : 0,\r\n                    deliver_policy: DeliverPolicy.LastPerSubject,\r\n                    replay_policy: ReplayPolicy.Instant\r\n                });\r\n\r\n                const fetchedMessages = await consumer.fetch({\r\n                    max_messages: batchSize\r\n                });\r\n                await (fetchedMessages as any).signal;\r\n                await fetchedMessages.close();\r\n\r\n                const useMessages: WithDeleted<RxDocType>[] = [];\r\n                for await (const m of fetchedMessages) {\r\n                    useMessages.push(m.json());\r\n                    newCheckpoint.sequence = m.seq;\r\n                    m.ack();\r\n                }\r\n                return {\r\n                    documents: useMessages,\r\n                    checkpoint: newCheckpoint\r\n                };\r\n            },\r\n            batchSize: ensureNotFalsy(options.pull).batchSize,\r\n            modifier: ensureNotFalsy(options.pull).modifier,\r\n            stream$: pullStream$.asObservable()\r\n        };\r\n    }\r\n\r\n\r\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\r\n    if (options.push) {\r\n        replicationPrimitivesPush = {\r\n            async handler(\r\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\r\n            ) {\r\n                const cn = await connectionStatePromise;\r\n                const conflicts: WithDeleted<RxDocType>[] = [];\r\n                await Promise.all(\r\n                    rows.map(async (writeRow) => {\r\n                        const docId = (writeRow.newDocumentState as any)[primaryPath];\r\n\r\n                        /**\r\n                         * first get the current state of the documents from the server\r\n                         * so that we have the sequence number for conflict detection.\r\n                         */\r\n                        let remoteDocState;\r\n                        try {\r\n                            remoteDocState = await getNatsServerDocumentState(\r\n                                cn.natsStream,\r\n                                options.subjectPrefix,\r\n                                docId\r\n                            );\r\n                        } catch (err: Error | any) {\r\n                            if (!err.message.includes('no message found')) {\r\n                                throw err;\r\n                            }\r\n                        }\r\n\r\n                        if (\r\n                            remoteDocState &&\r\n                            (\r\n                                !writeRow.assumedMasterState ||\r\n                                collection.conflictHandler.isEqual(remoteDocState.json(), writeRow.assumedMasterState, 'replication-nats-push') === false\r\n                            )\r\n                        ) {\r\n                            // conflict\r\n                            conflicts.push(remoteDocState.json());\r\n                        } else {\r\n                            // no conflict (yet)\r\n                            let pushDone = false;\r\n                            while (!pushDone) {\r\n                                try {\r\n                                    await cn.jetstreamClient.publish(\r\n                                        options.subjectPrefix + '.' + docId,\r\n                                        jc.encode(writeRow.newDocumentState),\r\n                                        {\r\n                                            expect: remoteDocState ? {\r\n                                                streamName: options.streamName,\r\n                                                lastSubjectSequence: remoteDocState.seq\r\n                                            } : undefined\r\n                                        }\r\n                                    );\r\n                                    pushDone = true;\r\n                                } catch (err: Error | any) {\r\n                                    if (err.message.includes('wrong last sequence')) {\r\n                                        // A write happened while we are doing our write -> handle conflict\r\n                                        const newServerState = await getNatsServerDocumentState(\r\n                                            cn.natsStream,\r\n                                            options.subjectPrefix,\r\n                                            docId\r\n                                        );\r\n                                        conflicts.push(ensureNotFalsy(newServerState).json());\r\n                                        pushDone = true;\r\n                                    } else {\r\n                                        replicationState.subjects.error.next(\r\n                                            newRxError('RC_STREAM', {\r\n                                                document: writeRow.newDocumentState,\r\n                                                error: errorToPlainJson(err)\r\n                                            })\r\n                                        );\r\n\r\n                                        // -> retry after wait\r\n                                        await awaitRetry(\r\n                                            collection,\r\n                                            replicationState.retryTime\r\n                                        );\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                );\r\n                return conflicts;\r\n            },\r\n            batchSize: options.push.batchSize,\r\n            modifier: options.push.modifier\r\n        };\r\n    }\r\n\r\n\r\n    const replicationState = new RxNatsReplicationState<RxDocType>(\r\n        options.replicationIdentifier,\r\n        collection,\r\n        replicationPrimitivesPull,\r\n        replicationPrimitivesPush,\r\n        options.live,\r\n        options.retryTime,\r\n        options.autoStart\r\n    );\r\n\r\n    /**\r\n     * Use long polling to get live changes for the pull.stream$\r\n     */\r\n    if (options.live && options.pull) {\r\n        const startBefore = replicationState.start.bind(replicationState);\r\n        const cancelBefore = replicationState.cancel.bind(replicationState);\r\n        replicationState.start = async () => {\r\n            const cn = await connectionStatePromise;\r\n\r\n            /**\r\n             * First get the last sequence so that we can\r\n             * laster only fetch 'newer' messages.\r\n             */\r\n            let lastSeq = 0;\r\n            try {\r\n                const lastDocState = await cn.natsStream.getMessage({\r\n                    last_by_subj: options.subjectPrefix + '.*'\r\n                });\r\n                lastSeq = lastDocState.seq;\r\n            } catch (err: any | Error) {\r\n                if (!err.message.includes('no message found')) {\r\n                    throw err;\r\n                }\r\n            }\r\n\r\n            const consumer = await cn.natsStream.getConsumer({\r\n                opt_start_seq: lastSeq\r\n            });\r\n            const newMessages = await consumer.consume();\r\n            (async () => {\r\n                for await (const m of newMessages) {\r\n                    const docData: WithDeleted<RxDocType> = m.json();\r\n                    pullStream$.next({\r\n                        documents: [docData],\r\n                        checkpoint: {\r\n                            sequence: m.seq\r\n                        }\r\n                    });\r\n                    m.ack();\r\n                }\r\n            })();\r\n            replicationState.cancel = () => {\r\n                newMessages.close();\r\n                return cancelBefore();\r\n            };\r\n            return startBefore();\r\n        };\r\n    }\r\n\r\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\r\n\r\n    return replicationState;\r\n}\r\n"],"mappings":"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","ignoreList":[]}