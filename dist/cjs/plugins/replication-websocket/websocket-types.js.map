{"version":3,"file":"websocket-types.js","names":[],"sources":["../../../../src/plugins/replication-websocket/websocket-types.ts"],"sourcesContent":["import type {\r\n    Observable,\r\n} from 'rxjs';\r\nimport type {\r\n    ServerOptions,\r\n    ClientOptions,\r\n    WebSocketServer,\r\n    WebSocket\r\n} from 'ws';\r\nimport type {\r\n    RxCollection,\r\n    RxDatabase,\r\n    RxReplicationHandler,\r\n    StringKeys\r\n} from '../../types/index.d.ts';\r\n\r\nexport type WebsocketServerOptions = {\r\n    database: RxDatabase<any, any, any>;\r\n} & ServerOptions;\r\n\r\nexport type WebsocketServerState = {\r\n    server: WebSocketServer;\r\n    close: () => Promise<void>;\r\n    onConnection$: Observable<WebSocket>;\r\n};\r\n\r\nexport type WebsocketClientOptions<RxDocType> = {\r\n    replicationIdentifier: string;\r\n    collection: RxCollection<RxDocType>;\r\n    url: string;\r\n    batchSize?: number;\r\n    live?: boolean;\r\n    headers?: { [k: string]: string; };\r\n} & ClientOptions;\r\n\r\nexport type WebsocketMessageType = {\r\n    id: string;\r\n    collection: string;\r\n    method: StringKeys<RxReplicationHandler<any, any>> | 'auth';\r\n    params: any[];\r\n};\r\n\r\nexport type WebsocketMessageResponseType = {\r\n    id: string;\r\n    collection: string;\r\n    result: any;\r\n};\r\n"],"mappings":"","ignoreList":[]}