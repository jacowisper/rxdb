{"version":3,"file":"websocket-client.js","names":["_index","require","_reconnectingWebsocket","_interopRequireDefault","_isomorphicWs","_index2","_rxjs","_rxError","ensureIsWebsocket","w","is","CLOSING","console","dir","Error","createWebSocketClient","options","IsomorphicWebSocket","wsClient","ReconnectingWebSocket","url","WebSocket","connected$","BehaviorSubject","message$","Subject","error$","onerror","err","log","error","message","emitError","newRxError","errors","toArray","map","er","errorToPlainJson","direction","next","Promise","res","onopen","headers","authMessage","collection","name","id","randomToken","params","method","send","JSON","stringify","onclose","onmessage","messageObj","parse","data","socket","replicateWithWebsocketServer","websocketClient","messages$","requestCounter","requestFlag","getRequestId","count","database","token","replicationState","replicateRxCollection","replicationIdentifier","live","pull","batchSize","stream$","pipe","filter","msg","result","handler","lastPulledCheckpoint","requestId","request","firstValueFrom","push","docs","subscribe","subjects","isConnected","reSync","streamRequest","onClose","close"],"sources":["../../../../src/plugins/replication-websocket/websocket-client.ts"],"sourcesContent":["import {\r\n    replicateRxCollection,\r\n    RxReplicationState\r\n} from '../replication/index.ts';\r\nimport {\r\n    WebsocketClientOptions,\r\n    WebsocketMessageType\r\n} from './websocket-types.ts';\r\n\r\nimport ReconnectingWebSocket from 'reconnecting-websocket';\r\n\r\nimport IsomorphicWebSocket from 'isomorphic-ws';\r\nimport {\r\n    errorToPlainJson,\r\n    randomToken,\r\n    toArray\r\n} from '../../plugins/utils/index.ts';\r\nimport {\r\n    filter,\r\n    map,\r\n    Subject,\r\n    firstValueFrom,\r\n    BehaviorSubject\r\n} from 'rxjs';\r\nimport type {\r\n    RxError,\r\n    RxReplicationWriteToMasterRow\r\n} from '../../types/index.d.ts';\r\nimport { newRxError } from '../../rx-error.ts';\r\n\r\nexport type WebsocketClient = {\r\n    url: string;\r\n    socket: any;\r\n    connected$: BehaviorSubject<boolean>;\r\n    message$: Subject<any>;\r\n    error$: Subject<RxError>;\r\n};\r\n\r\n\r\n/**\r\n * Copied and adapted from the 'reconnecting-websocket' npm module.\r\n * Some bundlers have problems with bundling the isomorphic-ws plugin\r\n * so we directly check the correctness in RxDB to ensure that we can\r\n * throw a helpful error.\r\n */\r\nexport function ensureIsWebsocket(w: typeof IsomorphicWebSocket) {\r\n    const is = typeof w !== 'undefined' && !!w && w.CLOSING === 2;\r\n    if (!is) {\r\n        console.dir(w);\r\n        throw new Error('websocket not valid');\r\n    }\r\n}\r\n\r\n\r\nexport async function createWebSocketClient<RxDocType>(options: WebsocketClientOptions<RxDocType>): Promise<WebsocketClient> {\r\n    ensureIsWebsocket(IsomorphicWebSocket);\r\n    const wsClient = new ReconnectingWebSocket(\r\n        options.url,\r\n        [],\r\n        {\r\n            WebSocket: IsomorphicWebSocket\r\n        }\r\n    );\r\n    const connected$ = new BehaviorSubject<boolean>(false);\r\n    const message$ = new Subject<any>();\r\n    const error$ = new Subject<any>();\r\n    wsClient.onerror = (err) => {\r\n\r\n        console.log('--- WAS CLIENT GOT ERROR:');\r\n        console.log(err.error.message);\r\n\r\n        const emitError = newRxError('RC_STREAM', {\r\n            errors: toArray(err).map((er: any) => errorToPlainJson(er)),\r\n            direction: 'pull'\r\n        });\r\n        error$.next(emitError);\r\n    };\r\n    await new Promise<void>(res => {\r\n        wsClient.onopen = () => {\r\n\r\n            if (options.headers) {\r\n                const authMessage: WebsocketMessageType = {\r\n                    collection: options.collection.name,\r\n                    id: randomToken(10),\r\n                    params: [options.headers],\r\n                    method: 'auth'\r\n                };\r\n                wsClient.send(JSON.stringify(authMessage));\r\n            }\r\n\r\n            connected$.next(true);\r\n            res();\r\n        };\r\n    });\r\n    wsClient.onclose = () => {\r\n        connected$.next(false);\r\n    };\r\n\r\n    wsClient.onmessage = (messageObj) => {\r\n        const message = JSON.parse(messageObj.data);\r\n        message$.next(message);\r\n    };\r\n\r\n    return {\r\n        url: options.url,\r\n        socket: wsClient,\r\n        connected$,\r\n        message$,\r\n        error$\r\n    };\r\n\r\n}\r\n\r\nexport async function replicateWithWebsocketServer<RxDocType, CheckpointType>(\r\n    options: WebsocketClientOptions<RxDocType>\r\n): Promise<RxReplicationState<RxDocType, CheckpointType>> {\r\n    const websocketClient = await createWebSocketClient(options);\r\n    const wsClient = websocketClient.socket;\r\n    const messages$ = websocketClient.message$;\r\n\r\n    let requestCounter = 0;\r\n    const requestFlag = randomToken(10);\r\n    function getRequestId() {\r\n        const count = requestCounter++;\r\n        return options.collection.database.token + '|' + requestFlag + '|' + count;\r\n    }\r\n    const replicationState = replicateRxCollection<RxDocType, CheckpointType>({\r\n        collection: options.collection,\r\n        replicationIdentifier: options.replicationIdentifier,\r\n        live: options.live,\r\n        pull: {\r\n            batchSize: options.batchSize,\r\n            stream$: messages$.pipe(\r\n                filter(msg => msg.id === 'stream' && msg.collection === options.collection.name),\r\n                map(msg => msg.result)\r\n            ),\r\n            async handler(lastPulledCheckpoint: CheckpointType | undefined, batchSize: number) {\r\n                const requestId = getRequestId();\r\n                const request: WebsocketMessageType = {\r\n                    id: requestId,\r\n                    collection: options.collection.name,\r\n                    method: 'masterChangesSince',\r\n                    params: [lastPulledCheckpoint, batchSize]\r\n                };\r\n                wsClient.send(JSON.stringify(request));\r\n                const result = await firstValueFrom(\r\n                    messages$.pipe(\r\n                        filter(msg => msg.id === requestId),\r\n                        map(msg => msg.result)\r\n                    )\r\n                );\r\n                return result;\r\n            }\r\n        },\r\n        push: {\r\n            batchSize: options.batchSize,\r\n            handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\r\n                const requestId = getRequestId();\r\n                const request: WebsocketMessageType = {\r\n                    id: requestId,\r\n                    collection: options.collection.name,\r\n                    method: 'masterWrite',\r\n                    params: [docs]\r\n                };\r\n                wsClient.send(JSON.stringify(request));\r\n                return firstValueFrom(\r\n                    messages$.pipe(\r\n                        filter(msg => msg.id === requestId),\r\n                        map(msg => msg.result)\r\n                    )\r\n                );\r\n            }\r\n        }\r\n    });\r\n\r\n    websocketClient.error$.subscribe(err => replicationState.subjects.error.next(err));\r\n\r\n    websocketClient.connected$.subscribe(isConnected => {\r\n        if (isConnected) {\r\n            /**\r\n             * When the client goes offline and online again,\r\n             * we have to send a 'RESYNC' signal because the client\r\n             * might have missed out events while being offline.\r\n             */\r\n            replicationState.reSync();\r\n\r\n            /**\r\n             * Because reconnecting creates a new websocket-instance,\r\n             * we have to start the changestream from the remote again\r\n             * each time.\r\n             */\r\n            const streamRequest: WebsocketMessageType = {\r\n                id: 'stream',\r\n                collection: options.collection.name,\r\n                method: 'masterChangeStream$',\r\n                params: []\r\n            };\r\n            wsClient.send(JSON.stringify(streamRequest));\r\n        }\r\n    });\r\n\r\n    options.collection.onClose.push(() => websocketClient.socket.close());\r\n    return replicationState;\r\n}\r\n"],"mappings":";;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AASA,IAAAC,sBAAA,GAAAC,sBAAA,CAAAF,OAAA;AAEA,IAAAG,aAAA,GAAAD,sBAAA,CAAAF,OAAA;AACA,IAAAI,OAAA,GAAAJ,OAAA;AAKA,IAAAK,KAAA,GAAAL,OAAA;AAWA,IAAAM,QAAA,GAAAN,OAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACO,SAASO,iBAAiBA,CAACC,CAA6B,EAAE;EAC7D,IAAMC,EAAE,GAAG,OAAOD,CAAC,KAAK,WAAW,IAAI,CAAC,CAACA,CAAC,IAAIA,CAAC,CAACE,OAAO,KAAK,CAAC;EAC7D,IAAI,CAACD,EAAE,EAAE;IACLE,OAAO,CAACC,GAAG,CAACJ,CAAC,CAAC;IACd,MAAM,IAAIK,KAAK,CAAC,qBAAqB,CAAC;EAC1C;AACJ;AAGO,eAAeC,qBAAqBA,CAAYC,OAA0C,EAA4B;EACzHR,iBAAiB,CAACS,qBAAmB,CAAC;EACtC,IAAMC,QAAQ,GAAG,IAAIC,8BAAqB,CACtCH,OAAO,CAACI,GAAG,EACX,EAAE,EACF;IACIC,SAAS,EAAEJ;EACf,CACJ,CAAC;EACD,IAAMK,UAAU,GAAG,IAAIC,qBAAe,CAAU,KAAK,CAAC;EACtD,IAAMC,QAAQ,GAAG,IAAIC,aAAO,CAAM,CAAC;EACnC,IAAMC,MAAM,GAAG,IAAID,aAAO,CAAM,CAAC;EACjCP,QAAQ,CAACS,OAAO,GAAIC,GAAG,IAAK;IAExBhB,OAAO,CAACiB,GAAG,CAAC,2BAA2B,CAAC;IACxCjB,OAAO,CAACiB,GAAG,CAACD,GAAG,CAACE,KAAK,CAACC,OAAO,CAAC;IAE9B,IAAMC,SAAS,GAAG,IAAAC,mBAAU,EAAC,WAAW,EAAE;MACtCC,MAAM,EAAE,IAAAC,eAAO,EAACP,GAAG,CAAC,CAACQ,GAAG,CAAEC,EAAO,IAAK,IAAAC,wBAAgB,EAACD,EAAE,CAAC,CAAC;MAC3DE,SAAS,EAAE;IACf,CAAC,CAAC;IACFb,MAAM,CAACc,IAAI,CAACR,SAAS,CAAC;EAC1B,CAAC;EACD,MAAM,IAAIS,OAAO,CAAOC,GAAG,IAAI;IAC3BxB,QAAQ,CAACyB,MAAM,GAAG,MAAM;MAEpB,IAAI3B,OAAO,CAAC4B,OAAO,EAAE;QACjB,IAAMC,WAAiC,GAAG;UACtCC,UAAU,EAAE9B,OAAO,CAAC8B,UAAU,CAACC,IAAI;UACnCC,EAAE,EAAE,IAAAC,mBAAW,EAAC,EAAE,CAAC;UACnBC,MAAM,EAAE,CAAClC,OAAO,CAAC4B,OAAO,CAAC;UACzBO,MAAM,EAAE;QACZ,CAAC;QACDjC,QAAQ,CAACkC,IAAI,CAACC,IAAI,CAACC,SAAS,CAACT,WAAW,CAAC,CAAC;MAC9C;MAEAvB,UAAU,CAACkB,IAAI,CAAC,IAAI,CAAC;MACrBE,GAAG,CAAC,CAAC;IACT,CAAC;EACL,CAAC,CAAC;EACFxB,QAAQ,CAACqC,OAAO,GAAG,MAAM;IACrBjC,UAAU,CAACkB,IAAI,CAAC,KAAK,CAAC;EAC1B,CAAC;EAEDtB,QAAQ,CAACsC,SAAS,GAAIC,UAAU,IAAK;IACjC,IAAM1B,OAAO,GAAGsB,IAAI,CAACK,KAAK,CAACD,UAAU,CAACE,IAAI,CAAC;IAC3CnC,QAAQ,CAACgB,IAAI,CAACT,OAAO,CAAC;EAC1B,CAAC;EAED,OAAO;IACHX,GAAG,EAAEJ,OAAO,CAACI,GAAG;IAChBwC,MAAM,EAAE1C,QAAQ;IAChBI,UAAU;IACVE,QAAQ;IACRE;EACJ,CAAC;AAEL;AAEO,eAAemC,4BAA4BA,CAC9C7C,OAA0C,EACY;EACtD,IAAM8C,eAAe,GAAG,MAAM/C,qBAAqB,CAACC,OAAO,CAAC;EAC5D,IAAME,QAAQ,GAAG4C,eAAe,CAACF,MAAM;EACvC,IAAMG,SAAS,GAAGD,eAAe,CAACtC,QAAQ;EAE1C,IAAIwC,cAAc,GAAG,CAAC;EACtB,IAAMC,WAAW,GAAG,IAAAhB,mBAAW,EAAC,EAAE,CAAC;EACnC,SAASiB,YAAYA,CAAA,EAAG;IACpB,IAAMC,KAAK,GAAGH,cAAc,EAAE;IAC9B,OAAOhD,OAAO,CAAC8B,UAAU,CAACsB,QAAQ,CAACC,KAAK,GAAG,GAAG,GAAGJ,WAAW,GAAG,GAAG,GAAGE,KAAK;EAC9E;EACA,IAAMG,gBAAgB,GAAG,IAAAC,4BAAqB,EAA4B;IACtEzB,UAAU,EAAE9B,OAAO,CAAC8B,UAAU;IAC9B0B,qBAAqB,EAAExD,OAAO,CAACwD,qBAAqB;IACpDC,IAAI,EAAEzD,OAAO,CAACyD,IAAI;IAClBC,IAAI,EAAE;MACFC,SAAS,EAAE3D,OAAO,CAAC2D,SAAS;MAC5BC,OAAO,EAAEb,SAAS,CAACc,IAAI,CACnB,IAAAC,YAAM,EAACC,GAAG,IAAIA,GAAG,CAAC/B,EAAE,KAAK,QAAQ,IAAI+B,GAAG,CAACjC,UAAU,KAAK9B,OAAO,CAAC8B,UAAU,CAACC,IAAI,CAAC,EAChF,IAAAX,SAAG,EAAC2C,GAAG,IAAIA,GAAG,CAACC,MAAM,CACzB,CAAC;MACD,MAAMC,OAAOA,CAACC,oBAAgD,EAAEP,SAAiB,EAAE;QAC/E,IAAMQ,SAAS,GAAGjB,YAAY,CAAC,CAAC;QAChC,IAAMkB,OAA6B,GAAG;UAClCpC,EAAE,EAAEmC,SAAS;UACbrC,UAAU,EAAE9B,OAAO,CAAC8B,UAAU,CAACC,IAAI;UACnCI,MAAM,EAAE,oBAAoB;UAC5BD,MAAM,EAAE,CAACgC,oBAAoB,EAAEP,SAAS;QAC5C,CAAC;QACDzD,QAAQ,CAACkC,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC8B,OAAO,CAAC,CAAC;QACtC,IAAMJ,MAAM,GAAG,MAAM,IAAAK,oBAAc,EAC/BtB,SAAS,CAACc,IAAI,CACV,IAAAC,YAAM,EAACC,GAAG,IAAIA,GAAG,CAAC/B,EAAE,KAAKmC,SAAS,CAAC,EACnC,IAAA/C,SAAG,EAAC2C,GAAG,IAAIA,GAAG,CAACC,MAAM,CACzB,CACJ,CAAC;QACD,OAAOA,MAAM;MACjB;IACJ,CAAC;IACDM,IAAI,EAAE;MACFX,SAAS,EAAE3D,OAAO,CAAC2D,SAAS;MAC5BM,OAAOA,CAACM,IAAgD,EAAE;QACtD,IAAMJ,SAAS,GAAGjB,YAAY,CAAC,CAAC;QAChC,IAAMkB,OAA6B,GAAG;UAClCpC,EAAE,EAAEmC,SAAS;UACbrC,UAAU,EAAE9B,OAAO,CAAC8B,UAAU,CAACC,IAAI;UACnCI,MAAM,EAAE,aAAa;UACrBD,MAAM,EAAE,CAACqC,IAAI;QACjB,CAAC;QACDrE,QAAQ,CAACkC,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC8B,OAAO,CAAC,CAAC;QACtC,OAAO,IAAAC,oBAAc,EACjBtB,SAAS,CAACc,IAAI,CACV,IAAAC,YAAM,EAACC,GAAG,IAAIA,GAAG,CAAC/B,EAAE,KAAKmC,SAAS,CAAC,EACnC,IAAA/C,SAAG,EAAC2C,GAAG,IAAIA,GAAG,CAACC,MAAM,CACzB,CACJ,CAAC;MACL;IACJ;EACJ,CAAC,CAAC;EAEFlB,eAAe,CAACpC,MAAM,CAAC8D,SAAS,CAAC5D,GAAG,IAAI0C,gBAAgB,CAACmB,QAAQ,CAAC3D,KAAK,CAACU,IAAI,CAACZ,GAAG,CAAC,CAAC;EAElFkC,eAAe,CAACxC,UAAU,CAACkE,SAAS,CAACE,WAAW,IAAI;IAChD,IAAIA,WAAW,EAAE;MACb;AACZ;AACA;AACA;AACA;MACYpB,gBAAgB,CAACqB,MAAM,CAAC,CAAC;;MAEzB;AACZ;AACA;AACA;AACA;MACY,IAAMC,aAAmC,GAAG;QACxC5C,EAAE,EAAE,QAAQ;QACZF,UAAU,EAAE9B,OAAO,CAAC8B,UAAU,CAACC,IAAI;QACnCI,MAAM,EAAE,qBAAqB;QAC7BD,MAAM,EAAE;MACZ,CAAC;MACDhC,QAAQ,CAACkC,IAAI,CAACC,IAAI,CAACC,SAAS,CAACsC,aAAa,CAAC,CAAC;IAChD;EACJ,CAAC,CAAC;EAEF5E,OAAO,CAAC8B,UAAU,CAAC+C,OAAO,CAACP,IAAI,CAAC,MAAMxB,eAAe,CAACF,MAAM,CAACkC,KAAK,CAAC,CAAC,CAAC;EACrE,OAAOxB,gBAAgB;AAC3B","ignoreList":[]}