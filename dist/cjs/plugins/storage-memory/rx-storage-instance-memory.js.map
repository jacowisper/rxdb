{"version":3,"file":"rx-storage-instance-memory.js","names":["_rxjs","require","_customIndex","_rxSchemaHelper","_rxStorageHelper","_index","_binarySearchBounds","_memoryHelper","_memoryIndexes","_rxQueryHelper","OPEN_MEMORY_INSTANCES","exports","Set","RxStorageInstanceMemory","storage","databaseName","collectionName","schema","internals","options","settings","devMode","closed","categorizedByWriteInput","WeakMap","add","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","_proto","prototype","bulkWrite","documentWrites","context","ensurePersistence","ensureNotRemoved","documentsById","documents","categorized","categorizeBulkWriteRows","error","errors","awaitMe","Promise","resolve","set","ensurePersistenceTask","ensurePersistenceIdlePromise","requestIdlePromiseNoQueue","then","undefined","eventBulk","events","length","lastState","ensureNotFalsy","newestRow","document","checkpoint","id","lwt","_meta","changes$","next","stateByIndex","Object","values","byIndex","bulkInsertDocs","i","writeRow","doc","docId","putWriteRowToState","bulkUpdateDocs","get","attachments","attachmentsMap","attachmentsAdd","forEach","attachment","attachmentMapKey","documentId","attachmentId","writeData","attachmentData","digest","attachmentsUpdate","attachmentsRemove","delete","findDocumentsById","docIds","withDeleted","ret","size","docInDb","_deleted","push","query","preparedQuery","queryPlan","skip","limit","Infinity","skipPlusLimit","queryMatcher","selectorSatisfiedByIndex","getQueryMatcher","queryPlanFields","index","mustManuallyResort","sortSatisfiedByIndex","lowerBound","startKeys","lowerBoundString","getStartIndexStringFromLowerBound","upperBound","endKeys","upperBoundString","getStartIndexStringFromUpperBound","indexName","getMemoryIndexName","Error","docsWithIndex","indexOfLower","inclusiveStart","boundGE","boundGT","compareDocsWithIndex","indexOfUpper","inclusiveEnd","boundLE","boundLT","rows","done","currentRow","currentDoc","sortComparator","getSortComparator","sort","slice","count","result","mode","cleanup","minimumDeletedTime","maxDeletionTime","now","removeDocFromState","PROMISE_RESOLVE_TRUE","getAttachmentData","key","data","changeStream","asObservable","remove","removed","collectionStates","getMemoryCollectionKey","version","close","PROMISE_RESOLVE_VOID","refCount","createMemoryStorageInstance","params","collectionKey","randomToken","Map","Subject","addIndexesToInternalsState","deepEqual","instance"],"sources":["../../../../src/plugins/storage-memory/rx-storage-instance-memory.ts"],"sourcesContent":["import {\r\n    Observable,\r\n    Subject\r\n} from 'rxjs';\r\nimport {\r\n    getStartIndexStringFromLowerBound,\r\n    getStartIndexStringFromUpperBound\r\n} from '../../custom-index.ts';\r\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\r\nimport {\r\n    categorizeBulkWriteRows\r\n} from '../../rx-storage-helper.ts';\r\nimport type {\r\n    BulkWriteRow,\r\n    CategorizeBulkWriteRowsOutput,\r\n    EventBulk,\r\n    PreparedQuery,\r\n    QueryMatcher,\r\n    RxDocumentData,\r\n    RxJsonSchema,\r\n    RxStorageBulkWriteResponse,\r\n    RxStorageChangeEvent,\r\n    RxStorageCountResult,\r\n    RxStorageDefaultCheckpoint,\r\n    RxStorageInstance,\r\n    RxStorageInstanceCreationParams,\r\n    RxStorageQueryResult,\r\n    StringKeys\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    deepEqual,\r\n    ensureNotFalsy,\r\n    now,\r\n    PROMISE_RESOLVE_TRUE,\r\n    PROMISE_RESOLVE_VOID,\r\n    randomToken,\r\n    requestIdlePromiseNoQueue\r\n} from '../../plugins/utils/index.ts';\r\nimport {\r\n    boundGE,\r\n    boundGT,\r\n    boundLE,\r\n    boundLT\r\n} from './binary-search-bounds.ts';\r\nimport {\r\n    attachmentMapKey,\r\n    compareDocsWithIndex,\r\n    ensureNotRemoved,\r\n    getMemoryCollectionKey,\r\n    putWriteRowToState,\r\n    removeDocFromState\r\n} from './memory-helper.ts';\r\nimport {\r\n    addIndexesToInternalsState,\r\n    getMemoryIndexName\r\n} from './memory-indexes.ts';\r\nimport type {\r\n    MemoryStorageInternals,\r\n    RxStorageMemory,\r\n    RxStorageMemoryInstanceCreationOptions,\r\n    RxStorageMemorySettings\r\n} from './memory-types.ts';\r\nimport { getQueryMatcher, getSortComparator } from '../../rx-query-helper.ts';\r\n\r\n/**\r\n * Used in tests to ensure everything\r\n * is closed correctly\r\n */\r\nexport const OPEN_MEMORY_INSTANCES = new Set<RxStorageInstanceMemory<any>>();\r\n\r\nexport class RxStorageInstanceMemory<RxDocType> implements RxStorageInstance<\r\n    RxDocType,\r\n    MemoryStorageInternals<RxDocType>,\r\n    RxStorageMemoryInstanceCreationOptions,\r\n    RxStorageDefaultCheckpoint\r\n> {\r\n\r\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\r\n    public closed = false;\r\n\r\n    /**\r\n     * Used by some plugins and storage wrappers\r\n     * to find out details about the internals of a write operation.\r\n     * For example if you want to know which documents really have been replaced\r\n     * or newly inserted.\r\n     */\r\n    public categorizedByWriteInput = new WeakMap<BulkWriteRow<RxDocType>[], CategorizeBulkWriteRowsOutput<RxDocType>>();\r\n\r\n    constructor(\r\n        public readonly storage: RxStorageMemory,\r\n        public readonly databaseName: string,\r\n        public readonly collectionName: string,\r\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\r\n        public readonly internals: MemoryStorageInternals<RxDocType>,\r\n        public readonly options: Readonly<RxStorageMemoryInstanceCreationOptions>,\r\n        public readonly settings: RxStorageMemorySettings,\r\n        public readonly devMode: boolean\r\n    ) {\r\n        OPEN_MEMORY_INSTANCES.add(this);\r\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\r\n    }\r\n\r\n    bulkWrite(\r\n        documentWrites: BulkWriteRow<RxDocType>[],\r\n        context: string\r\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\r\n        this.ensurePersistence();\r\n        ensureNotRemoved(this);\r\n        const internals = this.internals;\r\n        const documentsById = this.internals.documents;\r\n        const primaryPath = this.primaryPath;\r\n\r\n\r\n        const categorized = categorizeBulkWriteRows<RxDocType>(\r\n            this,\r\n            primaryPath as any,\r\n            documentsById,\r\n            documentWrites,\r\n            context\r\n        );\r\n        const error = categorized.errors;\r\n        /**\r\n         * @performance\r\n         * We have to return a Promise but we do not want to wait\r\n         * one tick, so we directly create the promise\r\n         * which makes it likely to be already resolved later.\r\n         */\r\n        const awaitMe = Promise.resolve({ error });\r\n\r\n        this.categorizedByWriteInput.set(documentWrites, categorized);\r\n        this.internals.ensurePersistenceTask = categorized;\r\n\r\n        if (!this.internals.ensurePersistenceIdlePromise) {\r\n            this.internals.ensurePersistenceIdlePromise = requestIdlePromiseNoQueue().then(() => {\r\n                this.internals.ensurePersistenceIdlePromise = undefined;\r\n                this.ensurePersistence();\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Important: The events must be emitted AFTER the persistence\r\n         * task has been added.\r\n         */\r\n        if (categorized.eventBulk.events.length > 0) {\r\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\r\n            categorized.eventBulk.checkpoint = {\r\n                id: lastState[primaryPath],\r\n                lwt: lastState._meta.lwt\r\n            };\r\n            internals.changes$.next(categorized.eventBulk);\r\n        }\r\n        return awaitMe;\r\n    }\r\n\r\n    /**\r\n     * Instead of directly inserting the documents into all indexes,\r\n     * we do it lazy in the background. This gives the application time\r\n     * to directly work with the write-result and to do stuff like rendering DOM\r\n     * notes and processing RxDB queries.\r\n     * Then in some later time, or just before the next read/write,\r\n     * it is ensured that the indexes have been written.\r\n     */\r\n    public ensurePersistence() {\r\n        if (\r\n            !this.internals.ensurePersistenceTask\r\n        ) {\r\n            return;\r\n        }\r\n        const internals = this.internals;\r\n        const documentsById = this.internals.documents;\r\n        const primaryPath = this.primaryPath;\r\n\r\n        const categorized = this.internals.ensurePersistenceTask;\r\n        this.internals.ensurePersistenceTask = undefined;\r\n\r\n        /**\r\n         * Do inserts/updates\r\n         */\r\n        const stateByIndex = Object.values(this.internals.byIndex);\r\n\r\n        const bulkInsertDocs = categorized.bulkInsertDocs;\r\n        for (let i = 0; i < bulkInsertDocs.length; ++i) {\r\n            const writeRow = bulkInsertDocs[i];\r\n            const doc = writeRow.document;\r\n            const docId = doc[primaryPath];\r\n            putWriteRowToState(\r\n                docId as any,\r\n                internals,\r\n                stateByIndex,\r\n                doc,\r\n                undefined\r\n            );\r\n        }\r\n\r\n        const bulkUpdateDocs = categorized.bulkUpdateDocs;\r\n        for (let i = 0; i < bulkUpdateDocs.length; ++i) {\r\n            const writeRow = bulkUpdateDocs[i];\r\n            const doc = writeRow.document;\r\n            const docId = doc[primaryPath];\r\n            putWriteRowToState(\r\n                docId as any,\r\n                internals,\r\n                stateByIndex,\r\n                doc,\r\n                documentsById.get(docId as any)\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Handle attachments\r\n         */\r\n        if (this.schema.attachments) {\r\n            const attachmentsMap = internals.attachments;\r\n            categorized.attachmentsAdd.forEach(attachment => {\r\n                attachmentsMap.set(\r\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId),\r\n                    {\r\n                        writeData: attachment.attachmentData,\r\n                        digest: attachment.digest\r\n                    }\r\n                );\r\n            });\r\n            if (this.schema.attachments) {\r\n                categorized.attachmentsUpdate.forEach(attachment => {\r\n                    attachmentsMap.set(\r\n                        attachmentMapKey(attachment.documentId, attachment.attachmentId),\r\n                        {\r\n                            writeData: attachment.attachmentData,\r\n                            digest: attachment.digest\r\n                        }\r\n                    );\r\n                });\r\n                categorized.attachmentsRemove.forEach(attachment => {\r\n                    attachmentsMap.delete(\r\n                        attachmentMapKey(attachment.documentId, attachment.attachmentId)\r\n                    );\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    findDocumentsById(\r\n        docIds: string[],\r\n        withDeleted: boolean\r\n    ): Promise<RxDocumentData<RxDocType>[]> {\r\n        this.ensurePersistence();\r\n        const documentsById = this.internals.documents;\r\n        const ret: RxDocumentData<RxDocType>[] = [];\r\n        if (documentsById.size === 0) {\r\n            return Promise.resolve(ret);\r\n        }\r\n        for (let i = 0; i < docIds.length; ++i) {\r\n            const docId = docIds[i];\r\n            const docInDb = documentsById.get(docId);\r\n            if (\r\n                docInDb &&\r\n                (\r\n                    !docInDb._deleted ||\r\n                    withDeleted\r\n                )\r\n            ) {\r\n                ret.push(docInDb);\r\n            }\r\n        }\r\n        return Promise.resolve(ret);\r\n    }\r\n\r\n    query(\r\n        preparedQuery: PreparedQuery<RxDocType>\r\n    ): Promise<RxStorageQueryResult<RxDocType>> {\r\n        this.ensurePersistence();\r\n\r\n        const queryPlan = preparedQuery.queryPlan;\r\n        const query = preparedQuery.query;\r\n\r\n        const skip = query.skip ? query.skip : 0;\r\n        const limit = query.limit ? query.limit : Infinity;\r\n        const skipPlusLimit = skip + limit;\r\n\r\n        let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\r\n        if (!queryPlan.selectorSatisfiedByIndex) {\r\n            queryMatcher = getQueryMatcher(\r\n                this.schema,\r\n                preparedQuery.query\r\n            );\r\n        }\r\n\r\n        const queryPlanFields: string[] = queryPlan.index;\r\n        const mustManuallyResort = !queryPlan.sortSatisfiedByIndex;\r\n        const index: string[] | undefined = queryPlanFields;\r\n        const lowerBound: any[] = queryPlan.startKeys;\r\n        const lowerBoundString = getStartIndexStringFromLowerBound(\r\n            this.schema,\r\n            index,\r\n            lowerBound\r\n        );\r\n\r\n        let upperBound: any[] = queryPlan.endKeys;\r\n        upperBound = upperBound;\r\n        const upperBoundString = getStartIndexStringFromUpperBound(\r\n            this.schema,\r\n            index,\r\n            upperBound\r\n        );\r\n        const indexName = getMemoryIndexName(index);\r\n\r\n        if (!this.internals.byIndex[indexName]) {\r\n            throw new Error('index does not exist ' + indexName);\r\n        }\r\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\r\n\r\n\r\n\r\n        let indexOfLower = (queryPlan.inclusiveStart ? boundGE : boundGT)(\r\n            docsWithIndex,\r\n            [\r\n                lowerBoundString\r\n            ] as any,\r\n            compareDocsWithIndex\r\n        );\r\n\r\n        const indexOfUpper = (queryPlan.inclusiveEnd ? boundLE : boundLT)(\r\n            docsWithIndex,\r\n            [\r\n                upperBoundString\r\n            ] as any,\r\n            compareDocsWithIndex\r\n        );\r\n\r\n        let rows: RxDocumentData<RxDocType>[] = [];\r\n        let done = false;\r\n        while (!done) {\r\n            const currentRow = docsWithIndex[indexOfLower];\r\n            if (\r\n                !currentRow ||\r\n                indexOfLower > indexOfUpper\r\n            ) {\r\n                break;\r\n            }\r\n            const currentDoc = currentRow[1];\r\n\r\n            if (!queryMatcher || queryMatcher(currentDoc)) {\r\n                rows.push(currentDoc);\r\n            }\r\n\r\n            if (\r\n                (rows.length >= skipPlusLimit && !mustManuallyResort)\r\n            ) {\r\n                done = true;\r\n            }\r\n\r\n            indexOfLower++;\r\n        }\r\n\r\n        if (mustManuallyResort) {\r\n            const sortComparator = getSortComparator(this.schema, preparedQuery.query);\r\n            rows = rows.sort(sortComparator);\r\n        }\r\n\r\n        // apply skip and limit boundaries.\r\n        rows = rows.slice(skip, skipPlusLimit);\r\n        return Promise.resolve({\r\n            documents: rows\r\n        });\r\n    }\r\n\r\n    async count(\r\n        preparedQuery: PreparedQuery<RxDocType>\r\n    ): Promise<RxStorageCountResult> {\r\n        this.ensurePersistence();\r\n        const result = await this.query(preparedQuery);\r\n        return {\r\n            count: result.documents.length,\r\n            mode: 'fast'\r\n        };\r\n    }\r\n\r\n    cleanup(minimumDeletedTime: number): Promise<boolean> {\r\n        this.ensurePersistence();\r\n        const maxDeletionTime = now() - minimumDeletedTime;\r\n        const index = ['_deleted', '_meta.lwt', this.primaryPath as any];\r\n        const indexName = getMemoryIndexName(index);\r\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\r\n\r\n        const lowerBoundString = getStartIndexStringFromLowerBound(\r\n            this.schema,\r\n            index,\r\n            [\r\n                true,\r\n                0,\r\n                ''\r\n            ]\r\n        );\r\n\r\n        let indexOfLower = boundGT(\r\n            docsWithIndex,\r\n            [\r\n                lowerBoundString\r\n            ] as any,\r\n            compareDocsWithIndex\r\n        );\r\n\r\n        let done = false;\r\n        while (!done) {\r\n            const currentDoc = docsWithIndex[indexOfLower];\r\n            if (!currentDoc || currentDoc[1]._meta.lwt > maxDeletionTime) {\r\n                done = true;\r\n            } else {\r\n                removeDocFromState(\r\n                    this.primaryPath as any,\r\n                    this.schema,\r\n                    this.internals,\r\n                    currentDoc[1]\r\n                );\r\n                indexOfLower++;\r\n            }\r\n        }\r\n        return PROMISE_RESOLVE_TRUE;\r\n    }\r\n\r\n    getAttachmentData(\r\n        documentId: string,\r\n        attachmentId: string,\r\n        digest: string\r\n    ): Promise<string> {\r\n        this.ensurePersistence();\r\n        ensureNotRemoved(this);\r\n        const key = attachmentMapKey(documentId, attachmentId);\r\n        const data = this.internals.attachments.get(key);\r\n\r\n        if (\r\n            !digest ||\r\n            !data ||\r\n            data.digest !== digest\r\n        ) {\r\n            throw new Error('attachment does not exist: ' + key);\r\n        }\r\n        return Promise.resolve(data.writeData.data);\r\n    }\r\n\r\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\r\n        ensureNotRemoved(this);\r\n        return this.internals.changes$.asObservable();\r\n    }\r\n\r\n    async remove(): Promise<void> {\r\n        if (this.closed) {\r\n            throw new Error('closed');\r\n        }\r\n        this.ensurePersistence();\r\n        ensureNotRemoved(this);\r\n\r\n        this.internals.removed = true;\r\n        this.storage.collectionStates.delete(\r\n            getMemoryCollectionKey(\r\n                this.databaseName,\r\n                this.collectionName,\r\n                this.schema.version\r\n            )\r\n        );\r\n        await this.close();\r\n    }\r\n\r\n    close(): Promise<void> {\r\n        OPEN_MEMORY_INSTANCES.delete(this);\r\n\r\n        this.ensurePersistence();\r\n        if (this.closed) {\r\n            return PROMISE_RESOLVE_VOID;\r\n        }\r\n        this.closed = true;\r\n\r\n        this.internals.refCount = this.internals.refCount - 1;\r\n        return PROMISE_RESOLVE_VOID;\r\n    }\r\n}\r\n\r\nexport function createMemoryStorageInstance<RxDocType>(\r\n    storage: RxStorageMemory,\r\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageMemoryInstanceCreationOptions>,\r\n    settings: RxStorageMemorySettings\r\n): Promise<RxStorageInstanceMemory<RxDocType>> {\r\n    const collectionKey = getMemoryCollectionKey(\r\n        params.databaseName,\r\n        params.collectionName,\r\n        params.schema.version\r\n    );\r\n\r\n    let internals = storage.collectionStates.get(collectionKey);\r\n    if (!internals) {\r\n        internals = {\r\n            id: randomToken(5),\r\n            schema: params.schema,\r\n            removed: false,\r\n            refCount: 1,\r\n            documents: new Map(),\r\n            attachments: params.schema.attachments ? new Map() : undefined as any,\r\n            byIndex: {},\r\n            changes$: new Subject()\r\n        };\r\n        addIndexesToInternalsState(internals, params.schema);\r\n        storage.collectionStates.set(collectionKey, internals);\r\n    } else {\r\n        /**\r\n         * Ensure that the storage was not already\r\n         * created with a different schema.\r\n         * This is very important because if this check\r\n         * does not exist here, we have hard-to-debug problems\r\n         * downstream.\r\n         */\r\n        if (\r\n            params.devMode &&\r\n            !deepEqual(internals.schema, params.schema)\r\n        ) {\r\n            throw new Error('storage was already created with a different schema');\r\n        }\r\n        internals.refCount = internals.refCount + 1;\r\n    }\r\n\r\n    const instance = new RxStorageInstanceMemory(\r\n        storage,\r\n        params.databaseName,\r\n        params.collectionName,\r\n        params.schema,\r\n        internals,\r\n        params.options,\r\n        settings,\r\n        params.devMode\r\n    );\r\n    return Promise.resolve(instance);\r\n}\r\n"],"mappings":"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","ignoreList":[]}