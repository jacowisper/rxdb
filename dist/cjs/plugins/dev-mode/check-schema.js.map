{"version":3,"file":"check-schema.js","names":["_rxError","require","_rxSchemaHelper","_index","_entityProperties","checkFieldNameRegex","fieldName","includes","newRxError","regexStr","regex","RegExp","match","validateFieldsDeep","rxJsonSchema","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","checkField","schemaObj","path","Array","isArray","split","pop","Object","prototype","hasOwnProperty","call","type","required","length","items","isNested","default","charAt","traverse","currentObj","currentPath","keys","forEach","attributeName","properties","nextPath","checkPrimaryKey","jsonSchema","schema","validatePrimarySchemaPart","schemaPart","args","key","compositePrimaryKey","keySchemaPart","getSchemaByObjectPath","fields","field","primaryPathSchemaPart","maxLength","isFinite","getSchemaPropertyRealPath","shortPath","pathParts","realPath","i","concat","trimDots","checkSchema","_rev","version","value","indexes","unique","encrypted","rxDocumentProperties","isMaybeReadonlyArray","index","indexAsArray","multipleOf","maximum","minimum","parentPath","lastPathPart","partParts","join","parentSchemaPart","flattenObject","map","filter","elem","pos","arr","indexOf","getProperty","replace","reduce","indexPaths","currentIndex","appendToArray","push","indexPath","propPath"],"sources":["../../../../src/plugins/dev-mode/check-schema.ts"],"sourcesContent":["/**\r\n * does additional checks over the schema-json\r\n * to ensure nothing is broken or not supported\r\n */\r\nimport {\r\n    newRxError\r\n} from '../../rx-error.ts';\r\nimport { getPrimaryFieldOfPrimaryKey, getSchemaByObjectPath } from '../../rx-schema-helper.ts';\r\nimport type {\r\n    CompositePrimaryKey,\r\n    JsonSchema,\r\n    JsonSchemaTypes,\r\n    RxJsonSchema,\r\n    TopLevelProperty\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    appendToArray,\r\n    flattenObject, getProperty, isMaybeReadonlyArray,\r\n    trimDots\r\n} from '../../plugins/utils/index.ts';\r\nimport { rxDocumentProperties } from './entity-properties.ts';\r\n\r\n/**\r\n * checks if the fieldname is allowed\r\n * this makes sure that the fieldnames can be transformed into javascript-vars\r\n * and does not conquer the observe$ and populate_ fields\r\n * @throws {Error}\r\n */\r\nexport function checkFieldNameRegex(fieldName: string) {\r\n    if (fieldName === '_deleted') {\r\n        return;\r\n    }\r\n\r\n    if (['properties'].includes(fieldName)) {\r\n        throw newRxError('SC23', {\r\n            fieldName\r\n        });\r\n    }\r\n\r\n    const regexStr = '^[a-zA-Z](?:[[a-zA-Z0-9_]*]?[a-zA-Z0-9])?$';\r\n    const regex = new RegExp(regexStr);\r\n    if (\r\n        /**\r\n         * It must be allowed to set _id as primaryKey.\r\n         * This makes it sometimes easier to work with RxDB+CouchDB\r\n         * @link https://github.com/pubkey/rxdb/issues/681\r\n         */\r\n        fieldName !== '_id' &&\r\n        !fieldName.match(regex)\r\n    ) {\r\n        throw newRxError('SC1', {\r\n            regex: regexStr,\r\n            fieldName\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * validate that all schema-related things are ok\r\n */\r\nexport function validateFieldsDeep(rxJsonSchema: RxJsonSchema<any>): true {\r\n\r\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\r\n\r\n    function checkField(\r\n        fieldName: string,\r\n        schemaObj: JsonSchema<any>,\r\n        path: string\r\n    ) {\r\n        if (\r\n            typeof fieldName === 'string' &&\r\n            typeof schemaObj === 'object' &&\r\n            !Array.isArray(schemaObj) &&\r\n            path.split('.').pop() !== 'patternProperties'\r\n        ) checkFieldNameRegex(fieldName);\r\n\r\n        // 'item' only allowed it type=='array'\r\n        if (Object.prototype.hasOwnProperty.call(schemaObj, 'item') && schemaObj.type !== 'array') {\r\n            throw newRxError('SC2', {\r\n                fieldName\r\n            });\r\n        }\r\n\r\n        /**\r\n         * required fields cannot be set via 'required: true',\r\n         * but must be set via required: []\r\n         */\r\n        if (\r\n            Object.prototype.hasOwnProperty.call(schemaObj, 'required') &&\r\n            typeof schemaObj.required === 'boolean'\r\n        ) {\r\n            throw newRxError('SC24', {\r\n                fieldName\r\n            });\r\n        }\r\n\r\n        // $ref is not allowed\r\n        if (Object.prototype.hasOwnProperty.call(schemaObj, '$ref')) {\r\n            throw newRxError('SC40', {\r\n                fieldName\r\n            });\r\n        }\r\n\r\n\r\n        // if ref given, must be type=='string', type=='array' with string-items or type==['string','null']\r\n        if (Object.prototype.hasOwnProperty.call(schemaObj, 'ref')) {\r\n            if (Array.isArray(schemaObj.type)) {\r\n                if (schemaObj.type.length > 2 || !schemaObj.type.includes('string') || !schemaObj.type.includes('null')) {\r\n                    throw newRxError('SC4', {\r\n                        fieldName\r\n                    });\r\n                }\r\n            } else {\r\n                switch (schemaObj.type) {\r\n                    case 'string':\r\n                        break;\r\n                    case 'array':\r\n                        if (\r\n                            !schemaObj.items ||\r\n                            !(schemaObj.items as any).type ||\r\n                            (schemaObj.items as any).type !== 'string'\r\n                        ) {\r\n                            throw newRxError('SC3', {\r\n                                fieldName\r\n                            });\r\n                        }\r\n                        break;\r\n                    default:\r\n                        throw newRxError('SC4', {\r\n                            fieldName\r\n                        });\r\n                }\r\n            }\r\n        }\r\n\r\n        const isNested = path.split('.').length >= 2;\r\n\r\n        // nested only\r\n        if (isNested) {\r\n            if ((schemaObj as any).default) {\r\n                throw newRxError('SC7', {\r\n                    path\r\n                });\r\n            }\r\n        }\r\n\r\n        // first level\r\n        if (!isNested) {\r\n\r\n            // if _id is used, it must be primaryKey\r\n            if (\r\n                fieldName === '_id' &&\r\n                primaryPath !== '_id'\r\n            ) {\r\n                throw newRxError('COL2', {\r\n                    fieldName\r\n                });\r\n            }\r\n\r\n            // check underscore fields\r\n            if (fieldName.charAt(0) === '_') {\r\n                if (\r\n                    // exceptional allow underscore on these fields.\r\n                    fieldName === '_id' ||\r\n                    fieldName === '_deleted'\r\n                ) {\r\n                    return;\r\n                }\r\n                throw newRxError('SC8', {\r\n                    fieldName\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    function traverse(currentObj: any, currentPath: any) {\r\n        if (!currentObj || typeof currentObj !== 'object') {\r\n            return;\r\n        }\r\n        Object.keys(currentObj).forEach(attributeName => {\r\n            const schemaObj = currentObj[attributeName];\r\n            if (\r\n                !currentObj.properties &&\r\n                schemaObj &&\r\n                typeof schemaObj === 'object' &&\r\n                !Array.isArray(currentObj)\r\n            ) {\r\n                checkField(\r\n                    attributeName,\r\n                    schemaObj,\r\n                    currentPath\r\n                );\r\n            }\r\n            let nextPath = currentPath;\r\n            if (attributeName !== 'properties') nextPath = nextPath + '.' + attributeName;\r\n            traverse(schemaObj, nextPath);\r\n        });\r\n    }\r\n    traverse(rxJsonSchema, '');\r\n    return true;\r\n}\r\n\r\nexport function checkPrimaryKey(\r\n    jsonSchema: RxJsonSchema<any>\r\n) {\r\n    if (!jsonSchema.primaryKey) {\r\n        throw newRxError('SC30', { schema: jsonSchema });\r\n    }\r\n\r\n\r\n\r\n    function validatePrimarySchemaPart(\r\n        schemaPart: JsonSchema | TopLevelProperty\r\n    ) {\r\n        if (!schemaPart) {\r\n            throw newRxError('SC33', { schema: jsonSchema });\r\n        }\r\n\r\n        const type: string = schemaPart.type as any;\r\n        if (\r\n            !type ||\r\n            !['string', 'number', 'integer'].includes(type)\r\n        ) {\r\n            throw newRxError('SC32', { schema: jsonSchema, args: { schemaPart } });\r\n        }\r\n    }\r\n\r\n    if (typeof jsonSchema.primaryKey === 'string') {\r\n        const key = jsonSchema.primaryKey;\r\n        const schemaPart = jsonSchema.properties[key];\r\n        validatePrimarySchemaPart(schemaPart);\r\n    } else {\r\n        const compositePrimaryKey: CompositePrimaryKey<any> = jsonSchema.primaryKey as any;\r\n\r\n        const keySchemaPart = getSchemaByObjectPath(jsonSchema, compositePrimaryKey.key);\r\n        validatePrimarySchemaPart(keySchemaPart);\r\n\r\n        compositePrimaryKey.fields.forEach(field => {\r\n            const schemaPart = getSchemaByObjectPath(jsonSchema, field);\r\n            validatePrimarySchemaPart(schemaPart);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * The primary key must have a maxLength set\r\n     * which is required by some RxStorage implementations\r\n     * to ensure we can craft custom index strings.\r\n     */\r\n    const primaryPath = getPrimaryFieldOfPrimaryKey(jsonSchema.primaryKey);\r\n    const primaryPathSchemaPart = jsonSchema.properties[primaryPath];\r\n    if (!primaryPathSchemaPart.maxLength) {\r\n        throw newRxError('SC39', { schema: jsonSchema, args: { primaryPathSchemaPart } });\r\n    } else if (!isFinite(primaryPathSchemaPart.maxLength)) {\r\n        throw newRxError('SC41', { schema: jsonSchema, args: { primaryPathSchemaPart } });\r\n    }\r\n}\r\n\r\n/**\r\n * computes real path of the object path in the collection schema\r\n */\r\nfunction getSchemaPropertyRealPath(shortPath: string) {\r\n    const pathParts = shortPath.split('.');\r\n    let realPath = '';\r\n    for (let i = 0; i < pathParts.length; i += 1) {\r\n        if (pathParts[i] !== '[]') {\r\n            realPath = realPath.concat('.properties.'.concat(pathParts[i]));\r\n        } else {\r\n            realPath = realPath.concat('.items');\r\n        }\r\n    }\r\n    return trimDots(realPath);\r\n}\r\n\r\n/**\r\n * does the checking\r\n * @throws {Error} if something is not ok\r\n */\r\nexport function checkSchema(jsonSchema: RxJsonSchema<any>) {\r\n\r\n    if (!jsonSchema.primaryKey) {\r\n        throw newRxError('SC30', {\r\n            schema: jsonSchema\r\n        });\r\n    }\r\n\r\n    if (!Object.prototype.hasOwnProperty.call(jsonSchema, 'properties')) {\r\n        throw newRxError('SC29', {\r\n            schema: jsonSchema\r\n        });\r\n    }\r\n\r\n    // _rev MUST NOT exist, it is added by RxDB\r\n    if (jsonSchema.properties._rev) {\r\n        throw newRxError('SC10', {\r\n            schema: jsonSchema\r\n        });\r\n    }\r\n\r\n    // check version\r\n    if (!Object.prototype.hasOwnProperty.call(jsonSchema, 'version') ||\r\n        typeof jsonSchema.version !== 'number' ||\r\n        jsonSchema.version < 0\r\n    ) {\r\n        throw newRxError('SC11', {\r\n            version: jsonSchema.version\r\n        });\r\n    }\r\n\r\n    validateFieldsDeep(jsonSchema);\r\n    checkPrimaryKey(jsonSchema);\r\n\r\n    Object.keys(jsonSchema.properties).forEach(key => {\r\n        const value: any = jsonSchema.properties[key];\r\n        // check primary\r\n        if (key === jsonSchema.primaryKey) {\r\n            if (jsonSchema.indexes && jsonSchema.indexes.includes(key)) {\r\n                throw newRxError('SC13', {\r\n                    value,\r\n                    schema: jsonSchema\r\n                });\r\n            }\r\n            if (value.unique) {\r\n                throw newRxError('SC14', {\r\n                    value,\r\n                    schema: jsonSchema\r\n                });\r\n            }\r\n            if (jsonSchema.encrypted && jsonSchema.encrypted.includes(key)) {\r\n                throw newRxError('SC15', {\r\n                    value,\r\n                    schema: jsonSchema\r\n                });\r\n            }\r\n            if (value.type !== 'string') {\r\n                throw newRxError('SC16', {\r\n                    value,\r\n                    schema: jsonSchema\r\n                });\r\n            }\r\n        }\r\n\r\n        // check if RxDocument-property\r\n        if (rxDocumentProperties().includes(key)) {\r\n            throw newRxError('SC17', {\r\n                key,\r\n                schema: jsonSchema\r\n            });\r\n        }\r\n    });\r\n\r\n    // check format of jsonSchema.indexes\r\n    if (jsonSchema.indexes) {\r\n        // should be an array\r\n        if (!isMaybeReadonlyArray(jsonSchema.indexes)) {\r\n            throw newRxError('SC18', {\r\n                indexes: jsonSchema.indexes,\r\n                schema: jsonSchema\r\n            });\r\n        }\r\n\r\n        jsonSchema.indexes.forEach(index => {\r\n            // should contain strings or array of strings\r\n            if (!(typeof index === 'string' || Array.isArray(index))) {\r\n                throw newRxError('SC19', { index, schema: jsonSchema });\r\n            }\r\n            // if is a compound index it must contain strings\r\n            if (Array.isArray(index)) {\r\n                for (let i = 0; i < index.length; i += 1) {\r\n                    if (typeof index[i] !== 'string') {\r\n                        throw newRxError('SC20', { index, schema: jsonSchema });\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * To be able to craft custom indexable string with compound fields,\r\n             * we need to know the maximum fieldlength of the fields values\r\n             * when they are transformed to strings.\r\n             * Therefore we need to enforce some properties inside of the schema.\r\n             */\r\n            const indexAsArray = isMaybeReadonlyArray(index) ? index : [index];\r\n            indexAsArray.forEach(fieldName => {\r\n                const schemaPart = getSchemaByObjectPath(\r\n                    jsonSchema,\r\n                    fieldName\r\n                );\r\n\r\n\r\n                const type: JsonSchemaTypes = schemaPart.type as any;\r\n                switch (type) {\r\n                    case 'string':\r\n                        const maxLength = schemaPart.maxLength;\r\n                        if (!maxLength) {\r\n                            throw newRxError('SC34', {\r\n                                index,\r\n                                field: fieldName,\r\n                                schema: jsonSchema\r\n                            });\r\n                        }\r\n                        break;\r\n                    case 'number':\r\n                    case 'integer':\r\n                        const multipleOf = schemaPart.multipleOf;\r\n                        if (!multipleOf) {\r\n                            throw newRxError('SC35', {\r\n                                index,\r\n                                field: fieldName,\r\n                                schema: jsonSchema\r\n                            });\r\n                        }\r\n                        const maximum = schemaPart.maximum;\r\n                        const minimum = schemaPart.minimum;\r\n                        if (\r\n                            typeof maximum === 'undefined' ||\r\n                            typeof minimum === 'undefined'\r\n                        ) {\r\n                            throw newRxError('SC37', {\r\n                                index,\r\n                                field: fieldName,\r\n                                schema: jsonSchema\r\n                            });\r\n                        }\r\n\r\n                        if (\r\n                            !isFinite(maximum) ||\r\n                            !isFinite(minimum)\r\n                        ) {\r\n                            throw newRxError('SC41', {\r\n                                index,\r\n                                field: fieldName,\r\n                                schema: jsonSchema\r\n                            });\r\n                        }\r\n\r\n                        break;\r\n                    case 'boolean':\r\n                        /**\r\n                         * If a boolean field is used as an index,\r\n                         * it must be required.\r\n                         */\r\n                        let parentPath = '';\r\n                        let lastPathPart = fieldName;\r\n                        if (fieldName.includes('.')) {\r\n                            const partParts = fieldName.split('.');\r\n                            lastPathPart = partParts.pop();\r\n                            parentPath = partParts.join('.');\r\n                        }\r\n                        const parentSchemaPart = parentPath === '' ? jsonSchema : getSchemaByObjectPath(\r\n                            jsonSchema,\r\n                            parentPath\r\n                        );\r\n\r\n                        if (\r\n                            !parentSchemaPart.required ||\r\n                            !parentSchemaPart.required.includes(lastPathPart)\r\n                        ) {\r\n                            throw newRxError('SC38', {\r\n                                index,\r\n                                field: fieldName,\r\n                                schema: jsonSchema\r\n                            });\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        throw newRxError('SC36', {\r\n                            fieldName,\r\n                            type: schemaPart.type as any,\r\n                            schema: jsonSchema,\r\n                        });\r\n                }\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    // remove backward-compatibility for index: true\r\n    Object.keys(flattenObject(jsonSchema))\r\n        .map(key => {\r\n            // flattenObject returns only ending paths, we need all paths pointing to an object\r\n            const split = key.split('.');\r\n            split.pop(); // all but last\r\n            return split.join('.');\r\n        })\r\n        .filter(key => key !== '')\r\n        .filter((elem, pos, arr) => arr.indexOf(elem) === pos) // unique\r\n        .filter(key => { // check if this path defines an index\r\n            const value = getProperty(jsonSchema, key);\r\n            return value && !!value.index;\r\n        })\r\n        .forEach(key => { // replace inner properties\r\n            key = key.replace('properties.', ''); // first\r\n            key = key.replace(/\\.properties\\./g, '.'); // middle\r\n            throw newRxError('SC26', {\r\n                index: trimDots(key),\r\n                schema: jsonSchema\r\n            });\r\n        });\r\n\r\n    /* check types of the indexes */\r\n    (jsonSchema.indexes || [])\r\n        .reduce((indexPaths: string[], currentIndex) => {\r\n            if (isMaybeReadonlyArray(currentIndex)) {\r\n                appendToArray(indexPaths, currentIndex);\r\n            } else {\r\n                indexPaths.push(currentIndex);\r\n            }\r\n            return indexPaths;\r\n        }, [])\r\n        .filter((elem, pos, arr) => arr.indexOf(elem) === pos) // from now on working only with unique indexes\r\n        .map(indexPath => {\r\n            const realPath = getSchemaPropertyRealPath(indexPath); // real path in the collection schema\r\n            const schemaObj = getProperty(jsonSchema, realPath); // get the schema of the indexed property\r\n            if (!schemaObj || typeof schemaObj !== 'object') {\r\n                throw newRxError('SC21', {\r\n                    index: indexPath,\r\n                    schema: jsonSchema\r\n                });\r\n            }\r\n            return { indexPath, schemaObj };\r\n        })\r\n        .filter(index =>\r\n            index.schemaObj.type !== 'string' &&\r\n            index.schemaObj.type !== 'integer' &&\r\n            index.schemaObj.type !== 'number' &&\r\n            index.schemaObj.type !== 'boolean'\r\n        )\r\n        .forEach(index => {\r\n            throw newRxError('SC22', {\r\n                key: index.indexPath,\r\n                type: index.schemaObj.type,\r\n                schema: jsonSchema\r\n            });\r\n        });\r\n\r\n    /* ensure encrypted fields exist in the schema */\r\n    if (jsonSchema.encrypted) {\r\n        jsonSchema.encrypted\r\n            .forEach(propPath => {\r\n                // real path in the collection schema\r\n                const realPath = getSchemaPropertyRealPath(propPath);\r\n                // get the schema of the indexed property\r\n                const schemaObj = getProperty(jsonSchema, realPath);\r\n                if (!schemaObj || typeof schemaObj !== 'object') {\r\n                    throw newRxError('SC28', {\r\n                        field: propPath,\r\n                        schema: jsonSchema\r\n                    });\r\n                }\r\n            });\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]}