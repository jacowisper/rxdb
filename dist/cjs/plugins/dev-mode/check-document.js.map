{"version":3,"file":"check-document.js","names":["_rxError","require","_rxSchemaHelper","ensurePrimaryKeyValid","primaryKey","docData","newRxError","document","trim","includes","containsDateInstance","obj","key","hasOwnProperty","Date","checkWriteRows","storageInstance","rows","primaryPath","getPrimaryFieldOfPrimaryKey","schema","_loop","writeRow","fillPrimaryKey","previous","Object","keys","_meta","forEach","metaFieldName","prototype","call","dataBefore","dataAfter","args","structuredClone","JSON","parse","stringify","err","collection","collectionName"],"sources":["../../../../src/plugins/dev-mode/check-document.ts"],"sourcesContent":["import { newRxError } from '../../rx-error.ts';\r\nimport { fillPrimaryKey, getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\r\nimport type { BulkWriteRow, RxDocumentData, RxStorageInstance } from '../../types/index.d.ts';\r\n\r\nexport function ensurePrimaryKeyValid(\r\n    primaryKey: string,\r\n    docData: RxDocumentData<any>\r\n) {\r\n    if (!primaryKey) {\r\n        throw newRxError('DOC20', {\r\n            primaryKey,\r\n            document: docData\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * This is required so that we can left-pad\r\n     * the primaryKey and we are still able to de-left-pad\r\n     * it to get again the original key.\r\n     */\r\n    if (\r\n        primaryKey !== primaryKey.trim()\r\n    ) {\r\n        throw newRxError('DOC21', {\r\n            primaryKey,\r\n            document: docData\r\n        });\r\n    }\r\n    if (\r\n        primaryKey.includes('\\r') ||\r\n        primaryKey.includes('\\n')\r\n    ) {\r\n        throw newRxError('DOC22', {\r\n            primaryKey,\r\n            document: docData\r\n        });\r\n    }\r\n    if (\r\n        primaryKey.includes('\"')\r\n    ) {\r\n        throw newRxError('DOC23', {\r\n            primaryKey,\r\n            document: docData\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Deeply checks if the object contains an\r\n * instance of the JavaScript Date class.\r\n * @recursive\r\n */\r\nexport function containsDateInstance(obj: any): boolean {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (let key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            if (obj[key] instanceof Date) {\r\n                return true;\r\n            }\r\n            if (typeof obj[key] === 'object' && containsDateInstance(obj[key])) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function checkWriteRows<RxDocType>(\r\n    storageInstance: RxStorageInstance<RxDocType, any, any, any>,\r\n    rows: BulkWriteRow<RxDocType>[]\r\n) {\r\n    const primaryPath = getPrimaryFieldOfPrimaryKey(storageInstance.schema.primaryKey);\r\n    for (const writeRow of rows) {\r\n        // ensure that the primary key has not been changed\r\n        writeRow.document = fillPrimaryKey(\r\n            primaryPath,\r\n            storageInstance.schema,\r\n            writeRow.document\r\n        );\r\n\r\n\r\n\r\n        /**\r\n         * Ensure that _meta fields have been merged\r\n         * and not replaced.\r\n         * This is important so that when one plugin A\r\n         * sets a _meta field and another plugin B does a write\r\n         * to the document, it must be ensured that the\r\n         * field of plugin A was not removed.\r\n         */\r\n        if (writeRow.previous) {\r\n            Object.keys(writeRow.previous._meta)\r\n                .forEach(metaFieldName => {\r\n                    if (!Object.prototype.hasOwnProperty.call(writeRow.document._meta, metaFieldName)) {\r\n                        throw newRxError('SNH', {\r\n                            dataBefore: writeRow.previous,\r\n                            dataAfter: writeRow.document,\r\n                            args: {\r\n                                metaFieldName\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Ensure it can be structured cloned\r\n         */\r\n        try {\r\n            /**\r\n             * Notice that structuredClone() is not available\r\n             * in ReactNative, so we test for JSON.stringify() instead\r\n             * @link https://github.com/pubkey/rxdb/issues/5046#issuecomment-1827374498\r\n             */\r\n            if (typeof structuredClone === 'function') {\r\n                structuredClone(writeRow);\r\n            } else {\r\n                JSON.parse(JSON.stringify(writeRow));\r\n            }\r\n        } catch (err) {\r\n            throw newRxError('DOC24', {\r\n                collection: storageInstance.collectionName,\r\n                document: writeRow.document\r\n            });\r\n        }\r\n\r\n\r\n        /**\r\n         * Ensure it does not contain a Date() object\r\n         */\r\n        if (containsDateInstance(writeRow.document)) {\r\n            throw newRxError('DOC24', {\r\n                collection: storageInstance.collectionName,\r\n                document: writeRow.document\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]}