{"version":3,"file":"check-orm.js","names":["_rxError","require","_entityProperties","checkOrmMethods","statics","Object","entries","forEach","k","v","newRxTypeError","name","startsWith","type","rxCollectionProperties","includes","rxDocumentProperties","newRxError","checkOrmDocumentMethods","schema","methods","topLevelFields","keys","properties","filter","funName"],"sources":["../../../../src/plugins/dev-mode/check-orm.ts"],"sourcesContent":["import {\r\n    newRxError,\r\n    newRxTypeError\r\n} from '../../rx-error.ts';\r\nimport type { KeyFunctionMap, RxJsonSchema } from '../../types/index.d.ts';\r\nimport { rxCollectionProperties, rxDocumentProperties } from './entity-properties.ts';\r\n\r\n/**\r\n * checks if the given static methods are allowed\r\n * @throws if not allowed\r\n */\r\nexport function checkOrmMethods(statics?: KeyFunctionMap) {\r\n    if (!statics) {\r\n        return;\r\n    }\r\n    Object\r\n        .entries(statics)\r\n        .forEach(([k, v]) => {\r\n            if (typeof k !== 'string') {\r\n                throw newRxTypeError('COL14', {\r\n                    name: k\r\n                });\r\n            }\r\n\r\n            if (k.startsWith('_')) {\r\n                throw newRxTypeError('COL15', {\r\n                    name: k\r\n                });\r\n            }\r\n\r\n            if (typeof v !== 'function') {\r\n                throw newRxTypeError('COL16', {\r\n                    name: k,\r\n                    type: typeof k\r\n                });\r\n            }\r\n\r\n            if (\r\n                rxCollectionProperties().includes(k) ||\r\n                rxDocumentProperties().includes(k)\r\n            ) {\r\n                throw newRxError('COL17', {\r\n                    name: k\r\n                });\r\n            }\r\n        });\r\n}\r\n\r\n\r\nexport function checkOrmDocumentMethods<RxDocType>(\r\n    schema: RxJsonSchema<RxDocType>,\r\n    methods?: any,\r\n) {\r\n    const topLevelFields = Object.keys(schema.properties) as (keyof RxDocType)[];\r\n    if (!methods) {\r\n        return;\r\n    }\r\n    Object.keys(methods)\r\n        .filter(funName => topLevelFields.includes(funName as any))\r\n        .forEach(funName => {\r\n            throw newRxError('COL18', {\r\n                funName\r\n            });\r\n        });\r\n}\r\n"],"mappings":";;;;;;;AAAA,IAAAA,QAAA,GAAAC,OAAA;AAKA,IAAAC,iBAAA,GAAAD,OAAA;AAEA;AACA;AACA;AACA;AACO,SAASE,eAAeA,CAACC,OAAwB,EAAE;EACtD,IAAI,CAACA,OAAO,EAAE;IACV;EACJ;EACAC,MAAM,CACDC,OAAO,CAACF,OAAO,CAAC,CAChBG,OAAO,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAK;IACjB,IAAI,OAAOD,CAAC,KAAK,QAAQ,EAAE;MACvB,MAAM,IAAAE,uBAAc,EAAC,OAAO,EAAE;QAC1BC,IAAI,EAAEH;MACV,CAAC,CAAC;IACN;IAEA,IAAIA,CAAC,CAACI,UAAU,CAAC,GAAG,CAAC,EAAE;MACnB,MAAM,IAAAF,uBAAc,EAAC,OAAO,EAAE;QAC1BC,IAAI,EAAEH;MACV,CAAC,CAAC;IACN;IAEA,IAAI,OAAOC,CAAC,KAAK,UAAU,EAAE;MACzB,MAAM,IAAAC,uBAAc,EAAC,OAAO,EAAE;QAC1BC,IAAI,EAAEH,CAAC;QACPK,IAAI,EAAE,OAAOL;MACjB,CAAC,CAAC;IACN;IAEA,IACI,IAAAM,wCAAsB,EAAC,CAAC,CAACC,QAAQ,CAACP,CAAC,CAAC,IACpC,IAAAQ,sCAAoB,EAAC,CAAC,CAACD,QAAQ,CAACP,CAAC,CAAC,EACpC;MACE,MAAM,IAAAS,mBAAU,EAAC,OAAO,EAAE;QACtBN,IAAI,EAAEH;MACV,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;AACV;AAGO,SAASU,uBAAuBA,CACnCC,MAA+B,EAC/BC,OAAa,EACf;EACE,IAAMC,cAAc,GAAGhB,MAAM,CAACiB,IAAI,CAACH,MAAM,CAACI,UAAU,CAAwB;EAC5E,IAAI,CAACH,OAAO,EAAE;IACV;EACJ;EACAf,MAAM,CAACiB,IAAI,CAACF,OAAO,CAAC,CACfI,MAAM,CAACC,OAAO,IAAIJ,cAAc,CAACN,QAAQ,CAACU,OAAc,CAAC,CAAC,CAC1DlB,OAAO,CAACkB,OAAO,IAAI;IAChB,MAAM,IAAAR,mBAAU,EAAC,OAAO,EAAE;MACtBQ;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;AACV","ignoreList":[]}