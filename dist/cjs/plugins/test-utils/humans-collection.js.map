{"version":3,"file":"humans-collection.js","names":["_clone","_interopRequireDefault","require","schemas","_interopRequireWildcard","schemaObjects","_config","_assert","_index","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","create","size","collectionName","multiInstance","eventReduce","storage","getConfig","getStorage","db","createRxDatabase","name","randomToken","ignoreDuplicate","localDocuments","collections","addCollections","schema","human","docsData","Array","fill","map","humanData","writeResult","bulkInsert","assert","deepStrictEqual","error","createBySchema","migrationStrategies","createAttachments","schemaJson","clone","attachments","createNoCompression","schemaJSON","keyCompression","createAgeIndex","amount","humana","humanAgeIndex","multipleOnSameDB","human2","docsData2","collection","collection2","createNested","nestedhuman","nestedHuman","nestedHumanData","createDeepNested","deepNestedHuman","deepNestedHumanData","createMultiInstance","password","undefined","hasMultiInstance","Error","createPrimary","primaryHuman","simpleHumanData","createHumanWithTimestamp","databaseName","conflictHandler","humans","humanWithTimestamp","humanWithTimestampData","createMigrationCollection","addMigrationStrategies","autoMigrate","attachment","assign","doc","age","parseInt","colName","cols","simpleHuman","Promise","all","insert","simpleHumanAge","then","putAttachment","close","db2","cols2","simpleHumanV3","createRelated","refHuman","doc1","refHumanData","doc2","bestFriend","createRelatedNested","refHumanNested","refHumanNestedData","foo","createIdAndAgeIndex","humanIdAndAgeIndex","humanWithIdAndAgeIndexDocumentType"],"sources":["../../../../src/plugins/test-utils/humans-collection.ts"],"sourcesContent":["import clone from 'clone';\r\nimport * as schemas from './schemas.ts';\r\nimport * as schemaObjects from './schema-objects.ts';\r\nimport { getConfig } from './config.ts';\r\nimport assert from 'assert';\r\n\r\nimport {\r\n    createRxDatabase,\r\n    RxJsonSchema,\r\n    RxCollection,\r\n    RxDatabase,\r\n    randomToken,\r\n    MigrationStrategies,\r\n    RxAttachmentCreator,\r\n    RxStorage,\r\n    RxConflictHandler\r\n} from '../../index.ts';\r\n\r\nimport { HumanDocumentType } from './schemas.ts';\r\n\r\nexport async function create(\r\n    size: number = 20,\r\n    collectionName: string = 'human',\r\n    multiInstance: boolean = true,\r\n    eventReduce: boolean = true,\r\n    storage: RxStorage<any, any> = getConfig().storage.getStorage()\r\n\r\n): Promise<RxCollection<HumanDocumentType, {}, {}>> {\r\n    const db = await createRxDatabase<{ human: RxCollection<HumanDocumentType>; }>({\r\n        name: randomToken(10),\r\n        storage,\r\n        multiInstance,\r\n        eventReduce,\r\n        ignoreDuplicate: true,\r\n        localDocuments: true\r\n    });\r\n\r\n    const collections = await db.addCollections({\r\n        [collectionName]: {\r\n            schema: schemas.human,\r\n            localDocuments: true\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (size > 0) {\r\n        const docsData = new Array(size)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanData());\r\n        const writeResult = await collections[collectionName].bulkInsert(docsData);\r\n        assert.deepStrictEqual(writeResult.error, []);\r\n    }\r\n    return collections[collectionName];\r\n}\r\n\r\nexport async function createBySchema<RxDocumentType = {}>(\r\n    schema: RxJsonSchema<RxDocumentType>,\r\n    name = 'human',\r\n    storage = getConfig().storage.getStorage(),\r\n    migrationStrategies?: MigrationStrategies\r\n): Promise<RxCollection<RxDocumentType, {}, {}>> {\r\n    const db = await createRxDatabase<{ [prop: string]: RxCollection<RxDocumentType>; }>({\r\n        name: randomToken(10),\r\n        storage,\r\n        multiInstance: true,\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n\r\n    const collections = await db.addCollections({\r\n        [name]: {\r\n            schema,\r\n            migrationStrategies\r\n        }\r\n    });\r\n\r\n    return collections[name];\r\n}\r\n\r\nexport async function createAttachments(\r\n    size = 20,\r\n    name = 'human',\r\n    multiInstance = true\r\n): Promise<RxCollection<HumanDocumentType, {}, {}>> {\r\n    if (!name) {\r\n        name = 'human';\r\n    }\r\n    const db = await createRxDatabase<{ [prop: string]: RxCollection<HumanDocumentType>; }>({\r\n        name: randomToken(10),\r\n        storage: getConfig().storage.getStorage(),\r\n        multiInstance,\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n\r\n    const schemaJson = clone(schemas.human);\r\n    schemaJson.attachments = {};\r\n\r\n    const collections = await db.addCollections({\r\n        [name]: {\r\n            schema: schemaJson\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (size > 0) {\r\n        const docsData = new Array(size)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanData());\r\n        await collections[name].bulkInsert(docsData);\r\n    }\r\n\r\n    return collections[name];\r\n}\r\n\r\nexport async function createNoCompression(\r\n    size = 20,\r\n    name = 'human'\r\n): Promise<RxCollection<HumanDocumentType>> {\r\n    const db = await createRxDatabase<{ [prop: string]: RxCollection<HumanDocumentType>; }>({\r\n        name: randomToken(10),\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    const schemaJSON = clone(schemas.human);\r\n    schemaJSON.keyCompression = false;\r\n    // setTimeout(() => db.close(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        [name]: {\r\n            schema: schemaJSON\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (size > 0) {\r\n        const docsData = new Array(size)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanData());\r\n        await collections[name].bulkInsert(docsData);\r\n    }\r\n\r\n    return collections[name];\r\n}\r\n\r\nexport async function createAgeIndex(\r\n    amount = 20\r\n): Promise<RxCollection<HumanDocumentType>> {\r\n    const db = await createRxDatabase<{ humana: RxCollection<HumanDocumentType>; }>({\r\n        name: randomToken(10),\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.close(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        humana: {\r\n            schema: schemas.humanAgeIndex\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (amount > 0) {\r\n        const docsData = new Array(amount)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanData());\r\n        await collections.humana.bulkInsert(docsData);\r\n    }\r\n\r\n    return collections.humana;\r\n}\r\n\r\nexport async function multipleOnSameDB(\r\n    size = 10\r\n): Promise<{\r\n    db: RxDatabase<{\r\n        human: RxCollection<HumanDocumentType>;\r\n        human2: RxCollection<HumanDocumentType>;\r\n    }>;\r\n    collection: RxCollection<HumanDocumentType>;\r\n    collection2: RxCollection<HumanDocumentType>;\r\n}> {\r\n    const db = await createRxDatabase<{\r\n        human: RxCollection<HumanDocumentType>;\r\n        human2: RxCollection<HumanDocumentType>;\r\n    }>({\r\n        name: randomToken(10),\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.close(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        human: {\r\n            schema: schemas.human\r\n        },\r\n        human2: {\r\n            schema: schemas.human\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (size > 0) {\r\n        const docsData = new Array(size)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanData());\r\n        await collections.human.bulkInsert(docsData);\r\n\r\n        const docsData2 = new Array(size)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanData());\r\n        await collections.human2.bulkInsert(docsData2);\r\n    }\r\n\r\n    return {\r\n        db,\r\n        collection: collections.human,\r\n        collection2: collections.human2\r\n    };\r\n}\r\n\r\nexport async function createNested(\r\n    amount = 5\r\n): Promise<RxCollection<schemaObjects.NestedHumanDocumentType>> {\r\n    const db = await createRxDatabase<{ nestedhuman: RxCollection<schemaObjects.NestedHumanDocumentType>; }>({\r\n        name: randomToken(10),\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.close(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        nestedhuman: {\r\n            schema: schemas.nestedHuman\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (amount > 0) {\r\n        const docsData = new Array(amount)\r\n            .fill(0)\r\n            .map(() => schemaObjects.nestedHumanData());\r\n        await collections.nestedhuman.bulkInsert(docsData);\r\n    }\r\n\r\n    return collections.nestedhuman;\r\n}\r\n\r\nexport async function createDeepNested(\r\n    amount = 5\r\n): Promise<RxCollection<schemaObjects.DeepNestedHumanDocumentType>> {\r\n    const db = await createRxDatabase<{ nestedhuman: RxCollection<schemaObjects.DeepNestedHumanDocumentType>; }>({\r\n        name: randomToken(10),\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n    });\r\n    // setTimeout(() => db.close(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        nestedhuman: {\r\n            schema: schemas.deepNestedHuman\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (amount > 0) {\r\n        const docsData = new Array(amount)\r\n            .fill(0)\r\n            .map(() => schemaObjects.deepNestedHumanData());\r\n        await collections.nestedhuman.bulkInsert(docsData);\r\n    }\r\n\r\n    return collections.nestedhuman;\r\n}\r\n\r\nexport async function createMultiInstance(\r\n    name: string,\r\n    amount = 0,\r\n    password = undefined,\r\n    storage: RxStorage<any, any> = getConfig().storage.getStorage()\r\n): Promise<RxCollection<HumanDocumentType, {}, {}>> {\r\n    if (!getConfig().storage.hasMultiInstance) {\r\n        throw new Error('createMultiInstance() cannot be called on a storage with hasMultiInstance:false');\r\n    }\r\n\r\n    const db = await createRxDatabase<{ human: RxCollection<HumanDocumentType>; }>({\r\n        name,\r\n        storage,\r\n        password,\r\n        multiInstance: true,\r\n        eventReduce: true,\r\n        ignoreDuplicate: true,\r\n        localDocuments: true\r\n    });\r\n    // setTimeout(() => db.close(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        human: {\r\n            schema: schemas.human,\r\n            localDocuments: true\r\n        }\r\n    });\r\n    // insert data\r\n    if (amount > 0) {\r\n        const docsData = new Array(amount)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanData());\r\n        await collections.human.bulkInsert(docsData);\r\n    }\r\n\r\n    return collections.human;\r\n}\r\n\r\nexport async function createPrimary(\r\n    amount = 10,\r\n    name = randomToken(10)\r\n): Promise<RxCollection<schemaObjects.SimpleHumanDocumentType>> {\r\n\r\n    const db = await createRxDatabase<{ human: RxCollection<schemaObjects.SimpleHumanDocumentType>; }>({\r\n        name,\r\n        storage: getConfig().storage.getStorage(),\r\n        multiInstance: true,\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.close(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        human: {\r\n            schema: schemas.primaryHuman\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (amount > 0) {\r\n        const docsData = new Array(amount)\r\n            .fill(0)\r\n            .map(() => schemaObjects.simpleHumanData());\r\n        await collections.human.bulkInsert(docsData);\r\n    }\r\n\r\n    return collections.human;\r\n}\r\n\r\nexport async function createHumanWithTimestamp(\r\n    amount = 0,\r\n    databaseName = randomToken(10),\r\n    multiInstance = true,\r\n    storage = getConfig().storage.getStorage(),\r\n    conflictHandler?: RxConflictHandler<any>\r\n\r\n): Promise<RxCollection<schemaObjects.HumanWithTimestampDocumentType>> {\r\n\r\n    const db = await createRxDatabase<{ humans: RxCollection<schemaObjects.HumanWithTimestampDocumentType>; }>({\r\n        name: databaseName,\r\n        storage,\r\n        multiInstance,\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.close(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        humans: {\r\n            conflictHandler,\r\n            schema: schemas.humanWithTimestamp\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (amount > 0) {\r\n        const docsData = new Array(amount)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanWithTimestampData());\r\n        await collections.humans.bulkInsert(docsData);\r\n    }\r\n\r\n    return collections.humans;\r\n}\r\n\r\nexport async function createMigrationCollection(\r\n    amount = 0,\r\n    addMigrationStrategies: MigrationStrategies = {},\r\n    name = randomToken(10),\r\n    autoMigrate = false,\r\n    attachment?: RxAttachmentCreator\r\n): Promise<RxCollection<schemaObjects.SimpleHumanV3DocumentType>> {\r\n\r\n    const migrationStrategies: any = Object.assign(\r\n        {\r\n            1: (doc: any) => doc,\r\n            2: (doc: any) => doc,\r\n            3: (doc: any) => {\r\n                doc.age = parseInt(doc.age, 10);\r\n                return doc;\r\n            }\r\n        },\r\n        addMigrationStrategies\r\n    );\r\n\r\n\r\n    const colName = 'human';\r\n    const db = await createRxDatabase<{ human: RxCollection<schemaObjects.SimpleHumanAgeDocumentType>; }>({\r\n        name,\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    const cols = await db.addCollections({\r\n        [colName]: {\r\n            schema: attachment !== undefined ? { ...schemas.simpleHuman, attachments: {} } : schemas.simpleHuman,\r\n            autoMigrate: false\r\n        }\r\n    });\r\n\r\n    await Promise.all(\r\n        new Array(amount)\r\n            .fill(0)\r\n            .map(() => cols[colName].insert(schemaObjects.simpleHumanAge()).then(doc => {\r\n                if (attachment !== undefined) {\r\n                    return doc.putAttachment(attachment);\r\n                }\r\n            }))\r\n    );\r\n    await db.close();\r\n\r\n    const db2 = await createRxDatabase<{ human: RxCollection<schemaObjects.SimpleHumanV3DocumentType>; }>({\r\n        name,\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    const cols2 = await db2.addCollections({\r\n        [colName]: {\r\n            schema: attachment !== undefined ? { ...schemas.simpleHumanV3, attachments: {} } : schemas.simpleHumanV3,\r\n            autoMigrate,\r\n            migrationStrategies\r\n        }\r\n    });\r\n\r\n    return cols2[colName];\r\n}\r\n\r\nexport async function createRelated(\r\n    name = randomToken(10)\r\n): Promise<RxCollection<schemaObjects.RefHumanDocumentType>> {\r\n    const db = await createRxDatabase<{ human: RxCollection<schemaObjects.RefHumanDocumentType>; }>({\r\n        name,\r\n        storage: getConfig().storage.getStorage(),\r\n        multiInstance: true,\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.close(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        human: {\r\n            schema: schemas.refHuman\r\n        }\r\n    });\r\n\r\n    const doc1 = schemaObjects.refHumanData();\r\n    const doc2 = schemaObjects.refHumanData(doc1.name);\r\n    doc1.bestFriend = doc2.name; // cross-relation\r\n\r\n    await collections.human.insert(doc1);\r\n    await collections.human.insert(doc2);\r\n\r\n    return collections.human;\r\n}\r\n\r\nexport async function createRelatedNested(\r\n    name = randomToken(10)\r\n): Promise<RxCollection<schemaObjects.RefHumanNestedDocumentType>> {\r\n\r\n    const db = await createRxDatabase<{ human: RxCollection<schemaObjects.RefHumanNestedDocumentType>; }>({\r\n        name,\r\n        storage: getConfig().storage.getStorage(),\r\n        multiInstance: true,\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.close(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        human: {\r\n            schema: schemas.refHumanNested\r\n        }\r\n    });\r\n\r\n    const doc1 = schemaObjects.refHumanNestedData();\r\n    const doc2 = schemaObjects.refHumanNestedData(doc1.name);\r\n    doc1.foo.bestFriend = doc2.name; // cross-relation\r\n\r\n    await collections.human.insert(doc1);\r\n    await collections.human.insert(doc2);\r\n\r\n    return collections.human;\r\n}\r\n\r\nexport async function createIdAndAgeIndex(\r\n    amount = 20\r\n): Promise<RxCollection<schemaObjects.HumanWithIdAndAgeIndexDocumentType>> {\r\n    const db = await createRxDatabase<{ humana: RxCollection<schemaObjects.HumanWithIdAndAgeIndexDocumentType>; }>({\r\n        name: randomToken(10),\r\n        storage: getConfig().storage.getStorage(),\r\n        eventReduce: true,\r\n        ignoreDuplicate: true\r\n    });\r\n    // setTimeout(() => db.close(), dbLifetime);\r\n    const collections = await db.addCollections({\r\n        humana: {\r\n            schema: schemas.humanIdAndAgeIndex\r\n        }\r\n    });\r\n\r\n    // insert data\r\n    if (amount > 0) {\r\n        const docsData = new Array(amount)\r\n            .fill(0)\r\n            .map(() => schemaObjects.humanWithIdAndAgeIndexDocumentType());\r\n        await collections.humana.bulkInsert(docsData);\r\n    }\r\n\r\n    return collections.humana;\r\n}\r\n"],"mappings":"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","ignoreList":[]}