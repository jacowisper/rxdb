{"version":3,"file":"denokv-query.js","names":["_customIndex","require","_index","_rxQueryHelper","_denokvHelper","queryDenoKV","instance","preparedQuery","queryPlan","query","skip","limit","Infinity","skipPlusLimit","queryPlanFields","index","mustManuallyResort","sortSatisfiedByIndex","queryMatcher","selectorSatisfiedByIndex","getQueryMatcher","schema","kv","kvPromise","indexForName","slice","indexName","getDenoKVIndexName","indexMeta","ensureNotFalsy","internals","indexes","lowerBound","startKeys","lowerBoundString","getStartIndexStringFromLowerBound","inclusiveStart","changeIndexableStringByOneQuantum","upperBound","endKeys","upperBoundString","getStartIndexStringFromUpperBound","inclusiveEnd","result","singleDocResult","get","keySpace","indexId","kvOptions","value","docId","docDataResult","DENOKV_DOCUMENT_ROOT_PATH","docData","push","documents","range","list","start","end","consistency","settings","consistencyLevel","undefined","batchSize","indexDocEntry","length","sortComparator","getSortComparator","sort"],"sources":["../../../../src/plugins/storage-denokv/denokv-query.ts"],"sourcesContent":["import {\r\n    changeIndexableStringByOneQuantum,\r\n    getStartIndexStringFromLowerBound,\r\n    getStartIndexStringFromUpperBound\r\n} from '../../custom-index.ts';\r\nimport type {\r\n    PreparedQuery,\r\n    QueryMatcher,\r\n    RxDocumentData,\r\n    RxStorageQueryResult\r\n} from '../../types/index.d.ts';\r\nimport { ensureNotFalsy } from '../../plugins/utils/index.ts';\r\nimport { getQueryMatcher, getSortComparator } from '../../rx-query-helper.ts';\r\nimport { RxStorageInstanceDenoKV } from \"./rx-storage-instance-denokv.ts\";\r\nimport { DENOKV_DOCUMENT_ROOT_PATH, getDenoKVIndexName } from \"./denokv-helper.ts\";\r\n\r\nexport async function queryDenoKV<RxDocType>(\r\n    instance: RxStorageInstanceDenoKV<RxDocType>,\r\n    preparedQuery: PreparedQuery<RxDocType>\r\n): Promise<RxStorageQueryResult<RxDocType>> {\r\n    const queryPlan = preparedQuery.queryPlan;\r\n    const query = preparedQuery.query;\r\n    const skip = query.skip ? query.skip : 0;\r\n    const limit = query.limit ? query.limit : Infinity;\r\n    const skipPlusLimit = skip + limit;\r\n    const queryPlanFields: string[] = queryPlan.index;\r\n    const mustManuallyResort = !queryPlan.sortSatisfiedByIndex;\r\n\r\n\r\n    let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\r\n    if (!queryPlan.selectorSatisfiedByIndex) {\r\n        queryMatcher = getQueryMatcher(\r\n            instance.schema,\r\n            preparedQuery.query\r\n        );\r\n    }\r\n\r\n    const kv = await instance.kvPromise;\r\n\r\n    const indexForName = queryPlanFields.slice(0);\r\n    const indexName = getDenoKVIndexName(indexForName);\r\n    const indexMeta = ensureNotFalsy(instance.internals.indexes[indexName]);\r\n\r\n    let lowerBound: any[] = queryPlan.startKeys;\r\n    let lowerBoundString = getStartIndexStringFromLowerBound(\r\n        instance.schema,\r\n        indexForName,\r\n        lowerBound\r\n    );\r\n    if (!queryPlan.inclusiveStart) {\r\n        lowerBoundString = changeIndexableStringByOneQuantum(lowerBoundString, 1);\r\n    }\r\n\r\n    let upperBound: any[] = queryPlan.endKeys;\r\n    let upperBoundString = getStartIndexStringFromUpperBound(\r\n        instance.schema,\r\n        indexForName,\r\n        upperBound\r\n    );\r\n\r\n    if (queryPlan.inclusiveEnd) {\r\n        upperBoundString = changeIndexableStringByOneQuantum(upperBoundString, +1);\r\n    }\r\n\r\n\r\n    let result: RxDocumentData<RxDocType>[] = [];\r\n\r\n\r\n    /**\r\n     * TODO for whatever reason the keySelectors like firstGreaterThan etc.\r\n     * do not work properly. So we have to hack here to find the correct\r\n     * document in case lowerBoundString===upperBoundString.\r\n     * This likely must be fixed in the foundationdb library.\r\n     * When it is fixed, we do not need this if-case and instead\r\n     * can rely on .getRangeBatch() in all cases.\r\n     */\r\n    if (lowerBoundString === upperBoundString) {\r\n        const singleDocResult = await kv.get([instance.keySpace, indexMeta.indexId, lowerBoundString], instance.kvOptions);\r\n        if (singleDocResult.value) {\r\n            const docId: string = singleDocResult.value;\r\n            const docDataResult = await kv.get([instance.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], instance.kvOptions);\r\n            const docData = ensureNotFalsy(docDataResult.value);\r\n            if (!queryMatcher || queryMatcher(docData)) {\r\n                result.push(docData);\r\n            }\r\n        }\r\n        return {\r\n            documents: result\r\n        };\r\n    }\r\n\r\n    const range = kv.list({\r\n        start: [instance.keySpace, indexMeta.indexId, lowerBoundString],\r\n        end: [instance.keySpace, indexMeta.indexId, upperBoundString]\r\n    }, {\r\n        consistency: instance.settings.consistencyLevel,\r\n        limit: (!mustManuallyResort && queryPlan.selectorSatisfiedByIndex) ? skipPlusLimit : undefined,\r\n        batchSize: instance.settings.batchSize\r\n    });\r\n\r\n    for await (const indexDocEntry of range) {\r\n        const docId = indexDocEntry.value;\r\n        const docDataResult = await kv.get([instance.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], instance.kvOptions);\r\n        const docData = ensureNotFalsy(docDataResult.value);\r\n        if (!queryMatcher || queryMatcher(docData)) {\r\n            result.push(docData);\r\n        }\r\n        if (\r\n            !mustManuallyResort &&\r\n            result.length === skipPlusLimit\r\n        ) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (mustManuallyResort) {\r\n        const sortComparator = getSortComparator(instance.schema, preparedQuery.query);\r\n        result = result.sort(sortComparator);\r\n    }\r\n\r\n    // apply skip and limit boundaries.\r\n    result = result.slice(skip, skipPlusLimit);\r\n\r\n    return {\r\n        documents: result\r\n    };\r\n}\r\n"],"mappings":"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","ignoreList":[]}