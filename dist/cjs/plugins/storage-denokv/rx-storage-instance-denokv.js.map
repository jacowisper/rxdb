{"version":3,"file":"rx-storage-instance-denokv.js","names":["_rxjs","require","_rxSchemaHelper","_rxStorageMultiinstance","_denokvHelper","_customIndex","_utilsArray","_utilsOther","_rxStorageHelper","_utilsTime","_denokvQuery","_queryPlanner","_utilsObject","RxStorageInstanceDenoKV","exports","storage","databaseName","collectionName","schema","internals","options","settings","keySpace","version","join","kvOptions","consistency","consistencyLevel","changes$","Subject","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","kvPromise","getDenoGlobal","openKv","openKvPath","then","kv","set","_proto","prototype","retryUntilNoWriteInBetween","fn","writeBlockKeyBefore","get","writeBlockValueBefore","value","result","writeBlockKeyAfter","writeBlockValueAfter","bulkWrite","documentWrites","context","_this","ret","error","batches","batchArray","ensureNotFalsy","batchSize","writeBatch","_loop","writeBlockKey","docsInDB","Map","readManyBatches","Promise","all","map","readManyBatch","docsResult","getMany","writeRow","docId","document","DENOKV_DOCUMENT_ROOT_PATH","row","docData","categorized","categorizeBulkWriteRows","tx","atomic","check","bulkInsertDocs","forEach","Object","values","indexes","indexMeta","indexString","getIndexableString","indexId","bulkUpdateDocs","oldIndexString","previous","newIndexString","delete","txResult","commit","err","message","includes","ok","appendToArray","errors","eventBulk","events","length","lastState","newestRow","checkpoint","id","lwt","_meta","next","findDocumentsById","ids","withDeleted","kvKey","findSingleResult","docInDb","_deleted","push","query","preparedQuery","queryDenoKV","count","documents","mode","getAttachmentData","documentId","attachmentId","digest","Error","changeStream","asObservable","cleanup","minimumDeletedTime","_this2","maxDeletionTime","now","index","CLEANUP_INDEX","indexName","getDenoKVIndexName","lowerBoundString","getStartIndexStringFromLowerBound","upperBoundString","noMoreUndeleted","range","list","start","end","limit","rangeCount","_loop2","docDataResult","indexMetaInner","_ret","close","closed","complete","remove","ensureNotClosed","INDEX_MAX","promises","key","createDenoKVStorageInstance","params","flatClone","indexDBs","useIndexes","slice","useIndexesFinal","indexAr","toArray","getIndexableStringMonad","instance","addRxStorageMultiInstanceSupport","RX_STORAGE_NAME_DENOKV","resolve"],"sources":["../../../../src/plugins/storage-denokv/rx-storage-instance-denokv.ts"],"sourcesContent":["\r\nimport {\r\n    Subject,\r\n    Observable\r\n} from 'rxjs';\r\nimport type {\r\n    RxStorageInstance,\r\n    RxStorageChangeEvent,\r\n    RxDocumentData,\r\n    BulkWriteRow,\r\n    RxStorageBulkWriteResponse,\r\n    RxStorageQueryResult,\r\n    RxJsonSchema,\r\n    RxStorageInstanceCreationParams,\r\n    EventBulk,\r\n    StringKeys,\r\n    RxStorageDefaultCheckpoint,\r\n    RxStorageCountResult,\r\n    PreparedQuery\r\n} from '../../types/index.d.ts';\r\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\r\nimport { addRxStorageMultiInstanceSupport } from '../../rx-storage-multiinstance.ts';\r\nimport type { DenoKVIndexMeta, DenoKVSettings, DenoKVStorageInternals } from './denokv-types.ts';\r\nimport { RxStorageDenoKV } from './index.ts';\r\nimport { CLEANUP_INDEX, DENOKV_DOCUMENT_ROOT_PATH, RX_STORAGE_NAME_DENOKV, getDenoGlobal, getDenoKVIndexName } from \"./denokv-helper.ts\";\r\nimport { getIndexableStringMonad, getStartIndexStringFromLowerBound } from \"../../custom-index.ts\";\r\nimport { appendToArray, batchArray, lastOfArray, toArray } from \"../utils/utils-array.ts\";\r\nimport { ensureNotFalsy } from \"../utils/utils-other.ts\";\r\nimport { categorizeBulkWriteRows } from \"../../rx-storage-helper.ts\";\r\nimport { now } from \"../utils/utils-time.ts\";\r\nimport { queryDenoKV } from \"./denokv-query.ts\";\r\nimport { INDEX_MAX } from \"../../query-planner.ts\";\r\nimport { PROMISE_RESOLVE_VOID } from \"../utils/utils-promise.ts\";\r\nimport { flatClone } from \"../utils/utils-object.ts\";\r\n\r\n\r\n\r\nexport class RxStorageInstanceDenoKV<RxDocType> implements RxStorageInstance<\r\n    RxDocType,\r\n    DenoKVStorageInternals<RxDocType>,\r\n    DenoKVSettings,\r\n    RxStorageDefaultCheckpoint\r\n> {\r\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\r\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\r\n    public closed?: Promise<void>;\r\n    public readonly kvPromise: Promise<any>;\r\n\r\n    constructor(\r\n        public readonly storage: RxStorageDenoKV,\r\n        public readonly databaseName: string,\r\n        public readonly collectionName: string,\r\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\r\n        public readonly internals: DenoKVStorageInternals<RxDocType>,\r\n        public readonly options: Readonly<DenoKVSettings>,\r\n        public readonly settings: DenoKVSettings,\r\n        public readonly keySpace = ['rxdb', databaseName, collectionName, schema.version].join('|'),\r\n        public readonly kvOptions = { consistency: settings.consistencyLevel }\r\n    ) {\r\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\r\n        this.kvPromise = getDenoGlobal().openKv(settings.openKvPath).then(async (kv: any) => {\r\n            // insert writeBlockKey\r\n            await kv.set([this.keySpace], 1);\r\n            return kv;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * DenoKV has no transactions\r\n     * so we have to ensure that there is no write in between our queries\r\n     * which would confuse RxDB and return wrong query results.\r\n     */\r\n    async retryUntilNoWriteInBetween<T>(\r\n        fn: () => Promise<T>\r\n    ): Promise<T> {\r\n        const kv = await this.kvPromise;\r\n        while (true) {\r\n            const writeBlockKeyBefore = await kv.get([this.keySpace], this.kvOptions);\r\n            const writeBlockValueBefore = writeBlockKeyBefore ? writeBlockKeyBefore.value : -1;\r\n            const result = await fn();\r\n            const writeBlockKeyAfter = await kv.get([this.keySpace], this.kvOptions);\r\n            const writeBlockValueAfter = writeBlockKeyAfter ? writeBlockKeyAfter.value : -1;\r\n\r\n            if (writeBlockValueBefore === writeBlockValueAfter) {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[], context: string): Promise<RxStorageBulkWriteResponse<RxDocType>> {\r\n        const kv = await this.kvPromise;\r\n        const primaryPath = this.primaryPath;\r\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\r\n            error: []\r\n        };\r\n\r\n        const batches = batchArray(documentWrites, ensureNotFalsy(this.settings.batchSize));\r\n\r\n        /**\r\n         * DenoKV does not have transactions\r\n         * so we use a special writeBlock row to ensure\r\n         * atomic writes (per document)\r\n         * and so that we can do bulkWrites\r\n         */\r\n        for (const writeBatch of batches) {\r\n            while (true) {\r\n                const writeBlockKey = await kv.get([this.keySpace], this.kvOptions);\r\n                const docsInDB = new Map<string, RxDocumentData<RxDocType>>();\r\n\r\n                /**\r\n                 * The max amount for .getMany() is 10 which is defined by deno itself:\r\n                 * @link https://docs.deno.com/deploy/kv/manual/transactions/\r\n                 * @link https://github.com/denoland/deno/issues/19284\r\n                 */\r\n                const readManyBatches = batchArray(writeBatch, 10);\r\n                await Promise.all(\r\n                    readManyBatches.map(async (readManyBatch) => {\r\n                        const docsResult = await kv.getMany(\r\n                            readManyBatch.map(writeRow => {\r\n                                const docId: string = writeRow.document[primaryPath] as any;\r\n                                return [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId];\r\n                            })\r\n                        );\r\n                        docsResult.map((row: any) => {\r\n                            const docData = row.value;\r\n                            if (!docData) {\r\n                                return;\r\n                            }\r\n                            const docId: string = docData[primaryPath] as any;\r\n                            docsInDB.set(docId, docData);\r\n                        });\r\n                    })\r\n                );\r\n                const categorized = categorizeBulkWriteRows<RxDocType>(\r\n                    this,\r\n                    this.primaryPath as any,\r\n                    docsInDB,\r\n                    writeBatch,\r\n                    context\r\n                );\r\n\r\n                let tx = kv.atomic();\r\n                tx = tx.set([this.keySpace], ensureNotFalsy(writeBlockKey.value) + 1);\r\n                tx = tx.check(writeBlockKey);\r\n\r\n                // INSERTS\r\n                categorized.bulkInsertDocs.forEach(writeRow => {\r\n                    const docId: string = writeRow.document[this.primaryPath] as any;\r\n\r\n                    // insert document data\r\n                    tx = tx.set([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], writeRow.document);\r\n\r\n                    // insert secondary indexes\r\n                    Object.values(this.internals.indexes).forEach(indexMeta => {\r\n                        const indexString = indexMeta.getIndexableString(writeRow.document as any);\r\n                        tx = tx.set([this.keySpace, indexMeta.indexId, indexString], docId);\r\n                    });\r\n                });\r\n                // UPDATES\r\n                categorized.bulkUpdateDocs.forEach((writeRow: BulkWriteRow<RxDocType>) => {\r\n                    const docId: string = writeRow.document[this.primaryPath] as any;\r\n\r\n                    // insert document data\r\n                    tx = tx.set([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], writeRow.document);\r\n\r\n                    // insert secondary indexes\r\n                    Object.values(this.internals.indexes).forEach(indexMeta => {\r\n                        const oldIndexString = indexMeta.getIndexableString(ensureNotFalsy(writeRow.previous));\r\n                        const newIndexString = indexMeta.getIndexableString(writeRow.document as any);\r\n                        if (oldIndexString !== newIndexString) {\r\n                            tx = tx.delete([this.keySpace, indexMeta.indexId, oldIndexString]);\r\n                            tx = tx.set([this.keySpace, indexMeta.indexId, newIndexString], docId);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                let txResult;\r\n                try {\r\n                    txResult = await tx.commit();\r\n                } catch (err: any) {\r\n                    if (\r\n                        err.message.includes('Error code 5:') ||\r\n                        err.message.includes('Error code 517:') ||\r\n                        err.message.includes('database is locked')\r\n                    ) {\r\n                        // retry\r\n                    } else {\r\n                        throw err;\r\n                    }\r\n                }\r\n                if (txResult && txResult.ok) {\r\n                    appendToArray(ret.error, categorized.errors);\r\n                    if (categorized.eventBulk.events.length > 0) {\r\n                        const lastState = ensureNotFalsy(categorized.newestRow).document;\r\n                        categorized.eventBulk.checkpoint = {\r\n                            id: lastState[primaryPath],\r\n                            lwt: lastState._meta.lwt\r\n                        };\r\n                        this.changes$.next(categorized.eventBulk);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    async findDocumentsById(ids: string[], withDeleted: boolean): Promise<RxDocumentData<RxDocType>[]> {\r\n        const kv = await this.kvPromise;\r\n        const ret: RxDocumentData<RxDocType>[] = [];\r\n        await Promise.all(\r\n            ids.map(async (docId) => {\r\n                const kvKey = [this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId];\r\n                const findSingleResult = await kv.get(kvKey, this.kvOptions);\r\n                const docInDb = findSingleResult.value;\r\n                if (\r\n                    docInDb &&\r\n                    (\r\n                        !docInDb._deleted ||\r\n                        withDeleted\r\n                    )\r\n                ) {\r\n                    ret.push(docInDb);\r\n                }\r\n            })\r\n        );\r\n        return ret;\r\n    }\r\n    query(preparedQuery: PreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\r\n        return this.retryUntilNoWriteInBetween(\r\n            () => queryDenoKV(this, preparedQuery)\r\n        );\r\n    }\r\n    async count(preparedQuery: PreparedQuery<RxDocType>): Promise<RxStorageCountResult> {\r\n        /**\r\n         * At this point in time (end 2023), DenoKV does not support\r\n         * range counts. So we have to run a normal query and use the result set length.\r\n         * @link https://github.com/denoland/deno/issues/18965\r\n         */\r\n        const result = await this.retryUntilNoWriteInBetween(\r\n            () => this.query(preparedQuery)\r\n        );\r\n        return {\r\n            count: result.documents.length,\r\n            mode: 'fast'\r\n        };\r\n    }\r\n    getAttachmentData(documentId: string, attachmentId: string, digest: string): Promise<string> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    changeStream() {\r\n        return this.changes$.asObservable();\r\n    }\r\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\r\n        const maxDeletionTime = now() - minimumDeletedTime;\r\n        const kv = await this.kvPromise;\r\n        const index = CLEANUP_INDEX;\r\n        const indexName = getDenoKVIndexName(index);\r\n        const indexMeta = this.internals.indexes[indexName];\r\n        const lowerBoundString = getStartIndexStringFromLowerBound(\r\n            this.schema,\r\n            index,\r\n            [\r\n                true,\r\n                /**\r\n                 * Do not use 0 here,\r\n                 * because 1 is the minimum value for _meta.lwt\r\n                 */\r\n                1\r\n            ]\r\n        );\r\n        const upperBoundString = getStartIndexStringFromLowerBound(\r\n            this.schema,\r\n            index,\r\n            [\r\n                true,\r\n                maxDeletionTime\r\n            ]\r\n        );\r\n        let noMoreUndeleted: boolean = true;\r\n\r\n        const range = kv.list({\r\n            start: [this.keySpace, indexMeta.indexId, lowerBoundString],\r\n            end: [this.keySpace, indexMeta.indexId, upperBoundString]\r\n        }, {\r\n            consistency: this.settings.consistencyLevel,\r\n            batchSize: this.settings.batchSize,\r\n            limit: this.settings.batchSize\r\n        });\r\n\r\n        let rangeCount = 0;\r\n        for await (const row of range) {\r\n            rangeCount = rangeCount + 1;\r\n            const docId = row.value;\r\n            const docDataResult = await kv.get([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId], this.kvOptions);\r\n            if (!docDataResult.value) {\r\n                continue;\r\n            }\r\n            const docData = ensureNotFalsy(docDataResult.value);\r\n            if (\r\n                !docData._deleted ||\r\n                docData._meta.lwt > maxDeletionTime\r\n            ) {\r\n                continue;\r\n            }\r\n\r\n\r\n            let tx = kv.atomic();\r\n            tx = tx.check(docDataResult);\r\n            tx = tx.delete([this.keySpace, DENOKV_DOCUMENT_ROOT_PATH, docId]);\r\n            Object\r\n                .values(this.internals.indexes)\r\n                .forEach(indexMetaInner => {\r\n                    tx = tx.delete([this.keySpace, indexMetaInner.indexId, docId]);\r\n                });\r\n            await tx.commit();\r\n        }\r\n        return noMoreUndeleted;\r\n    }\r\n    async close(): Promise<void> {\r\n        if (this.closed) {\r\n            return this.closed;\r\n        }\r\n        this.closed = (async () => {\r\n            this.changes$.complete();\r\n            const kv = await this.kvPromise;\r\n            await kv.close();\r\n        })();\r\n        return this.closed;\r\n    }\r\n    async remove(): Promise<void> {\r\n        ensureNotClosed(this);\r\n        const kv = await this.kvPromise;\r\n        const range = kv.list({\r\n            start: [this.keySpace],\r\n            end: [this.keySpace, INDEX_MAX]\r\n        }, {\r\n            consistency: this.settings.consistencyLevel,\r\n            batchSize: this.settings.batchSize\r\n        });\r\n        let promises: Promise<any>[] = [];\r\n        for await (const row of range) {\r\n            promises.push(kv.delete(row.key));\r\n        }\r\n\r\n        await Promise.all(promises);\r\n        return this.close();\r\n    }\r\n}\r\n\r\n\r\n\r\nexport async function createDenoKVStorageInstance<RxDocType>(\r\n    storage: RxStorageDenoKV,\r\n    params: RxStorageInstanceCreationParams<RxDocType, DenoKVSettings>,\r\n    settings: DenoKVSettings\r\n): Promise<RxStorageInstanceDenoKV<RxDocType>> {\r\n    settings = flatClone(settings);\r\n    if (!settings.batchSize) {\r\n        settings.batchSize = 100;\r\n    }\r\n\r\n    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\r\n\r\n    const indexDBs: { [indexName: string]: DenoKVIndexMeta<RxDocType>; } = {};\r\n    const useIndexes = params.schema.indexes ? params.schema.indexes.slice(0) : [];\r\n    useIndexes.push([primaryPath]);\r\n    const useIndexesFinal = useIndexes.map(index => {\r\n        const indexAr = toArray(index);\r\n        return indexAr;\r\n    });\r\n    useIndexesFinal.push(CLEANUP_INDEX);\r\n    useIndexesFinal.forEach((indexAr, indexId) => {\r\n        const indexName = getDenoKVIndexName(indexAr);\r\n        indexDBs[indexName] = {\r\n            indexId: '|' + indexId + '|',\r\n            indexName,\r\n            getIndexableString: getIndexableStringMonad(params.schema, indexAr),\r\n            index: indexAr\r\n        };\r\n    });\r\n\r\n    const internals = {\r\n        indexes: indexDBs\r\n    };\r\n    const instance = new RxStorageInstanceDenoKV(\r\n        storage,\r\n        params.databaseName,\r\n        params.collectionName,\r\n        params.schema,\r\n        internals,\r\n        params.options,\r\n        settings\r\n    );\r\n\r\n    await addRxStorageMultiInstanceSupport(\r\n        RX_STORAGE_NAME_DENOKV,\r\n        params,\r\n        instance\r\n    );\r\n\r\n    return Promise.resolve(instance);\r\n}\r\n\r\n\r\n\r\nfunction ensureNotClosed(\r\n    instance: RxStorageInstanceDenoKV<any>\r\n) {\r\n    if (instance.closed) {\r\n        throw new Error('RxStorageInstanceDenoKV is closed ' + instance.databaseName + '-' + instance.collectionName);\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]}