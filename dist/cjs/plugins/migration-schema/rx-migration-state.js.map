{"version":3,"file":"rx-migration-state.js","names":["_rxjs","require","_rxError","_migrationHelpers","_index","_rxStorageHelper","_broadcastChannel","_index2","_overwritable","_rxDatabaseInternalStore","_rxQueryHelper","RxMigrationState","exports","collection","migrationStrategies","statusDocKey","name","schema","version","join","started","updateStatusHandlers","updateStatusQueue","PROMISE_RESOLVE_TRUE","database","oldCollectionMeta","getOldCollectionMeta","mustMigrate","statusDocId","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_MIGRATION_STATUS","addMigrationStateToDatabase","$","observeSingle","internalStore","pipe","filter","d","map","ensureNotFalsy","data","shareReplay","RXJS_SHARE_REPLAY_DEFAULTS","_proto","prototype","getStatus","firstValueFrom","startMigration","batchSize","MIGRATION_DEFAULT_BATCH_SIZE","must","newRxError","broadcastChannel","undefined","multiInstance","BroadcastChannel","leaderElector","createLeaderElection","awaitLeadership","oldStorageInstance","storage","createStorageInstance","databaseName","collectionName","databaseInstanceToken","token","options","password","devMode","overwritable","isDevMode","connectedInstances","getConnectedStorageInstances","totalCount","countAllDoucments","concat","r","oldStorage","updateStatus","s","count","total","Promise","all","connectedInstance","addConnectedStorageToCollection","newStorage","migrateStorage","close","storageInstance","originalStorageInstance","err","status","error","errorToPlainJson","writeSingle","previous","document","Object","assign","_deleted","handler","push","then","length","useHandlers","getSingleDocument","newDoc","clone","id","key","context","handled","percent","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_attachments","oneHandler","Math","round","deepEqual","isBulkWriteConflictError","replicationMetaStorageInstance","getRxReplicationMetaInstanceSchema","hasEncryption","replicationHandlerBase","rxStorageInstanceToReplicationHandler","defaultConflictHandler","replicationState","replicateRxStorageInstance","keepMeta","identifier","replicationHandler","masterChangesSince","resolve","checkpoint","documents","masterWrite","rows","row","newDocData","newDocumentState","title","META_INSTANCE_SCHEMA_TITLE","docData","isCheckpoint","assumedMasterState","migratedDocData","migrateDocumentData","newRow","result","masterChangeStream$","Subject","asObservable","forkInstance","metaInstance","pushBatchSize","pullBatchSize","conflictHandler","hashFunction","hasError","events","subscribe","processed","up","awaitRxStorageReplicationFirstInSync","cancelRxStorageReplication","remove","storageInstances","ret","instance","preparedQuery","prepareQuery","normalizeMangoQuery","selector","countResult","connectedStorages","connectedStorage","Error","newSchema","jsonSchema","migratePromise","race"],"sources":["../../../../src/plugins/migration-schema/rx-migration-state.ts"],"sourcesContent":["import {\r\n    Observable,\r\n    Subject,\r\n    filter,\r\n    firstValueFrom,\r\n    map,\r\n    shareReplay\r\n} from 'rxjs';\r\nimport {\r\n    isBulkWriteConflictError,\r\n    newRxError\r\n} from '../../rx-error.ts';\r\nimport type {\r\n    NumberFunctionMap,\r\n    RxCollection,\r\n    RxDatabase,\r\n    RxError,\r\n    RxReplicationWriteToMasterRow,\r\n    RxStorageInstance,\r\n    RxTypeError\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    MIGRATION_DEFAULT_BATCH_SIZE,\r\n    addMigrationStateToDatabase,\r\n    getOldCollectionMeta,\r\n    migrateDocumentData,\r\n    mustMigrate\r\n} from './migration-helpers.ts';\r\nimport {\r\n    PROMISE_RESOLVE_TRUE,\r\n    RXJS_SHARE_REPLAY_DEFAULTS,\r\n    clone,\r\n    deepEqual,\r\n    ensureNotFalsy,\r\n    errorToPlainJson,\r\n    getDefaultRevision,\r\n    getDefaultRxDocumentMeta\r\n} from '../utils/index.ts';\r\nimport type {\r\n    MigrationStatusUpdate,\r\n    RxMigrationStatus,\r\n    RxMigrationStatusDocument\r\n} from './migration-types.ts';\r\nimport {\r\n    getSingleDocument,\r\n    hasEncryption,\r\n    observeSingle,\r\n    writeSingle\r\n} from '../../rx-storage-helper.ts';\r\nimport {\r\n    BroadcastChannel,\r\n    createLeaderElection\r\n} from 'broadcast-channel';\r\nimport {\r\n    META_INSTANCE_SCHEMA_TITLE,\r\n    awaitRxStorageReplicationFirstInSync,\r\n    cancelRxStorageReplication,\r\n    defaultConflictHandler,\r\n    getRxReplicationMetaInstanceSchema,\r\n    replicateRxStorageInstance,\r\n    rxStorageInstanceToReplicationHandler\r\n} from '../../replication-protocol/index.ts';\r\nimport { overwritable } from '../../overwritable.ts';\r\nimport {\r\n    INTERNAL_CONTEXT_MIGRATION_STATUS,\r\n    addConnectedStorageToCollection,\r\n    getPrimaryKeyOfInternalDocument\r\n} from '../../rx-database-internal-store.ts';\r\nimport { normalizeMangoQuery, prepareQuery } from '../../rx-query-helper.ts';\r\n\r\n\r\n\r\nexport class RxMigrationState {\r\n\r\n    public database: RxDatabase;\r\n\r\n\r\n    private started: boolean = false;\r\n    public readonly oldCollectionMeta: ReturnType<typeof getOldCollectionMeta>;\r\n    public readonly mustMigrate: ReturnType<typeof mustMigrate>;\r\n    public readonly statusDocId: string;\r\n    public readonly $: Observable<RxMigrationStatus>;\r\n\r\n    constructor(\r\n        public readonly collection: RxCollection,\r\n        public readonly migrationStrategies: NumberFunctionMap,\r\n        public readonly statusDocKey = [\r\n            collection.name,\r\n            'v',\r\n            collection.schema.version\r\n        ].join('-'),\r\n    ) {\r\n        this.database = collection.database;\r\n        this.oldCollectionMeta = getOldCollectionMeta(this);\r\n        this.mustMigrate = mustMigrate(this);\r\n        this.statusDocId = getPrimaryKeyOfInternalDocument(\r\n            this.statusDocKey,\r\n            INTERNAL_CONTEXT_MIGRATION_STATUS\r\n        );\r\n        addMigrationStateToDatabase(this);\r\n\r\n        this.$ = observeSingle<RxMigrationStatusDocument>(\r\n            this.database.internalStore,\r\n            this.statusDocId\r\n        ).pipe(\r\n            filter(d => !!d),\r\n            map(d => ensureNotFalsy(d).data),\r\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS)\r\n        );\r\n    }\r\n\r\n    getStatus() {\r\n        return firstValueFrom(this.$);\r\n    }\r\n\r\n\r\n    /**\r\n     * Starts the migration.\r\n     * Returns void so that people to not get the idea to await\r\n     * this function.\r\n     * Instead use migratePromise() if you want to await\r\n     * the migration. This ensures it works even if the migration\r\n     * is run on a different browser tab.\r\n     */\r\n    async startMigration(batchSize: number = MIGRATION_DEFAULT_BATCH_SIZE): Promise<void> {\r\n        const must = await this.mustMigrate;\r\n        if (!must) {\r\n            return;\r\n        }\r\n        if (this.started) {\r\n            throw newRxError('DM1');\r\n        }\r\n        this.started = true;\r\n\r\n\r\n        let broadcastChannel: BroadcastChannel | undefined = undefined;\r\n        /**\r\n         * To ensure that multiple tabs do not migrate the same collection,\r\n         * we use a new broadcastChannel/leaderElector for each collection.\r\n         * This is required because collections can be added dynamically and\r\n         * not all tabs might know about this collection.\r\n         */\r\n        if (this.database.multiInstance) {\r\n            broadcastChannel = new BroadcastChannel([\r\n                'rx-migration-state',\r\n                this.database.name,\r\n                this.collection.name,\r\n                this.collection.schema.version\r\n            ].join('|'));\r\n            const leaderElector = createLeaderElection(broadcastChannel);\r\n            await leaderElector.awaitLeadership();\r\n        }\r\n\r\n        /**\r\n         * Instead of writing a custom migration protocol,\r\n         * we do a push-only replication from the old collection data to the new one.\r\n         * This also ensure that restarting the replication works without problems.\r\n         */\r\n        const oldCollectionMeta = await this.oldCollectionMeta;\r\n        const oldStorageInstance = await this.database.storage.createStorageInstance({\r\n            databaseName: this.database.name,\r\n            collectionName: this.collection.name,\r\n            databaseInstanceToken: this.database.token,\r\n            multiInstance: this.database.multiInstance,\r\n            options: {},\r\n            schema: oldCollectionMeta.data.schema,\r\n            password: this.database.password,\r\n            devMode: overwritable.isDevMode()\r\n        });\r\n\r\n\r\n        const connectedInstances = await this.getConnectedStorageInstances();\r\n\r\n\r\n        /**\r\n         * Initially write the migration status into a meta document.\r\n         */\r\n        const totalCount = await this.countAllDoucments(\r\n            [oldStorageInstance].concat(connectedInstances.map(r => r.oldStorage))\r\n        );\r\n        await this.updateStatus(s => {\r\n            s.count.total = totalCount;\r\n            return s;\r\n        });\r\n\r\n\r\n        try {\r\n            /**\r\n             * First migrate the connected storages,\r\n             * afterwards migrate the normal collection.\r\n             */\r\n            await Promise.all(\r\n                connectedInstances.map(async (connectedInstance) => {\r\n                    await addConnectedStorageToCollection(\r\n                        this.collection,\r\n                        connectedInstance.newStorage.collectionName,\r\n                        connectedInstance.newStorage.schema\r\n                    );\r\n                    await this.migrateStorage(\r\n                        connectedInstance.oldStorage,\r\n                        connectedInstance.newStorage,\r\n                        batchSize\r\n                    );\r\n                    await connectedInstance.newStorage.close();\r\n                })\r\n            );\r\n\r\n            await this.migrateStorage(\r\n                oldStorageInstance,\r\n                /**\r\n                 * Use the originalStorageInstance here\r\n                 * so that the _meta.lwt time keeps the same\r\n                 * and our replication checkpoints still point to the\r\n                 * correct checkpoint.\r\n                 */\r\n                this.collection.storageInstance.originalStorageInstance,\r\n                batchSize\r\n            );\r\n        } catch (err) {\r\n            await oldStorageInstance.close();\r\n            await this.updateStatus(s => {\r\n                s.status = 'ERROR';\r\n                s.error = errorToPlainJson(err as Error);\r\n                return s;\r\n            });\r\n            return;\r\n        }\r\n\r\n\r\n        // remove old collection meta doc\r\n        await writeSingle(\r\n            this.database.internalStore,\r\n            {\r\n                previous: oldCollectionMeta,\r\n                document: Object.assign(\r\n                    {},\r\n                    oldCollectionMeta,\r\n                    {\r\n                        _deleted: true\r\n                    }\r\n                )\r\n            },\r\n            'rx-migration-remove-collection-meta'\r\n        );\r\n\r\n        await this.updateStatus(s => {\r\n            s.status = 'DONE';\r\n            return s;\r\n        });\r\n        if (broadcastChannel) {\r\n            await broadcastChannel.close();\r\n        }\r\n    }\r\n\r\n    public updateStatusHandlers: MigrationStatusUpdate[] = [];\r\n    public updateStatusQueue: Promise<any> = PROMISE_RESOLVE_TRUE;\r\n    public updateStatus(\r\n        handler: MigrationStatusUpdate\r\n    ) {\r\n        this.updateStatusHandlers.push(handler);\r\n        this.updateStatusQueue = this.updateStatusQueue.then(async () => {\r\n            if (this.updateStatusHandlers.length === 0) {\r\n                return;\r\n            }\r\n            // re-run until no conflict\r\n            const useHandlers = this.updateStatusHandlers;\r\n            this.updateStatusHandlers = [];\r\n            while (true) {\r\n                const previous = await getSingleDocument<RxMigrationStatusDocument>(\r\n                    this.database.internalStore,\r\n                    this.statusDocId\r\n                );\r\n                let newDoc = clone(previous);\r\n                if (!previous) {\r\n                    newDoc = {\r\n                        id: this.statusDocId,\r\n                        key: this.statusDocKey,\r\n                        context: INTERNAL_CONTEXT_MIGRATION_STATUS,\r\n                        data: {\r\n                            collectionName: this.collection.name,\r\n                            status: 'RUNNING',\r\n                            count: {\r\n                                total: 0,\r\n                                handled: 0,\r\n                                percent: 0\r\n                            }\r\n                        },\r\n                        _deleted: false,\r\n                        _meta: getDefaultRxDocumentMeta(),\r\n                        _rev: getDefaultRevision(),\r\n                        _attachments: {}\r\n                    };\r\n                }\r\n\r\n                let status = ensureNotFalsy(newDoc).data;\r\n                for (const oneHandler of useHandlers) {\r\n                    status = oneHandler(status);\r\n                }\r\n                status.count.percent = Math.round((status.count.handled / status.count.total) * 100);\r\n\r\n                if (\r\n                    newDoc && previous &&\r\n                    deepEqual(newDoc.data, previous.data)\r\n                ) {\r\n                    break;\r\n                }\r\n\r\n\r\n                try {\r\n                    await writeSingle<RxMigrationStatusDocument>(\r\n                        this.database.internalStore,\r\n                        {\r\n                            previous,\r\n                            document: ensureNotFalsy(newDoc)\r\n                        },\r\n                        INTERNAL_CONTEXT_MIGRATION_STATUS\r\n                    );\r\n\r\n                    // write successful\r\n                    break;\r\n                } catch (err) {\r\n                    // ignore conflicts\r\n                    if (!isBulkWriteConflictError(err)) {\r\n                        throw err;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return this.updateStatusQueue;\r\n    }\r\n\r\n\r\n    public async migrateStorage(\r\n        oldStorage: RxStorageInstance<any, any, any>,\r\n        newStorage: RxStorageInstance<any, any, any>,\r\n        batchSize: number\r\n    ) {\r\n        const replicationMetaStorageInstance = await this.database.storage.createStorageInstance({\r\n            databaseName: this.database.name,\r\n            collectionName: 'rx-migration-state-meta-' + this.collection.name + '-' + this.collection.schema.version,\r\n            databaseInstanceToken: this.database.token,\r\n            multiInstance: this.database.multiInstance,\r\n            options: {},\r\n            schema: getRxReplicationMetaInstanceSchema(oldStorage.schema, hasEncryption(oldStorage.schema)),\r\n            password: this.database.password,\r\n            devMode: overwritable.isDevMode()\r\n        });\r\n\r\n        const replicationHandlerBase = rxStorageInstanceToReplicationHandler(\r\n            newStorage,\r\n            /**\r\n             * Ignore push-conflicts.\r\n             * If this happens we drop the 'old' document state.\r\n             */\r\n            defaultConflictHandler,\r\n            this.database.token,\r\n            true\r\n        );\r\n\r\n        const replicationState = replicateRxStorageInstance({\r\n            keepMeta: true,\r\n            identifier: [\r\n                'rx-migration-state',\r\n                this.collection.name,\r\n                oldStorage.schema.version,\r\n                this.collection.schema.version\r\n            ].join('-'),\r\n            replicationHandler: {\r\n                masterChangesSince() {\r\n                    return Promise.resolve({\r\n                        checkpoint: null,\r\n                        documents: []\r\n                    });\r\n                },\r\n                masterWrite: async (rows) => {\r\n                    rows = await Promise.all(\r\n                        rows\r\n                            .map(async (row) => {\r\n                                let newDocData = row.newDocumentState;\r\n                                if (newStorage.schema.title === META_INSTANCE_SCHEMA_TITLE) {\r\n                                    newDocData = row.newDocumentState.docData;\r\n                                    if (row.newDocumentState.isCheckpoint === '1') {\r\n                                        return {\r\n                                            assumedMasterState: undefined,\r\n                                            newDocumentState: row.newDocumentState\r\n                                        };\r\n                                    }\r\n                                }\r\n                                const migratedDocData: RxReplicationWriteToMasterRow<any> = await migrateDocumentData(\r\n                                    this.collection,\r\n                                    oldStorage.schema.version,\r\n                                    newDocData\r\n                                );\r\n                                const newRow: RxReplicationWriteToMasterRow<any> = {\r\n                                    // drop the assumed master state, we do not have to care about conflicts here.\r\n                                    assumedMasterState: undefined,\r\n                                    newDocumentState: newStorage.schema.title === META_INSTANCE_SCHEMA_TITLE\r\n                                        ? Object.assign({}, row.newDocumentState, { docData: migratedDocData })\r\n                                        : migratedDocData\r\n                                };\r\n                                return newRow;\r\n                            })\r\n                    );\r\n\r\n                    // filter out the documents where the migration strategy returned null\r\n                    rows = rows.filter(row => !!row.newDocumentState);\r\n\r\n                    const result = await replicationHandlerBase.masterWrite(rows);\r\n                    return result;\r\n                },\r\n                masterChangeStream$: new Subject<any>().asObservable()\r\n            },\r\n            forkInstance: oldStorage,\r\n            metaInstance: replicationMetaStorageInstance,\r\n            pushBatchSize: batchSize,\r\n            pullBatchSize: 0,\r\n            conflictHandler: defaultConflictHandler,\r\n            hashFunction: this.database.hashFunction\r\n        });\r\n\r\n\r\n        let hasError: RxError | RxTypeError | false = false;\r\n        replicationState.events.error.subscribe(err => hasError = err);\r\n\r\n        // update replication status on each change\r\n        replicationState.events.processed.up.subscribe(() => {\r\n            this.updateStatus(status => {\r\n                status.count.handled = status.count.handled + 1;\r\n                return status;\r\n            });\r\n        });\r\n\r\n        await awaitRxStorageReplicationFirstInSync(replicationState);\r\n        await cancelRxStorageReplication(replicationState);\r\n\r\n        await this.updateStatusQueue;\r\n        if (hasError) {\r\n            await replicationMetaStorageInstance.close();\r\n            throw hasError;\r\n        }\r\n\r\n        // cleanup old storages\r\n        await Promise.all([\r\n            oldStorage.remove(),\r\n            replicationMetaStorageInstance.remove()\r\n        ]);\r\n    }\r\n\r\n    public async countAllDoucments(\r\n        storageInstances: RxStorageInstance<any, any, any>[]\r\n    ): Promise<number> {\r\n        let ret = 0;\r\n        await Promise.all(\r\n            storageInstances.map(async (instance) => {\r\n\r\n                const preparedQuery = prepareQuery(\r\n                    instance.schema,\r\n                    normalizeMangoQuery(\r\n                        instance.schema,\r\n                        {\r\n                            selector: {}\r\n                        }\r\n                    )\r\n                );\r\n                const countResult = await instance.count(preparedQuery);\r\n                ret += countResult.count;\r\n            })\r\n        );\r\n        return ret;\r\n    }\r\n\r\n    public async getConnectedStorageInstances() {\r\n        const oldCollectionMeta = await this.oldCollectionMeta;\r\n        const ret: {\r\n            oldStorage: RxStorageInstance<any, any, any>;\r\n            newStorage: RxStorageInstance<any, any, any>;\r\n        }[] = [];\r\n\r\n        await Promise.all(\r\n            await Promise.all(\r\n                oldCollectionMeta\r\n                    .data\r\n                    .connectedStorages\r\n                    .map(async (connectedStorage) => {\r\n\r\n                        // atm we can only migrate replication states.\r\n                        if (connectedStorage.schema.title !== META_INSTANCE_SCHEMA_TITLE) {\r\n                            throw new Error('unknown migration handling for schema');\r\n                        }\r\n\r\n                        const newSchema = getRxReplicationMetaInstanceSchema(\r\n                            clone(this.collection.schema.jsonSchema),\r\n                            hasEncryption(connectedStorage.schema)\r\n                        );\r\n                        newSchema.version = this.collection.schema.version;\r\n                        const [oldStorage, newStorage] = await Promise.all([\r\n                            this.database.storage.createStorageInstance({\r\n                                databaseInstanceToken: this.database.token,\r\n                                databaseName: this.database.name,\r\n                                devMode: overwritable.isDevMode(),\r\n                                multiInstance: this.database.multiInstance,\r\n                                options: {},\r\n                                schema: connectedStorage.schema,\r\n                                password: this.database.password,\r\n                                collectionName: connectedStorage.collectionName\r\n                            }),\r\n                            this.database.storage.createStorageInstance({\r\n                                databaseInstanceToken: this.database.token,\r\n                                databaseName: this.database.name,\r\n                                devMode: overwritable.isDevMode(),\r\n                                multiInstance: this.database.multiInstance,\r\n                                options: {},\r\n                                schema: newSchema,\r\n                                password: this.database.password,\r\n                                collectionName: connectedStorage.collectionName\r\n                            })\r\n                        ]);\r\n                        ret.push({ oldStorage, newStorage });\r\n                    })\r\n            )\r\n        );\r\n\r\n        return ret;\r\n    }\r\n\r\n\r\n\r\n    async migratePromise(batchSize?: number): Promise<RxMigrationStatus> {\r\n        this.startMigration(batchSize);\r\n        const must = await this.mustMigrate;\r\n        if (!must) {\r\n            return {\r\n                status: 'DONE',\r\n                collectionName: this.collection.name,\r\n                count: {\r\n                    handled: 0,\r\n                    percent: 0,\r\n                    total: 0\r\n                }\r\n            };\r\n        }\r\n\r\n        const result = await Promise.race([\r\n            firstValueFrom(\r\n                this.$.pipe(\r\n                    filter(d => d.status === 'DONE')\r\n                )\r\n            ),\r\n            firstValueFrom(\r\n                this.$.pipe(\r\n                    filter(d => d.status === 'ERROR')\r\n                )\r\n            )\r\n        ]);\r\n\r\n        if (result.status === 'ERROR') {\r\n            throw newRxError('DM4', {\r\n                collection: this.collection.name,\r\n                error: result.error\r\n            });\r\n        } else {\r\n            return result;\r\n        }\r\n\r\n    }\r\n}\r\n"],"mappings":";;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AAQA,IAAAC,QAAA,GAAAD,OAAA;AAaA,IAAAE,iBAAA,GAAAF,OAAA;AAOA,IAAAG,MAAA,GAAAH,OAAA;AAeA,IAAAI,gBAAA,GAAAJ,OAAA;AAMA,IAAAK,iBAAA,GAAAL,OAAA;AAIA,IAAAM,OAAA,GAAAN,OAAA;AASA,IAAAO,aAAA,GAAAP,OAAA;AACA,IAAAQ,wBAAA,GAAAR,OAAA;AAKA,IAAAS,cAAA,GAAAT,OAAA;AAA6E,IAIhEU,gBAAgB,GAAAC,OAAA,CAAAD,gBAAA;EAWzB,SAAAA,iBACoBE,UAAwB,EACxBC,mBAAsC,EACtCC,YAAY,GAAG,CAC3BF,UAAU,CAACG,IAAI,EACf,GAAG,EACHH,UAAU,CAACI,MAAM,CAACC,OAAO,CAC5B,CAACC,IAAI,CAAC,GAAG,CAAC,EACb;IAAA,KAdMC,OAAO,GAAY,KAAK;IAAA,KAiLzBC,oBAAoB,GAA4B,EAAE;IAAA,KAClDC,iBAAiB,GAAiBC,2BAAoB;IAAA,KA3KzCV,UAAwB,GAAxBA,UAAwB;IAAA,KACxBC,mBAAsC,GAAtCA,mBAAsC;IAAA,KACtCC,YAAY,GAAZA,YAAY;IAM5B,IAAI,CAACS,QAAQ,GAAGX,UAAU,CAACW,QAAQ;IACnC,IAAI,CAACC,iBAAiB,GAAG,IAAAC,sCAAoB,EAAC,IAAI,CAAC;IACnD,IAAI,CAACC,WAAW,GAAG,IAAAA,6BAAW,EAAC,IAAI,CAAC;IACpC,IAAI,CAACC,WAAW,GAAG,IAAAC,wDAA+B,EAC9C,IAAI,CAACd,YAAY,EACjBe,0DACJ,CAAC;IACD,IAAAC,6CAA2B,EAAC,IAAI,CAAC;IAEjC,IAAI,CAACC,CAAC,GAAG,IAAAC,8BAAa,EAClB,IAAI,CAACT,QAAQ,CAACU,aAAa,EAC3B,IAAI,CAACN,WACT,CAAC,CAACO,IAAI,CACF,IAAAC,YAAM,EAACC,CAAC,IAAI,CAAC,CAACA,CAAC,CAAC,EAChB,IAAAC,SAAG,EAACD,CAAC,IAAI,IAAAE,qBAAc,EAACF,CAAC,CAAC,CAACG,IAAI,CAAC,EAChC,IAAAC,iBAAW,EAACC,iCAA0B,CAC1C,CAAC;EACL;EAAC,IAAAC,MAAA,GAAAhC,gBAAA,CAAAiC,SAAA;EAAAD,MAAA,CAEDE,SAAS,GAAT,SAAAA,SAASA,CAAA,EAAG;IACR,OAAO,IAAAC,oBAAc,EAAC,IAAI,CAACd,CAAC,CAAC;EACjC;;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,KAPI;EAAAW,MAAA,CAQMI,cAAc,GAApB,eAAMA,cAAcA,CAACC,SAAiB,GAAGC,8CAA4B,EAAiB;IAClF,IAAMC,IAAI,GAAG,MAAM,IAAI,CAACvB,WAAW;IACnC,IAAI,CAACuB,IAAI,EAAE;MACP;IACJ;IACA,IAAI,IAAI,CAAC9B,OAAO,EAAE;MACd,MAAM,IAAA+B,mBAAU,EAAC,KAAK,CAAC;IAC3B;IACA,IAAI,CAAC/B,OAAO,GAAG,IAAI;IAGnB,IAAIgC,gBAA8C,GAAGC,SAAS;IAC9D;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,IAAI,CAAC7B,QAAQ,CAAC8B,aAAa,EAAE;MAC7BF,gBAAgB,GAAG,IAAIG,kCAAgB,CAAC,CACpC,oBAAoB,EACpB,IAAI,CAAC/B,QAAQ,CAACR,IAAI,EAClB,IAAI,CAACH,UAAU,CAACG,IAAI,EACpB,IAAI,CAACH,UAAU,CAACI,MAAM,CAACC,OAAO,CACjC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC;MACZ,IAAMqC,aAAa,GAAG,IAAAC,sCAAoB,EAACL,gBAAgB,CAAC;MAC5D,MAAMI,aAAa,CAACE,eAAe,CAAC,CAAC;IACzC;;IAEA;AACR;AACA;AACA;AACA;IACQ,IAAMjC,iBAAiB,GAAG,MAAM,IAAI,CAACA,iBAAiB;IACtD,IAAMkC,kBAAkB,GAAG,MAAM,IAAI,CAACnC,QAAQ,CAACoC,OAAO,CAACC,qBAAqB,CAAC;MACzEC,YAAY,EAAE,IAAI,CAACtC,QAAQ,CAACR,IAAI;MAChC+C,cAAc,EAAE,IAAI,CAAClD,UAAU,CAACG,IAAI;MACpCgD,qBAAqB,EAAE,IAAI,CAACxC,QAAQ,CAACyC,KAAK;MAC1CX,aAAa,EAAE,IAAI,CAAC9B,QAAQ,CAAC8B,aAAa;MAC1CY,OAAO,EAAE,CAAC,CAAC;MACXjD,MAAM,EAAEQ,iBAAiB,CAACe,IAAI,CAACvB,MAAM;MACrCkD,QAAQ,EAAE,IAAI,CAAC3C,QAAQ,CAAC2C,QAAQ;MAChCC,OAAO,EAAEC,0BAAY,CAACC,SAAS,CAAC;IACpC,CAAC,CAAC;IAGF,IAAMC,kBAAkB,GAAG,MAAM,IAAI,CAACC,4BAA4B,CAAC,CAAC;;IAGpE;AACR;AACA;IACQ,IAAMC,UAAU,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAC3C,CAACf,kBAAkB,CAAC,CAACgB,MAAM,CAACJ,kBAAkB,CAACjC,GAAG,CAACsC,CAAC,IAAIA,CAAC,CAACC,UAAU,CAAC,CACzE,CAAC;IACD,MAAM,IAAI,CAACC,YAAY,CAACC,CAAC,IAAI;MACzBA,CAAC,CAACC,KAAK,CAACC,KAAK,GAAGR,UAAU;MAC1B,OAAOM,CAAC;IACZ,CAAC,CAAC;IAGF,IAAI;MACA;AACZ;AACA;AACA;MACY,MAAMG,OAAO,CAACC,GAAG,CACbZ,kBAAkB,CAACjC,GAAG,CAAC,MAAO8C,iBAAiB,IAAK;QAChD,MAAM,IAAAC,wDAA+B,EACjC,IAAI,CAACxE,UAAU,EACfuE,iBAAiB,CAACE,UAAU,CAACvB,cAAc,EAC3CqB,iBAAiB,CAACE,UAAU,CAACrE,MACjC,CAAC;QACD,MAAM,IAAI,CAACsE,cAAc,CACrBH,iBAAiB,CAACP,UAAU,EAC5BO,iBAAiB,CAACE,UAAU,EAC5BtC,SACJ,CAAC;QACD,MAAMoC,iBAAiB,CAACE,UAAU,CAACE,KAAK,CAAC,CAAC;MAC9C,CAAC,CACL,CAAC;MAED,MAAM,IAAI,CAACD,cAAc,CACrB5B,kBAAkB;MAClB;AAChB;AACA;AACA;AACA;AACA;MACgB,IAAI,CAAC9C,UAAU,CAAC4E,eAAe,CAACC,uBAAuB,EACvD1C,SACJ,CAAC;IACL,CAAC,CAAC,OAAO2C,GAAG,EAAE;MACV,MAAMhC,kBAAkB,CAAC6B,KAAK,CAAC,CAAC;MAChC,MAAM,IAAI,CAACV,YAAY,CAACC,CAAC,IAAI;QACzBA,CAAC,CAACa,MAAM,GAAG,OAAO;QAClBb,CAAC,CAACc,KAAK,GAAG,IAAAC,uBAAgB,EAACH,GAAY,CAAC;QACxC,OAAOZ,CAAC;MACZ,CAAC,CAAC;MACF;IACJ;;IAGA;IACA,MAAM,IAAAgB,4BAAW,EACb,IAAI,CAACvE,QAAQ,CAACU,aAAa,EAC3B;MACI8D,QAAQ,EAAEvE,iBAAiB;MAC3BwE,QAAQ,EAAEC,MAAM,CAACC,MAAM,CACnB,CAAC,CAAC,EACF1E,iBAAiB,EACjB;QACI2E,QAAQ,EAAE;MACd,CACJ;IACJ,CAAC,EACD,qCACJ,CAAC;IAED,MAAM,IAAI,CAACtB,YAAY,CAACC,CAAC,IAAI;MACzBA,CAAC,CAACa,MAAM,GAAG,MAAM;MACjB,OAAOb,CAAC;IACZ,CAAC,CAAC;IACF,IAAI3B,gBAAgB,EAAE;MAClB,MAAMA,gBAAgB,CAACoC,KAAK,CAAC,CAAC;IAClC;EACJ,CAAC;EAAA7C,MAAA,CAIMmC,YAAY,GAAnB,SAAOA,YAAYA,CACfuB,OAA8B,EAChC;IACE,IAAI,CAAChF,oBAAoB,CAACiF,IAAI,CAACD,OAAO,CAAC;IACvC,IAAI,CAAC/E,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACiF,IAAI,CAAC,YAAY;MAC7D,IAAI,IAAI,CAAClF,oBAAoB,CAACmF,MAAM,KAAK,CAAC,EAAE;QACxC;MACJ;MACA;MACA,IAAMC,WAAW,GAAG,IAAI,CAACpF,oBAAoB;MAC7C,IAAI,CAACA,oBAAoB,GAAG,EAAE;MAC9B,OAAO,IAAI,EAAE;QACT,IAAM2E,QAAQ,GAAG,MAAM,IAAAU,kCAAiB,EACpC,IAAI,CAAClF,QAAQ,CAACU,aAAa,EAC3B,IAAI,CAACN,WACT,CAAC;QACD,IAAI+E,MAAM,GAAG,IAAAC,YAAK,EAACZ,QAAQ,CAAC;QAC5B,IAAI,CAACA,QAAQ,EAAE;UACXW,MAAM,GAAG;YACLE,EAAE,EAAE,IAAI,CAACjF,WAAW;YACpBkF,GAAG,EAAE,IAAI,CAAC/F,YAAY;YACtBgG,OAAO,EAAEjF,0DAAiC;YAC1CU,IAAI,EAAE;cACFuB,cAAc,EAAE,IAAI,CAAClD,UAAU,CAACG,IAAI;cACpC4E,MAAM,EAAE,SAAS;cACjBZ,KAAK,EAAE;gBACHC,KAAK,EAAE,CAAC;gBACR+B,OAAO,EAAE,CAAC;gBACVC,OAAO,EAAE;cACb;YACJ,CAAC;YACDb,QAAQ,EAAE,KAAK;YACfc,KAAK,EAAE,IAAAC,+BAAwB,EAAC,CAAC;YACjCC,IAAI,EAAE,IAAAC,yBAAkB,EAAC,CAAC;YAC1BC,YAAY,EAAE,CAAC;UACnB,CAAC;QACL;QAEA,IAAI1B,MAAM,GAAG,IAAArD,qBAAc,EAACoE,MAAM,CAAC,CAACnE,IAAI;QACxC,KAAK,IAAM+E,UAAU,IAAId,WAAW,EAAE;UAClCb,MAAM,GAAG2B,UAAU,CAAC3B,MAAM,CAAC;QAC/B;QACAA,MAAM,CAACZ,KAAK,CAACiC,OAAO,GAAGO,IAAI,CAACC,KAAK,CAAE7B,MAAM,CAACZ,KAAK,CAACgC,OAAO,GAAGpB,MAAM,CAACZ,KAAK,CAACC,KAAK,GAAI,GAAG,CAAC;QAEpF,IACI0B,MAAM,IAAIX,QAAQ,IAClB,IAAA0B,gBAAS,EAACf,MAAM,CAACnE,IAAI,EAAEwD,QAAQ,CAACxD,IAAI,CAAC,EACvC;UACE;QACJ;QAGA,IAAI;UACA,MAAM,IAAAuD,4BAAW,EACb,IAAI,CAACvE,QAAQ,CAACU,aAAa,EAC3B;YACI8D,QAAQ;YACRC,QAAQ,EAAE,IAAA1D,qBAAc,EAACoE,MAAM;UACnC,CAAC,EACD7E,0DACJ,CAAC;;UAED;UACA;QACJ,CAAC,CAAC,OAAO6D,GAAG,EAAE;UACV;UACA,IAAI,CAAC,IAAAgC,iCAAwB,EAAChC,GAAG,CAAC,EAAE;YAChC,MAAMA,GAAG;UACb;QACJ;MACJ;IACJ,CAAC,CAAC;IACF,OAAO,IAAI,CAACrE,iBAAiB;EACjC,CAAC;EAAAqB,MAAA,CAGY4C,cAAc,GAA3B,eAAaA,cAAcA,CACvBV,UAA4C,EAC5CS,UAA4C,EAC5CtC,SAAiB,EACnB;IACE,IAAM4E,8BAA8B,GAAG,MAAM,IAAI,CAACpG,QAAQ,CAACoC,OAAO,CAACC,qBAAqB,CAAC;MACrFC,YAAY,EAAE,IAAI,CAACtC,QAAQ,CAACR,IAAI;MAChC+C,cAAc,EAAE,0BAA0B,GAAG,IAAI,CAAClD,UAAU,CAACG,IAAI,GAAG,GAAG,GAAG,IAAI,CAACH,UAAU,CAACI,MAAM,CAACC,OAAO;MACxG8C,qBAAqB,EAAE,IAAI,CAACxC,QAAQ,CAACyC,KAAK;MAC1CX,aAAa,EAAE,IAAI,CAAC9B,QAAQ,CAAC8B,aAAa;MAC1CY,OAAO,EAAE,CAAC,CAAC;MACXjD,MAAM,EAAE,IAAA4G,0CAAkC,EAAChD,UAAU,CAAC5D,MAAM,EAAE,IAAA6G,8BAAa,EAACjD,UAAU,CAAC5D,MAAM,CAAC,CAAC;MAC/FkD,QAAQ,EAAE,IAAI,CAAC3C,QAAQ,CAAC2C,QAAQ;MAChCC,OAAO,EAAEC,0BAAY,CAACC,SAAS,CAAC;IACpC,CAAC,CAAC;IAEF,IAAMyD,sBAAsB,GAAG,IAAAC,6CAAqC,EAChE1C,UAAU;IACV;AACZ;AACA;AACA;IACY2C,8BAAsB,EACtB,IAAI,CAACzG,QAAQ,CAACyC,KAAK,EACnB,IACJ,CAAC;IAED,IAAMiE,gBAAgB,GAAG,IAAAC,kCAA0B,EAAC;MAChDC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE,CACR,oBAAoB,EACpB,IAAI,CAACxH,UAAU,CAACG,IAAI,EACpB6D,UAAU,CAAC5D,MAAM,CAACC,OAAO,EACzB,IAAI,CAACL,UAAU,CAACI,MAAM,CAACC,OAAO,CACjC,CAACC,IAAI,CAAC,GAAG,CAAC;MACXmH,kBAAkB,EAAE;QAChBC,kBAAkBA,CAAA,EAAG;UACjB,OAAOrD,OAAO,CAACsD,OAAO,CAAC;YACnBC,UAAU,EAAE,IAAI;YAChBC,SAAS,EAAE;UACf,CAAC,CAAC;QACN,CAAC;QACDC,WAAW,EAAE,MAAOC,IAAI,IAAK;UACzBA,IAAI,GAAG,MAAM1D,OAAO,CAACC,GAAG,CACpByD,IAAI,CACCtG,GAAG,CAAC,MAAOuG,GAAG,IAAK;YAChB,IAAIC,UAAU,GAAGD,GAAG,CAACE,gBAAgB;YACrC,IAAIzD,UAAU,CAACrE,MAAM,CAAC+H,KAAK,KAAKC,kCAA0B,EAAE;cACxDH,UAAU,GAAGD,GAAG,CAACE,gBAAgB,CAACG,OAAO;cACzC,IAAIL,GAAG,CAACE,gBAAgB,CAACI,YAAY,KAAK,GAAG,EAAE;gBAC3C,OAAO;kBACHC,kBAAkB,EAAE/F,SAAS;kBAC7B0F,gBAAgB,EAAEF,GAAG,CAACE;gBAC1B,CAAC;cACL;YACJ;YACA,IAAMM,eAAmD,GAAG,MAAM,IAAAC,qCAAmB,EACjF,IAAI,CAACzI,UAAU,EACfgE,UAAU,CAAC5D,MAAM,CAACC,OAAO,EACzB4H,UACJ,CAAC;YACD,IAAMS,MAA0C,GAAG;cAC/C;cACAH,kBAAkB,EAAE/F,SAAS;cAC7B0F,gBAAgB,EAAEzD,UAAU,CAACrE,MAAM,CAAC+H,KAAK,KAAKC,kCAA0B,GAClE/C,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE0C,GAAG,CAACE,gBAAgB,EAAE;gBAAEG,OAAO,EAAEG;cAAgB,CAAC,CAAC,GACrEA;YACV,CAAC;YACD,OAAOE,MAAM;UACjB,CAAC,CACT,CAAC;;UAED;UACAX,IAAI,GAAGA,IAAI,CAACxG,MAAM,CAACyG,GAAG,IAAI,CAAC,CAACA,GAAG,CAACE,gBAAgB,CAAC;UAEjD,IAAMS,MAAM,GAAG,MAAMzB,sBAAsB,CAACY,WAAW,CAACC,IAAI,CAAC;UAC7D,OAAOY,MAAM;QACjB,CAAC;QACDC,mBAAmB,EAAE,IAAIC,aAAO,CAAM,CAAC,CAACC,YAAY,CAAC;MACzD,CAAC;MACDC,YAAY,EAAE/E,UAAU;MACxBgF,YAAY,EAAEjC,8BAA8B;MAC5CkC,aAAa,EAAE9G,SAAS;MACxB+G,aAAa,EAAE,CAAC;MAChBC,eAAe,EAAE/B,8BAAsB;MACvCgC,YAAY,EAAE,IAAI,CAACzI,QAAQ,CAACyI;IAChC,CAAC,CAAC;IAGF,IAAIC,QAAuC,GAAG,KAAK;IACnDhC,gBAAgB,CAACiC,MAAM,CAACtE,KAAK,CAACuE,SAAS,CAACzE,GAAG,IAAIuE,QAAQ,GAAGvE,GAAG,CAAC;;IAE9D;IACAuC,gBAAgB,CAACiC,MAAM,CAACE,SAAS,CAACC,EAAE,CAACF,SAAS,CAAC,MAAM;MACjD,IAAI,CAACtF,YAAY,CAACc,MAAM,IAAI;QACxBA,MAAM,CAACZ,KAAK,CAACgC,OAAO,GAAGpB,MAAM,CAACZ,KAAK,CAACgC,OAAO,GAAG,CAAC;QAC/C,OAAOpB,MAAM;MACjB,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,MAAM,IAAA2E,4CAAoC,EAACrC,gBAAgB,CAAC;IAC5D,MAAM,IAAAsC,kCAA0B,EAACtC,gBAAgB,CAAC;IAElD,MAAM,IAAI,CAAC5G,iBAAiB;IAC5B,IAAI4I,QAAQ,EAAE;MACV,MAAMtC,8BAA8B,CAACpC,KAAK,CAAC,CAAC;MAC5C,MAAM0E,QAAQ;IAClB;;IAEA;IACA,MAAMhF,OAAO,CAACC,GAAG,CAAC,CACdN,UAAU,CAAC4F,MAAM,CAAC,CAAC,EACnB7C,8BAA8B,CAAC6C,MAAM,CAAC,CAAC,CAC1C,CAAC;EACN,CAAC;EAAA9H,MAAA,CAEY+B,iBAAiB,GAA9B,eAAaA,iBAAiBA,CAC1BgG,gBAAoD,EACrC;IACf,IAAIC,GAAG,GAAG,CAAC;IACX,MAAMzF,OAAO,CAACC,GAAG,CACbuF,gBAAgB,CAACpI,GAAG,CAAC,MAAOsI,QAAQ,IAAK;MAErC,IAAMC,aAAa,GAAG,IAAAC,2BAAY,EAC9BF,QAAQ,CAAC3J,MAAM,EACf,IAAA8J,kCAAmB,EACfH,QAAQ,CAAC3J,MAAM,EACf;QACI+J,QAAQ,EAAE,CAAC;MACf,CACJ,CACJ,CAAC;MACD,IAAMC,WAAW,GAAG,MAAML,QAAQ,CAAC5F,KAAK,CAAC6F,aAAa,CAAC;MACvDF,GAAG,IAAIM,WAAW,CAACjG,KAAK;IAC5B,CAAC,CACL,CAAC;IACD,OAAO2F,GAAG;EACd,CAAC;EAAAhI,MAAA,CAEY6B,4BAA4B,GAAzC,eAAaA,4BAA4BA,CAAA,EAAG;IACxC,IAAM/C,iBAAiB,GAAG,MAAM,IAAI,CAACA,iBAAiB;IACtD,IAAMkJ,GAGH,GAAG,EAAE;IAER,MAAMzF,OAAO,CAACC,GAAG,CACb,MAAMD,OAAO,CAACC,GAAG,CACb1D,iBAAiB,CACZe,IAAI,CACJ0I,iBAAiB,CACjB5I,GAAG,CAAC,MAAO6I,gBAAgB,IAAK;MAE7B;MACA,IAAIA,gBAAgB,CAAClK,MAAM,CAAC+H,KAAK,KAAKC,kCAA0B,EAAE;QAC9D,MAAM,IAAImC,KAAK,CAAC,uCAAuC,CAAC;MAC5D;MAEA,IAAMC,SAAS,GAAG,IAAAxD,0CAAkC,EAChD,IAAAjB,YAAK,EAAC,IAAI,CAAC/F,UAAU,CAACI,MAAM,CAACqK,UAAU,CAAC,EACxC,IAAAxD,8BAAa,EAACqD,gBAAgB,CAAClK,MAAM,CACzC,CAAC;MACDoK,SAAS,CAACnK,OAAO,GAAG,IAAI,CAACL,UAAU,CAACI,MAAM,CAACC,OAAO;MAClD,IAAM,CAAC2D,UAAU,EAAES,UAAU,CAAC,GAAG,MAAMJ,OAAO,CAACC,GAAG,CAAC,CAC/C,IAAI,CAAC3D,QAAQ,CAACoC,OAAO,CAACC,qBAAqB,CAAC;QACxCG,qBAAqB,EAAE,IAAI,CAACxC,QAAQ,CAACyC,KAAK;QAC1CH,YAAY,EAAE,IAAI,CAACtC,QAAQ,CAACR,IAAI;QAChCoD,OAAO,EAAEC,0BAAY,CAACC,SAAS,CAAC,CAAC;QACjChB,aAAa,EAAE,IAAI,CAAC9B,QAAQ,CAAC8B,aAAa;QAC1CY,OAAO,EAAE,CAAC,CAAC;QACXjD,MAAM,EAAEkK,gBAAgB,CAAClK,MAAM;QAC/BkD,QAAQ,EAAE,IAAI,CAAC3C,QAAQ,CAAC2C,QAAQ;QAChCJ,cAAc,EAAEoH,gBAAgB,CAACpH;MACrC,CAAC,CAAC,EACF,IAAI,CAACvC,QAAQ,CAACoC,OAAO,CAACC,qBAAqB,CAAC;QACxCG,qBAAqB,EAAE,IAAI,CAACxC,QAAQ,CAACyC,KAAK;QAC1CH,YAAY,EAAE,IAAI,CAACtC,QAAQ,CAACR,IAAI;QAChCoD,OAAO,EAAEC,0BAAY,CAACC,SAAS,CAAC,CAAC;QACjChB,aAAa,EAAE,IAAI,CAAC9B,QAAQ,CAAC8B,aAAa;QAC1CY,OAAO,EAAE,CAAC,CAAC;QACXjD,MAAM,EAAEoK,SAAS;QACjBlH,QAAQ,EAAE,IAAI,CAAC3C,QAAQ,CAAC2C,QAAQ;QAChCJ,cAAc,EAAEoH,gBAAgB,CAACpH;MACrC,CAAC,CAAC,CACL,CAAC;MACF4G,GAAG,CAACrE,IAAI,CAAC;QAAEzB,UAAU;QAAES;MAAW,CAAC,CAAC;IACxC,CAAC,CACT,CACJ,CAAC;IAED,OAAOqF,GAAG;EACd,CAAC;EAAAhI,MAAA,CAIK4I,cAAc,GAApB,eAAMA,cAAcA,CAACvI,SAAkB,EAA8B;IACjE,IAAI,CAACD,cAAc,CAACC,SAAS,CAAC;IAC9B,IAAME,IAAI,GAAG,MAAM,IAAI,CAACvB,WAAW;IACnC,IAAI,CAACuB,IAAI,EAAE;MACP,OAAO;QACH0C,MAAM,EAAE,MAAM;QACd7B,cAAc,EAAE,IAAI,CAAClD,UAAU,CAACG,IAAI;QACpCgE,KAAK,EAAE;UACHgC,OAAO,EAAE,CAAC;UACVC,OAAO,EAAE,CAAC;UACVhC,KAAK,EAAE;QACX;MACJ,CAAC;IACL;IAEA,IAAMuE,MAAM,GAAG,MAAMtE,OAAO,CAACsG,IAAI,CAAC,CAC9B,IAAA1I,oBAAc,EACV,IAAI,CAACd,CAAC,CAACG,IAAI,CACP,IAAAC,YAAM,EAACC,CAAC,IAAIA,CAAC,CAACuD,MAAM,KAAK,MAAM,CACnC,CACJ,CAAC,EACD,IAAA9C,oBAAc,EACV,IAAI,CAACd,CAAC,CAACG,IAAI,CACP,IAAAC,YAAM,EAACC,CAAC,IAAIA,CAAC,CAACuD,MAAM,KAAK,OAAO,CACpC,CACJ,CAAC,CACJ,CAAC;IAEF,IAAI4D,MAAM,CAAC5D,MAAM,KAAK,OAAO,EAAE;MAC3B,MAAM,IAAAzC,mBAAU,EAAC,KAAK,EAAE;QACpBtC,UAAU,EAAE,IAAI,CAACA,UAAU,CAACG,IAAI;QAChC6E,KAAK,EAAE2D,MAAM,CAAC3D;MAClB,CAAC,CAAC;IACN,CAAC,MAAM;MACH,OAAO2D,MAAM;IACjB;EAEJ,CAAC;EAAA,OAAA7I,gBAAA;AAAA","ignoreList":[]}