{"version":3,"file":"index.js","names":["_rxQuery","require","_rxError","_index","dumpRxDatabase","collections","json","name","instanceToken","token","useCollections","Object","keys","filter","colName","includes","charAt","map","Promise","all","col","exportJSON","then","cols","importDumpRxDatabase","dump","missingCollections","length","newRxError","colDump","importJSON","dumpRxCollection","schemaHash","schema","hash","docs","query","createRxQuery","_getDefaultQuery","queryCollection","docData","flatClone","_rev","_attachments","importDumpRxCollection","exportedJSON","own","storageInstance","bulkWrite","document","assign","_meta","lwt","now","getDefaultRevision","_deleted","RxDBJsonDumpPlugin","exports","rxdb","prototypes","RxDatabase","proto","RxCollection","overwritable"],"sources":["../../../../src/plugins/json-dump/index.ts"],"sourcesContent":["/**\r\n * this plugin adds the json export/import capabilities to RxDB\r\n */\r\nimport {\r\n    createRxQuery,\r\n    queryCollection,\r\n    _getDefaultQuery\r\n} from '../../rx-query.ts';\r\nimport {\r\n    newRxError\r\n} from '../../rx-error.ts';\r\nimport type {\r\n    RxDatabase,\r\n    RxCollection,\r\n    RxPlugin,\r\n    RxDocumentData\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    flatClone,\r\n    getDefaultRevision,\r\n    now\r\n} from '../../plugins/utils/index.ts';\r\n\r\nfunction dumpRxDatabase(\r\n    this: RxDatabase,\r\n    collections?: string[]\r\n): Promise<any> {\r\n    const json: any = {\r\n        name: this.name,\r\n        instanceToken: this.token,\r\n        collections: []\r\n    };\r\n\r\n    const useCollections = Object.keys(this.collections)\r\n        .filter(colName => !collections || collections.includes(colName))\r\n        .filter(colName => colName.charAt(0) !== '_')\r\n        .map(colName => this.collections[colName]);\r\n\r\n    return Promise.all(\r\n        useCollections\r\n            .map(col => col.exportJSON())\r\n    ).then(cols => {\r\n        json.collections = cols;\r\n        return json;\r\n    });\r\n}\r\n\r\nconst importDumpRxDatabase = function (\r\n    this: RxDatabase,\r\n    dump: any\r\n) {\r\n    /**\r\n     * collections must be created before the import\r\n     * because we do not know about the other collection-settings here\r\n     */\r\n    const missingCollections = dump.collections\r\n        .filter((col: any) => !this.collections[col.name])\r\n        .map((col: any) => col.name);\r\n    if (missingCollections.length > 0) {\r\n        throw newRxError('JD1', {\r\n            missingCollections\r\n        });\r\n    }\r\n\r\n    return Promise.all(\r\n        dump.collections\r\n            .map((colDump: any) => this.collections[colDump.name].importJSON(colDump))\r\n    );\r\n};\r\n\r\nconst dumpRxCollection = async function (\r\n    this: RxCollection\r\n) {\r\n    const json: any = {\r\n        name: this.name,\r\n        schemaHash: await this.schema.hash,\r\n        docs: []\r\n    };\r\n\r\n    const query = createRxQuery(\r\n        'find',\r\n        _getDefaultQuery(),\r\n        this\r\n    );\r\n    return queryCollection(query)\r\n        .then((docs: any) => {\r\n            json.docs = docs.map((docData: any) => {\r\n                docData = flatClone(docData);\r\n                delete docData._rev;\r\n                delete docData._attachments;\r\n                return docData;\r\n            });\r\n            return json;\r\n        });\r\n};\r\n\r\nasync function importDumpRxCollection<RxDocType>(\r\n    this: RxCollection<RxDocType>,\r\n    exportedJSON: any\r\n): Promise<any> {\r\n    // check schemaHash\r\n    if (exportedJSON.schemaHash !== await this.schema.hash) {\r\n        throw newRxError('JD2', {\r\n            schemaHash: exportedJSON.schemaHash,\r\n            own: this.schema.hash\r\n        });\r\n    }\r\n\r\n    const docs: RxDocType[] = exportedJSON.docs;\r\n    return this.storageInstance.bulkWrite(\r\n        docs.map(docData => {\r\n            const document: RxDocumentData<RxDocType> = Object.assign(\r\n                {},\r\n                docData,\r\n                {\r\n                    _meta: {\r\n                        lwt: now()\r\n                    },\r\n                    _rev: getDefaultRevision(),\r\n                    _attachments: {},\r\n                    _deleted: false\r\n                }\r\n            );\r\n            return {\r\n                document\r\n            };\r\n        }),\r\n        'json-dump-import'\r\n    );\r\n}\r\n\r\nexport const RxDBJsonDumpPlugin: RxPlugin = {\r\n    name: 'json-dump',\r\n    rxdb: true,\r\n    prototypes: {\r\n        RxDatabase: (proto: any) => {\r\n            proto.exportJSON = dumpRxDatabase;\r\n            proto.importJSON = importDumpRxDatabase;\r\n        },\r\n        RxCollection: (proto: any) => {\r\n            proto.exportJSON = dumpRxCollection;\r\n            proto.importJSON = importDumpRxCollection;\r\n        }\r\n    },\r\n    overwritable: {}\r\n};\r\n"],"mappings":"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","ignoreList":[]}