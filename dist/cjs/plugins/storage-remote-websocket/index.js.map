{"version":3,"file":"index.js","names":["_rxjs","require","_index","_index2","_remote","_rxStorageRemote","_storageRemoteHelpers","_types","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","startRxStorageRemoteWebsocketServer","options","serverState","startSocketServer","websocketByConnectionId","Map","messages$","Subject","exposeSettings","asObservable","storage","database","customRequestHandler","send","msg","ws","getFromMapOrThrow","connectionId","JSON","stringify","fakeVersion","exposeState","exposeRxStorageRemote","onConnection$","subscribe","onCloseHandlers","onclose","map","fn","on","messageString","message","parse","has","method","createErrorAnswer","Error","set","next","getRxStorageRemoteWebsocket","identifier","url","join","getRxStorageRemote","mode","messageChannelCreator","websocketClient","createWebSocketClient","message$","socket","close","PROMISE_RESOLVE_VOID"],"sources":["../../../../src/plugins/storage-remote-websocket/index.ts"],"sourcesContent":["import { Subject } from 'rxjs';\r\nimport type {\r\n    WebSocket\r\n} from 'ws';\r\nimport {\r\n    PROMISE_RESOLVE_VOID,\r\n    getFromMapOrThrow\r\n} from '../../plugins/utils/index.ts';\r\nimport {\r\n    createWebSocketClient,\r\n    startSocketServer\r\n} from '../replication-websocket/index.ts';\r\nimport { exposeRxStorageRemote } from '../storage-remote/remote.ts';\r\nimport { getRxStorageRemote } from '../storage-remote/rx-storage-remote.ts';\r\nimport { createErrorAnswer } from '../storage-remote/storage-remote-helpers.ts';\r\nimport type {\r\n    MessageFromRemote,\r\n    MessageToRemote,\r\n    RxStorageRemoteExposeSettings\r\n} from '../storage-remote/storage-remote-types.ts';\r\nimport type {\r\n    RxStorageRemoteWebsocketClient,\r\n    RxStorageRemoteWebsocketClientOptions,\r\n    RxStorageRemoteWebsocketServerOptions,\r\n    RxStorageRemoteWebsocketServerState\r\n} from './types.ts';\r\nexport function startRxStorageRemoteWebsocketServer(\r\n    options: RxStorageRemoteWebsocketServerOptions\r\n): RxStorageRemoteWebsocketServerState {\r\n    const serverState = startSocketServer(options);\r\n\r\n    const websocketByConnectionId = new Map<string, WebSocket>();\r\n    const messages$ = new Subject<MessageToRemote>();\r\n    const exposeSettings: RxStorageRemoteExposeSettings = {\r\n        messages$: messages$.asObservable(),\r\n        storage: options.storage as any,\r\n        database: options.database as any,\r\n        customRequestHandler: options.customRequestHandler,\r\n        send(msg) {\r\n            const ws = getFromMapOrThrow(websocketByConnectionId, msg.connectionId);\r\n            ws.send(JSON.stringify(msg));\r\n        },\r\n        fakeVersion: options.fakeVersion\r\n    };\r\n    const exposeState = exposeRxStorageRemote(exposeSettings);\r\n\r\n    serverState.onConnection$.subscribe(ws => {\r\n        const onCloseHandlers: Function[] = [];\r\n        ws.onclose = () => {\r\n            onCloseHandlers.map(fn => fn());\r\n        };\r\n        ws.on('message', (messageString: string) => {\r\n            const message: MessageToRemote = JSON.parse(messageString);\r\n            const connectionId = message.connectionId;\r\n            if (!websocketByConnectionId.has(connectionId)) {\r\n                /**\r\n                 * If first message is not 'create',\r\n                 * it is an error.\r\n                 */\r\n                if (\r\n                    message.method !== 'create' &&\r\n                    message.method !== 'custom'\r\n                ) {\r\n                    ws.send(\r\n                        JSON.stringify(\r\n                            createErrorAnswer(message, new Error('First call must be a create call but is: ' + JSON.stringify(message)))\r\n                        )\r\n                    );\r\n                    return;\r\n                }\r\n                websocketByConnectionId.set(connectionId, ws);\r\n            }\r\n            messages$.next(message);\r\n        });\r\n    });\r\n\r\n    return {\r\n        serverState,\r\n        exposeState\r\n    };\r\n}\r\n\r\nexport function getRxStorageRemoteWebsocket(\r\n    options: RxStorageRemoteWebsocketClientOptions\r\n): RxStorageRemoteWebsocketClient {\r\n    const identifier = [\r\n        options.url,\r\n        'rx-remote-storage-websocket'\r\n    ].join('');\r\n    const storage = getRxStorageRemote({\r\n        identifier,\r\n        mode: options.mode,\r\n        async messageChannelCreator() {\r\n            const messages$ = new Subject<MessageFromRemote>();\r\n            const websocketClient = await createWebSocketClient(options as any);\r\n            websocketClient.message$.subscribe(msg => messages$.next(msg));\r\n            return {\r\n                messages$,\r\n                send(msg) {\r\n                    return websocketClient.socket.send(JSON.stringify(msg));\r\n                },\r\n                close() {\r\n                    websocketClient.socket.close();\r\n                    return PROMISE_RESOLVE_VOID;\r\n                }\r\n            };\r\n\r\n        }\r\n    });\r\n    return storage;\r\n}\r\n\r\n\r\nexport * from './types.ts';\r\n\r\n"],"mappings":"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","ignoreList":[]}