{"version":3,"file":"utils-promise.js","names":["nextTick","Promise","res","setTimeout","promiseWait","ms","toPromise","maybePromise","then","resolve","isPromise","value","PROMISE_RESOLVE_TRUE","exports","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_NULL","PROMISE_RESOLVE_VOID","requestIdlePromiseNoQueue","timeout","requestIdleCallback","idlePromiseQueue","requestIdlePromise","undefined","requestIdleCallbackIfAvailable","fun","promiseSeries","tasks","initial","reduce","current","next"],"sources":["../../../../src/plugins/utils/utils-promise.ts"],"sourcesContent":["/**\r\n * returns a promise that resolves on the next tick\r\n */\r\nexport function nextTick(): Promise<void> {\r\n    return new Promise(res => setTimeout(res, 0));\r\n}\r\n\r\nexport function promiseWait(ms: number = 0): Promise<void> {\r\n    return new Promise(res => setTimeout(res, ms));\r\n}\r\n\r\nexport function toPromise<T>(maybePromise: Promise<T> | T): Promise<T> {\r\n    if (maybePromise && typeof (maybePromise as any).then === 'function') {\r\n        // is promise\r\n        return maybePromise as any;\r\n    } else {\r\n        return Promise.resolve(maybePromise);\r\n    }\r\n}\r\n\r\n/**\r\n * returns true if promise is given\r\n */\r\nexport function isPromise(value: any): boolean {\r\n    if (\r\n        typeof value !== 'undefined' &&\r\n        typeof value.then === 'function'\r\n    ) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Reusing resolved promises has a better\r\n * performance than creating new ones each time.\r\n */\r\nexport const PROMISE_RESOLVE_TRUE: Promise<true> = Promise.resolve(true);\r\nexport const PROMISE_RESOLVE_FALSE: Promise<false> = Promise.resolve(false);\r\nexport const PROMISE_RESOLVE_NULL: Promise<null> = Promise.resolve(null);\r\nexport const PROMISE_RESOLVE_VOID: Promise<void> = Promise.resolve();\r\n\r\n\r\nexport function requestIdlePromiseNoQueue(\r\n    /**\r\n     * We always set a timeout!\r\n     * RxDB might be used on the server side where the\r\n     * server runs 24/4 on 99% CPU. So without a timeout\r\n     * this would never resolve which could cause a memory leak.\r\n     */\r\n    timeout: number | undefined = 10000\r\n) {\r\n    /**\r\n     * Do not use window.requestIdleCallback\r\n     * because some javascript runtimes like react-native,\r\n     * do not have a window object, but still have a global\r\n     * requestIdleCallback function.\r\n     * @link https://github.com/pubkey/rxdb/issues/4804\r\n    */\r\n    if (\r\n        typeof requestIdleCallback === 'function'\r\n    ) {\r\n        return new Promise<void>(res => {\r\n            requestIdleCallback(\r\n                () => res(),\r\n                {\r\n                    timeout\r\n                }\r\n            );\r\n        });\r\n    } else {\r\n        return promiseWait(0);\r\n    }\r\n}\r\n\r\n/**\r\n * If multiple operations wait for an requestIdlePromise\r\n * we do not want them to resolve all at the same time.\r\n * So we have to queue the calls.\r\n */\r\nlet idlePromiseQueue = PROMISE_RESOLVE_VOID;\r\nexport function requestIdlePromise(\r\n    timeout: number | undefined = undefined\r\n) {\r\n    idlePromiseQueue = idlePromiseQueue.then(() => {\r\n        return requestIdlePromiseNoQueue(timeout);\r\n    });\r\n    return idlePromiseQueue;\r\n}\r\n\r\n\r\n/**\r\n * run the callback if requestIdleCallback available\r\n * do nothing if not\r\n * @link https://developer.mozilla.org/de/docs/Web/API/Window/requestIdleCallback\r\n */\r\nexport function requestIdleCallbackIfAvailable(fun: Function): void {\r\n    /**\r\n     * Do not use window.requestIdleCallback\r\n     * because some javascript runtimes like react-native,\r\n     * do not have a window object, but still have a global\r\n     * requestIdleCallback function.\r\n     * @link https://github.com/pubkey/rxdb/issues/4804\r\n    */\r\n    if (\r\n        typeof requestIdleCallback === 'function'\r\n    ) {\r\n        requestIdleCallback(() => {\r\n            fun();\r\n        });\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * like Promise.all() but runs in series instead of parallel\r\n * @link https://github.com/egoist/promise.series/blob/master/index.js\r\n * @param tasks array with functions that return a promise\r\n */\r\nexport function promiseSeries(\r\n    tasks: Function[],\r\n    initial?: any\r\n): Promise<any[]> {\r\n    return tasks\r\n        .reduce(\r\n            (current, next) => (current as any).then(next),\r\n            Promise.resolve(initial)\r\n        );\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACO,SAASA,QAAQA,CAAA,EAAkB;EACtC,OAAO,IAAIC,OAAO,CAACC,GAAG,IAAIC,UAAU,CAACD,GAAG,EAAE,CAAC,CAAC,CAAC;AACjD;AAEO,SAASE,WAAWA,CAACC,EAAU,GAAG,CAAC,EAAiB;EACvD,OAAO,IAAIJ,OAAO,CAACC,GAAG,IAAIC,UAAU,CAACD,GAAG,EAAEG,EAAE,CAAC,CAAC;AAClD;AAEO,SAASC,SAASA,CAAIC,YAA4B,EAAc;EACnE,IAAIA,YAAY,IAAI,OAAQA,YAAY,CAASC,IAAI,KAAK,UAAU,EAAE;IAClE;IACA,OAAOD,YAAY;EACvB,CAAC,MAAM;IACH,OAAON,OAAO,CAACQ,OAAO,CAACF,YAAY,CAAC;EACxC;AACJ;;AAEA;AACA;AACA;AACO,SAASG,SAASA,CAACC,KAAU,EAAW;EAC3C,IACI,OAAOA,KAAK,KAAK,WAAW,IAC5B,OAAOA,KAAK,CAACH,IAAI,KAAK,UAAU,EAClC;IACE,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB;;AAEA;AACA;AACA;AACA;AACO,IAAMI,oBAAmC,GAAAC,OAAA,CAAAD,oBAAA,GAAGX,OAAO,CAACQ,OAAO,CAAC,IAAI,CAAC;AACjE,IAAMK,qBAAqC,GAAAD,OAAA,CAAAC,qBAAA,GAAGb,OAAO,CAACQ,OAAO,CAAC,KAAK,CAAC;AACpE,IAAMM,oBAAmC,GAAAF,OAAA,CAAAE,oBAAA,GAAGd,OAAO,CAACQ,OAAO,CAAC,IAAI,CAAC;AACjE,IAAMO,oBAAmC,GAAAH,OAAA,CAAAG,oBAAA,GAAGf,OAAO,CAACQ,OAAO,CAAC,CAAC;AAG7D,SAASQ,yBAAyBA;AACrC;AACJ;AACA;AACA;AACA;AACA;AACIC,OAA2B,GAAG,KAAK,EACrC;EACE;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IACI,OAAOC,mBAAmB,KAAK,UAAU,EAC3C;IACE,OAAO,IAAIlB,OAAO,CAAOC,GAAG,IAAI;MAC5BiB,mBAAmB,CACf,MAAMjB,GAAG,CAAC,CAAC,EACX;QACIgB;MACJ,CACJ,CAAC;IACL,CAAC,CAAC;EACN,CAAC,MAAM;IACH,OAAOd,WAAW,CAAC,CAAC,CAAC;EACzB;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAIgB,gBAAgB,GAAGJ,oBAAoB;AACpC,SAASK,kBAAkBA,CAC9BH,OAA2B,GAAGI,SAAS,EACzC;EACEF,gBAAgB,GAAGA,gBAAgB,CAACZ,IAAI,CAAC,MAAM;IAC3C,OAAOS,yBAAyB,CAACC,OAAO,CAAC;EAC7C,CAAC,CAAC;EACF,OAAOE,gBAAgB;AAC3B;;AAGA;AACA;AACA;AACA;AACA;AACO,SAASG,8BAA8BA,CAACC,GAAa,EAAQ;EAChE;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IACI,OAAOL,mBAAmB,KAAK,UAAU,EAC3C;IACEA,mBAAmB,CAAC,MAAM;MACtBK,GAAG,CAAC,CAAC;IACT,CAAC,CAAC;EACN;AACJ;;AAGA;AACA;AACA;AACA;AACA;AACO,SAASC,aAAaA,CACzBC,KAAiB,EACjBC,OAAa,EACC;EACd,OAAOD,KAAK,CACPE,MAAM,CACH,CAACC,OAAO,EAAEC,IAAI,KAAMD,OAAO,CAASrB,IAAI,CAACsB,IAAI,CAAC,EAC9C7B,OAAO,CAACQ,OAAO,CAACkB,OAAO,CAC3B,CAAC;AACT","ignoreList":[]}