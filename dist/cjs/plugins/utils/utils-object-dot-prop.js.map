{"version":3,"file":"utils-object-dot-prop.js","names":["isObject","value","type","disallowedKeys","Set","digits","getPathSegments","path","parts","currentSegment","currentPart","isIgnoring","character","Error","has","push","Number","parseInt","isStringIndex","object","key","Array","isArray","index","isInteger","assertNotStringIndex","getProperty","join","includes","undefined","pathArray","length","setProperty","root","deleteProperty","hasProperty","escapePath","TypeError","replace","entries","map","v","Object","stringifyPath","pathSegments","result","segment","deepKeysIterator","currentPath","deepKeys"],"sources":["../../../../src/plugins/utils/utils-object-dot-prop.ts"],"sourcesContent":["/**\r\n * Copied from\r\n * @link https://github.com/sindresorhus/dot-prop/blob/main/index.js\r\n * because it is currently an esm only module.\r\n * TODO use the npm package again when RxDB is also fully esm.\r\n */\r\n\r\nconst isObject = (value: null) => {\r\n    const type = typeof value;\r\n    return value !== null && (type === 'object' || type === 'function');\r\n};\r\n\r\nconst disallowedKeys = new Set([\r\n    '__proto__',\r\n    'prototype',\r\n    'constructor',\r\n]);\r\n\r\nconst digits = new Set('0123456789');\r\n\r\nfunction getPathSegments(path: string) {\r\n    const parts = [];\r\n    let currentSegment = '';\r\n    let currentPart = 'start';\r\n    let isIgnoring = false;\r\n\r\n    for (const character of path) {\r\n        switch (character) {\r\n            case '\\\\': {\r\n                if (currentPart === 'index') {\r\n                    throw new Error('Invalid character in an index');\r\n                }\r\n\r\n                if (currentPart === 'indexEnd') {\r\n                    throw new Error('Invalid character after an index');\r\n                }\r\n\r\n                if (isIgnoring) {\r\n                    currentSegment += character;\r\n                }\r\n\r\n                currentPart = 'property';\r\n                isIgnoring = !isIgnoring;\r\n                break;\r\n            }\r\n\r\n            case '.': {\r\n                if (currentPart === 'index') {\r\n                    throw new Error('Invalid character in an index');\r\n                }\r\n\r\n                if (currentPart === 'indexEnd') {\r\n                    currentPart = 'property';\r\n                    break;\r\n                }\r\n\r\n                if (isIgnoring) {\r\n                    isIgnoring = false;\r\n                    currentSegment += character;\r\n                    break;\r\n                }\r\n\r\n                if (disallowedKeys.has(currentSegment)) {\r\n                    return [];\r\n                }\r\n\r\n                parts.push(currentSegment);\r\n                currentSegment = '';\r\n                currentPart = 'property';\r\n                break;\r\n            }\r\n\r\n            case '[': {\r\n                if (currentPart === 'index') {\r\n                    throw new Error('Invalid character in an index');\r\n                }\r\n\r\n                if (currentPart === 'indexEnd') {\r\n                    currentPart = 'index';\r\n                    break;\r\n                }\r\n\r\n                if (isIgnoring) {\r\n                    isIgnoring = false;\r\n                    currentSegment += character;\r\n                    break;\r\n                }\r\n\r\n                if (currentPart === 'property') {\r\n                    if (disallowedKeys.has(currentSegment)) {\r\n                        return [];\r\n                    }\r\n\r\n                    parts.push(currentSegment);\r\n                    currentSegment = '';\r\n                }\r\n\r\n                currentPart = 'index';\r\n                break;\r\n            }\r\n\r\n            case ']': {\r\n                if (currentPart === 'index') {\r\n                    parts.push(Number.parseInt(currentSegment, 10));\r\n                    currentSegment = '';\r\n                    currentPart = 'indexEnd';\r\n                    break;\r\n                }\r\n\r\n                if (currentPart === 'indexEnd') {\r\n                    throw new Error('Invalid character after an index');\r\n                }\r\n\r\n                // Falls through\r\n            }\r\n\r\n            default: {\r\n                if (currentPart === 'index' && !digits.has(character)) {\r\n                    throw new Error('Invalid character in an index');\r\n                }\r\n\r\n                if (currentPart === 'indexEnd') {\r\n                    throw new Error('Invalid character after an index');\r\n                }\r\n\r\n                if (currentPart === 'start') {\r\n                    currentPart = 'property';\r\n                }\r\n\r\n                if (isIgnoring) {\r\n                    isIgnoring = false;\r\n                    currentSegment += '\\\\';\r\n                }\r\n\r\n                currentSegment += character;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (isIgnoring) {\r\n        currentSegment += '\\\\';\r\n    }\r\n\r\n    switch (currentPart) {\r\n        case 'property': {\r\n            if (disallowedKeys.has(currentSegment)) {\r\n                return [];\r\n            }\r\n\r\n            parts.push(currentSegment);\r\n\r\n            break;\r\n        }\r\n\r\n        case 'index': {\r\n            throw new Error('Index was not closed');\r\n        }\r\n\r\n        case 'start': {\r\n            parts.push('');\r\n\r\n            break;\r\n        }\r\n        // No default\r\n    }\r\n\r\n    return parts;\r\n}\r\n\r\nfunction isStringIndex(object: any[], key: string) {\r\n    if (typeof key !== 'number' && Array.isArray(object)) {\r\n        const index = Number.parseInt(key, 10);\r\n        return Number.isInteger(index) && object[index] === object[key as any];\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction assertNotStringIndex(object: any, key: string | number) {\r\n    if (isStringIndex(object, key as any)) {\r\n        throw new Error('Cannot use string index');\r\n    }\r\n}\r\n\r\n/**\r\n * TODO we need some performance tests and improvements here.\r\n */\r\nexport function getProperty(object: any, path: string | string[], value?: any) {\r\n    if (Array.isArray(path)) {\r\n        path = path.join('.');\r\n    }\r\n\r\n    /**\r\n     * Performance shortcut.\r\n     * In most cases we just have a simple property name\r\n     * so we can directly return it.\r\n     */\r\n    if (\r\n        !path.includes('.') &&\r\n        !path.includes('[')\r\n    ) {\r\n        return object[path];\r\n    }\r\n\r\n    if (!isObject(object as any) || typeof path !== 'string') {\r\n        return value === undefined ? object : value;\r\n    }\r\n\r\n    const pathArray = getPathSegments(path);\r\n    if (pathArray.length === 0) {\r\n        return value;\r\n    }\r\n\r\n    for (let index = 0; index < pathArray.length; index++) {\r\n        const key = pathArray[index];\r\n\r\n        if (isStringIndex(object as any, key as any)) {\r\n            object = index === pathArray.length - 1 ? undefined : null;\r\n        } else {\r\n            object = (object as any)[key];\r\n        }\r\n\r\n        if (object === undefined || object === null) {\r\n            // `object` is either `undefined` or `null` so we want to stop the loop, and\r\n            // if this is not the last bit of the path, and\r\n            // if it didn't return `undefined`\r\n            // it would return `null` if `object` is `null`\r\n            // but we want `get({foo: null}, 'foo.bar')` to equal `undefined`, or the supplied value, not `null`\r\n            if (index !== pathArray.length - 1) {\r\n                return value;\r\n            }\r\n\r\n            break;\r\n        }\r\n    }\r\n\r\n    return object === undefined ? value : object;\r\n}\r\n\r\nexport function setProperty(object: any, path: string, value: any) {\r\n    if (Array.isArray(path)) {\r\n        path = path.join('.');\r\n    }\r\n\r\n    if (!isObject(object as any) || typeof path !== 'string') {\r\n        return object;\r\n    }\r\n\r\n    const root = object;\r\n    const pathArray = getPathSegments(path);\r\n\r\n    for (let index = 0; index < pathArray.length; index++) {\r\n        const key = pathArray[index];\r\n\r\n        assertNotStringIndex(object, key);\r\n\r\n        if (index === pathArray.length - 1) {\r\n            object[key] = value;\r\n        } else if (!isObject(object[key])) {\r\n            object[key] = typeof pathArray[index + 1] === 'number' ? [] : {};\r\n        }\r\n\r\n        object = object[key];\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\nexport function deleteProperty(object: any, path: string) {\r\n    if (!isObject(object as any) || typeof path !== 'string') {\r\n        return false;\r\n    }\r\n\r\n    const pathArray = getPathSegments(path);\r\n\r\n    for (let index = 0; index < pathArray.length; index++) {\r\n        const key = pathArray[index];\r\n\r\n        assertNotStringIndex(object, key);\r\n\r\n        if (index === pathArray.length - 1) {\r\n            delete object[key];\r\n            return true;\r\n        }\r\n\r\n        object = object[key];\r\n\r\n        if (!isObject(object as any)) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport function hasProperty(object: any, path: string) {\r\n    if (!isObject(object) || typeof path !== 'string') {\r\n        return false;\r\n    }\r\n\r\n    const pathArray = getPathSegments(path);\r\n    if (pathArray.length === 0) {\r\n        return false;\r\n    }\r\n\r\n    for (const key of pathArray) {\r\n        if (!isObject(object) || !(key in object) || isStringIndex(object, key as any)) {\r\n            return false;\r\n        }\r\n\r\n        object = object[key];\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// TODO: Backslashes with no effect should not be escaped\r\nfunction escapePath(path: string) {\r\n    if (typeof path !== 'string') {\r\n        throw new TypeError('Expected a string');\r\n    }\r\n\r\n    return path.replace(/[\\\\.[]/g, '\\\\$&');\r\n}\r\n\r\n// The keys returned by Object.entries() for arrays are strings\r\nfunction entries(value: any) {\r\n    if (Array.isArray(value)) {\r\n        return value.map((v, index) => [index, v]);\r\n    }\r\n\r\n    return Object.entries(value);\r\n}\r\n\r\nfunction stringifyPath(pathSegments: never[]) {\r\n    let result = '';\r\n\r\n    // eslint-disable-next-line prefer-const\r\n    for (let [index, segment] of entries(pathSegments)) {\r\n        if (typeof segment === 'number') {\r\n            result += `[${segment}]`;\r\n        } else {\r\n            segment = escapePath(segment);\r\n            result += index === 0 ? segment : `.${segment}`;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction* deepKeysIterator(object: any, currentPath = []): any {\r\n    if (!isObject(object)) {\r\n        if (currentPath.length > 0) {\r\n            yield stringifyPath(currentPath);\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    for (const [key, value] of entries(object)) {\r\n        yield* deepKeysIterator(value, [...currentPath, key] as any);\r\n    }\r\n}\r\n\r\nexport function deepKeys(object: any) {\r\n    return [...deepKeysIterator(object)];\r\n}\r\n"],"mappings":"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","ignoreList":[]}