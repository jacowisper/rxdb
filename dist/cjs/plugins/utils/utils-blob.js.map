{"version":3,"file":"utils-blob.js","names":["_utilsBase","require","createBlob","data","type","blob","Blob","createBlobFromBase64","base64String","base64Response","fetch","blobToString","blobType","Object","prototype","toString","call","Promise","resolve","text","blobToBase64String","arrayBuffer","arrayBufferToBase64","getBlobSize","size"],"sources":["../../../../src/plugins/utils/utils-blob.ts"],"sourcesContent":["import { arrayBufferToBase64 } from './utils-base64.ts';\r\n\r\n/**\r\n * Since RxDB 13.0.0 we only use Blob instead of falling back to Buffer,\r\n * because Node.js >18 supports Blobs anyway.\r\n */\r\n/**\r\n * depending if we are on node or browser,\r\n * we have to use Buffer(node) or Blob(browser)\r\n */\r\nexport function createBlob(\r\n    data: string,\r\n    type: string\r\n): Blob {\r\n    const blob = new Blob([data], {\r\n        type\r\n    });\r\n    return blob;\r\n}\r\n\r\nexport async function createBlobFromBase64(\r\n    base64String: string,\r\n    type: string\r\n): Promise<Blob> {\r\n    const base64Response = await fetch(`data:${type};base64,${base64String}`);\r\n    const blob = await base64Response.blob();\r\n    return blob;\r\n}\r\n\r\nexport function blobToString(blob: Blob | string): Promise<string> {\r\n    /**\r\n     * in the electron-renderer we have a typed array instead of a blob\r\n     * so we have to transform it.\r\n     * @link https://github.com/pubkey/rxdb/issues/1371\r\n     */\r\n    const blobType = Object.prototype.toString.call(blob);\r\n    if (blobType === '[object Uint8Array]') {\r\n        blob = new Blob([blob]);\r\n    }\r\n    if (typeof blob === 'string') {\r\n        return Promise.resolve(blob);\r\n    }\r\n\r\n    return blob.text();\r\n}\r\n\r\nexport async function blobToBase64String(blob: Blob | string): Promise<string> {\r\n    if (typeof blob === 'string') {\r\n        return blob;\r\n    }\r\n\r\n    /**\r\n     * in the electron-renderer we have a typed array instead of a blob\r\n     * so we have to transform it.\r\n     * @link https://github.com/pubkey/rxdb/issues/1371\r\n     */\r\n    const blobType = Object.prototype.toString.call(blob);\r\n    if (blobType === '[object Uint8Array]') {\r\n        blob = new Blob([blob]);\r\n    }\r\n\r\n    const arrayBuffer = await blob.arrayBuffer();\r\n    return arrayBufferToBase64(arrayBuffer);\r\n}\r\n\r\nexport function getBlobSize(blob: Blob): number {\r\n    return blob.size;\r\n}\r\n"],"mappings":";;;;;;;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,UAAUA,CACtBC,IAAY,EACZC,IAAY,EACR;EACJ,IAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,IAAI,CAAC,EAAE;IAC1BC;EACJ,CAAC,CAAC;EACF,OAAOC,IAAI;AACf;AAEO,eAAeE,oBAAoBA,CACtCC,YAAoB,EACpBJ,IAAY,EACC;EACb,IAAMK,cAAc,GAAG,MAAMC,KAAK,WAASN,IAAI,gBAAWI,YAAc,CAAC;EACzE,IAAMH,IAAI,GAAG,MAAMI,cAAc,CAACJ,IAAI,CAAC,CAAC;EACxC,OAAOA,IAAI;AACf;AAEO,SAASM,YAAYA,CAACN,IAAmB,EAAmB;EAC/D;AACJ;AACA;AACA;AACA;EACI,IAAMO,QAAQ,GAAGC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACX,IAAI,CAAC;EACrD,IAAIO,QAAQ,KAAK,qBAAqB,EAAE;IACpCP,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACD,IAAI,CAAC,CAAC;EAC3B;EACA,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC1B,OAAOY,OAAO,CAACC,OAAO,CAACb,IAAI,CAAC;EAChC;EAEA,OAAOA,IAAI,CAACc,IAAI,CAAC,CAAC;AACtB;AAEO,eAAeC,kBAAkBA,CAACf,IAAmB,EAAmB;EAC3E,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC1B,OAAOA,IAAI;EACf;;EAEA;AACJ;AACA;AACA;AACA;EACI,IAAMO,QAAQ,GAAGC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACX,IAAI,CAAC;EACrD,IAAIO,QAAQ,KAAK,qBAAqB,EAAE;IACpCP,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACD,IAAI,CAAC,CAAC;EAC3B;EAEA,IAAMgB,WAAW,GAAG,MAAMhB,IAAI,CAACgB,WAAW,CAAC,CAAC;EAC5C,OAAO,IAAAC,8BAAmB,EAACD,WAAW,CAAC;AAC3C;AAEO,SAASE,WAAWA,CAAClB,IAAU,EAAU;EAC5C,OAAOA,IAAI,CAACmB,IAAI;AACpB","ignoreList":[]}