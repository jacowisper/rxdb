{"version":3,"file":"rx-schema-helper.js","names":["_rxError","require","_index","getPseudoSchemaForVersion","version","primaryKey","pseudoSchema","fillWithDefaultSettings","type","properties","maxLength","value","indexes","required","getSchemaByObjectPath","rxJsonSchema","path","usePath","replace","REGEX_ALL_DOTS","trimDots","ret","getProperty","fillPrimaryKey","primaryPath","jsonSchema","documentData","newPrimary","getComposedPrimaryKeyOfDocumentData","existingPrimary","newRxError","args","schema","getPrimaryFieldOfPrimaryKey","key","getLengthOfPrimaryKey","schemaPart","ensureNotFalsy","compositePrimary","fields","map","field","join","separator","normalizeRxJsonSchema","normalizedSchema","sortObject","getDefaultIndex","schemaObj","flatClone","additionalProperties","Object","prototype","hasOwnProperty","call","keyCompression","slice","encrypted","_rev","minLength","_attachments","_deleted","_meta","RX_META_SCHEMA","push","finalFields","getFinalFields","appendToArray","filter","includes","elem","pos","arr","indexOf","useIndexes","index","arIndex","isMaybeReadonlyArray","unshift","length","internalIndexes","idx","hasIndex","Set","indexStr","has","add","exports","lwt","minimum","RX_META_LWT_MINIMUM","maximum","multipleOf","keys","final","forEach","fillObjectWithDefaults","rxSchema","obj","defaultKeys","defaultValues","i","DEFAULT_CHECKPOINT_SCHEMA","id"],"sources":["../../src/rx-schema-helper.ts"],"sourcesContent":["import { newRxError } from './rx-error.ts';\r\nimport type {\r\n    CompositePrimaryKey,\r\n    DeepReadonly,\r\n    JsonSchema,\r\n    PrimaryKey,\r\n    RxDocumentData,\r\n    RxJsonSchema,\r\n    RxStorageDefaultCheckpoint,\r\n    StringKeys\r\n} from './types/index.d.ts';\r\nimport {\r\n    appendToArray,\r\n    ensureNotFalsy,\r\n    flatClone,\r\n    getProperty,\r\n    isMaybeReadonlyArray,\r\n    REGEX_ALL_DOTS,\r\n    RX_META_LWT_MINIMUM,\r\n    sortObject,\r\n    trimDots\r\n} from './plugins/utils/index.ts';\r\nimport type { RxSchema } from './rx-schema.ts';\r\n\r\n/**\r\n * Helper function to create a valid RxJsonSchema\r\n * with a given version.\r\n */\r\nexport function getPseudoSchemaForVersion<T = any>(\r\n    version: number,\r\n    primaryKey: StringKeys<T>\r\n): RxJsonSchema<RxDocumentData<T>> {\r\n    const pseudoSchema: RxJsonSchema<RxDocumentData<T>> = fillWithDefaultSettings({\r\n        version,\r\n        type: 'object',\r\n        primaryKey: primaryKey as any,\r\n        properties: {\r\n            [primaryKey]: {\r\n                type: 'string',\r\n                maxLength: 100\r\n            },\r\n            value: {\r\n                type: 'string'\r\n            }\r\n        } as any,\r\n        indexes: [\r\n            [primaryKey]\r\n        ],\r\n        required: [primaryKey]\r\n    });\r\n    return pseudoSchema;\r\n}\r\n\r\n/**\r\n * Returns the sub-schema for a given path\r\n */\r\nexport function getSchemaByObjectPath<T = any>(\r\n    rxJsonSchema: RxJsonSchema<T>,\r\n    path: keyof T | string\r\n): JsonSchema {\r\n    let usePath: string = path as string;\r\n    usePath = usePath.replace(REGEX_ALL_DOTS, '.properties.');\r\n    usePath = 'properties.' + usePath;\r\n    usePath = trimDots(usePath);\r\n\r\n    const ret = getProperty(rxJsonSchema, usePath);\r\n    return ret;\r\n}\r\n\r\nexport function fillPrimaryKey<T>(\r\n    primaryPath: keyof T,\r\n    jsonSchema: RxJsonSchema<T>,\r\n    documentData: RxDocumentData<T>\r\n): RxDocumentData<T> {\r\n    // optimization shortcut.\r\n    if (typeof jsonSchema.primaryKey === 'string') {\r\n        return documentData;\r\n    }\r\n\r\n    const newPrimary = getComposedPrimaryKeyOfDocumentData<T>(\r\n        jsonSchema,\r\n        documentData\r\n    );\r\n    const existingPrimary: string | undefined = documentData[primaryPath] as any;\r\n    if (\r\n        existingPrimary &&\r\n        existingPrimary !== newPrimary\r\n    ) {\r\n        throw newRxError(\r\n            'DOC19',\r\n            {\r\n                args: {\r\n                    documentData,\r\n                    existingPrimary,\r\n                    newPrimary,\r\n                },\r\n                schema: jsonSchema\r\n            });\r\n    }\r\n\r\n    (documentData as any)[primaryPath] = newPrimary;\r\n    return documentData;\r\n}\r\n\r\nexport function getPrimaryFieldOfPrimaryKey<RxDocType>(\r\n    primaryKey: PrimaryKey<RxDocType>\r\n): StringKeys<RxDocType> {\r\n    if (typeof primaryKey === 'string') {\r\n        return primaryKey as any;\r\n    } else {\r\n        return (primaryKey as CompositePrimaryKey<RxDocType>).key;\r\n    }\r\n}\r\n\r\nexport function getLengthOfPrimaryKey<RxDocType>(\r\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>\r\n): number {\r\n    const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\r\n    const schemaPart = getSchemaByObjectPath(schema, primaryPath);\r\n    return ensureNotFalsy(schemaPart.maxLength);\r\n}\r\n\r\n/**\r\n * Returns the composed primaryKey of a document by its data.\r\n */\r\nexport function getComposedPrimaryKeyOfDocumentData<RxDocType>(\r\n    jsonSchema: RxJsonSchema<RxDocType> | RxJsonSchema<RxDocumentData<RxDocType>>,\r\n    documentData: Partial<RxDocType>\r\n): string {\r\n    if (typeof jsonSchema.primaryKey === 'string') {\r\n        return (documentData as any)[jsonSchema.primaryKey];\r\n    }\r\n\r\n    const compositePrimary: CompositePrimaryKey<RxDocType> = jsonSchema.primaryKey as any;\r\n    return compositePrimary.fields.map(field => {\r\n        const value = getProperty(documentData as any, field as string);\r\n        if (typeof value === 'undefined') {\r\n            throw newRxError('DOC18', { args: { field, documentData } });\r\n        }\r\n        return value;\r\n    }).join(compositePrimary.separator);\r\n}\r\n\r\n\r\n/**\r\n * Normalize the RxJsonSchema.\r\n * We need this to ensure everything is set up properly\r\n * and we have the same hash on schemas that represent the same value but\r\n * have different json.\r\n *\r\n * - Orders the schemas attributes by alphabetical order\r\n * - Adds the primaryKey to all indexes that do not contain the primaryKey\r\n * - We need this for deterministic sort order on all queries, which is required for event-reduce to work.\r\n *\r\n * @return RxJsonSchema - ordered and filled\r\n */\r\nexport function normalizeRxJsonSchema<T>(jsonSchema: RxJsonSchema<T>): RxJsonSchema<T> {\r\n    const normalizedSchema: RxJsonSchema<T> = sortObject(jsonSchema, true);\r\n    return normalizedSchema;\r\n}\r\n\r\n/**\r\n * If the schema does not specify any index,\r\n * we add this index so we at least can run RxQuery()\r\n * and only select non-deleted fields.\r\n */\r\nexport function getDefaultIndex(primaryPath: string) {\r\n    return ['_deleted', primaryPath];\r\n}\r\n\r\n/**\r\n * fills the schema-json with default-settings\r\n * @return cloned schemaObj\r\n */\r\nexport function fillWithDefaultSettings<T = any>(\r\n    schemaObj: RxJsonSchema<T>\r\n): RxJsonSchema<RxDocumentData<T>> {\r\n    schemaObj = flatClone(schemaObj);\r\n    const primaryPath: string = getPrimaryFieldOfPrimaryKey(schemaObj.primaryKey);\r\n    schemaObj.properties = flatClone(schemaObj.properties);\r\n\r\n    // additionalProperties is always false\r\n    schemaObj.additionalProperties = false;\r\n\r\n    // fill with key-compression-state ()\r\n    if (!Object.prototype.hasOwnProperty.call(schemaObj, 'keyCompression')) {\r\n        schemaObj.keyCompression = false;\r\n    }\r\n\r\n    // indexes must be array\r\n    schemaObj.indexes = schemaObj.indexes ? schemaObj.indexes.slice(0) : [];\r\n\r\n    // required must be array\r\n    schemaObj.required = schemaObj.required ? schemaObj.required.slice(0) : [];\r\n\r\n    // encrypted must be array\r\n    schemaObj.encrypted = schemaObj.encrypted ? schemaObj.encrypted.slice(0) : [];\r\n\r\n    // add _rev\r\n    (schemaObj.properties as any)._rev = {\r\n        type: 'string',\r\n        minLength: 1\r\n    };\r\n\r\n    // add attachments\r\n    (schemaObj.properties as any)._attachments = {\r\n        type: 'object'\r\n    };\r\n\r\n    // add deleted flag\r\n    (schemaObj.properties as any)._deleted = {\r\n        type: 'boolean'\r\n    };\r\n\r\n    // add meta property\r\n    (schemaObj.properties as any)._meta = RX_META_SCHEMA;\r\n\r\n    /**\r\n     * meta fields are all required\r\n     */\r\n    schemaObj.required = schemaObj.required ? schemaObj.required.slice(0) : [];\r\n    (schemaObj.required as string[]).push('_deleted');\r\n    (schemaObj.required as string[]).push('_rev');\r\n    (schemaObj.required as string[]).push('_meta');\r\n    (schemaObj.required as string[]).push('_attachments');\r\n\r\n    // final fields are always required\r\n    const finalFields = getFinalFields(schemaObj);\r\n    appendToArray(schemaObj.required as any, finalFields);\r\n    schemaObj.required = schemaObj.required\r\n        .filter((field: string) => !field.includes('.'))\r\n        .filter((elem: any, pos: any, arr: any) => arr.indexOf(elem) === pos); // unique;\r\n\r\n\r\n    // version is 0 by default\r\n    schemaObj.version = schemaObj.version || 0;\r\n\r\n    const useIndexes: string[][] = schemaObj.indexes.map(index => {\r\n        const arIndex = isMaybeReadonlyArray(index) ? index.slice(0) : [index];\r\n        /**\r\n         * Append primary key to indexes that do not contain the primaryKey.\r\n         * All indexes must have the primaryKey to ensure a deterministic sort order.\r\n         */\r\n        if (!arIndex.includes(primaryPath)) {\r\n            arIndex.push(primaryPath);\r\n        }\r\n\r\n        // add _deleted flag to all indexes so we can query only non-deleted fields\r\n        // in RxDB itself\r\n        if (arIndex[0] !== '_deleted') {\r\n            arIndex.unshift('_deleted');\r\n        }\r\n\r\n        return arIndex;\r\n    });\r\n\r\n    if (useIndexes.length === 0) {\r\n        useIndexes.push(getDefaultIndex(primaryPath));\r\n    }\r\n\r\n    // we need this index for the getChangedDocumentsSince() method\r\n    useIndexes.push(['_meta.lwt', primaryPath]);\r\n\r\n    // also add the internalIndexes\r\n    if (schemaObj.internalIndexes) {\r\n        schemaObj.internalIndexes.map(idx => {\r\n            useIndexes.push(idx);\r\n        });\r\n    }\r\n\r\n    // make indexes unique\r\n    const hasIndex = new Set<string>();\r\n    useIndexes.filter(index => {\r\n        const indexStr = index.join(',');\r\n        if (hasIndex.has(indexStr)) {\r\n            return false;\r\n        } else {\r\n            hasIndex.add(indexStr);\r\n            return true;\r\n        }\r\n    });\r\n\r\n    schemaObj.indexes = useIndexes;\r\n\r\n    return schemaObj as any;\r\n}\r\n\r\n\r\nexport const RX_META_SCHEMA: JsonSchema = {\r\n    type: 'object',\r\n    properties: {\r\n        /**\r\n         * The last-write time.\r\n         * Unix time in milliseconds.\r\n         */\r\n        lwt: {\r\n            type: 'number',\r\n            /**\r\n             * We use 1 as minimum so that the value is never falsy.\r\n             */\r\n            minimum: RX_META_LWT_MINIMUM,\r\n            maximum: 1000000000000000,\r\n            multipleOf: 0.01\r\n        }\r\n    },\r\n    /**\r\n     * Additional properties are allowed\r\n     * and can be used by plugins to set various flags.\r\n     */\r\n    additionalProperties: true as any,\r\n    required: [\r\n        'lwt'\r\n    ]\r\n};\r\n\r\n\r\n/**\r\n * returns the final-fields of the schema\r\n * @return field-names of the final-fields\r\n */\r\nexport function getFinalFields<T = any>(\r\n    jsonSchema: RxJsonSchema<T>\r\n): string[] {\r\n    const ret = Object.keys(jsonSchema.properties)\r\n        .filter(key => (jsonSchema as any).properties[key].final);\r\n\r\n    // primary is also final\r\n    const primaryPath = getPrimaryFieldOfPrimaryKey(jsonSchema.primaryKey);\r\n    ret.push(primaryPath);\r\n\r\n    // fields of composite primary are final\r\n    if (typeof jsonSchema.primaryKey !== 'string') {\r\n        (jsonSchema.primaryKey as CompositePrimaryKey<T>).fields\r\n            .forEach(field => ret.push(field as string));\r\n    }\r\n\r\n    return ret;\r\n}\r\n\r\n/**\r\n * fills all unset fields with default-values if set\r\n * @hotPath\r\n */\r\nexport function fillObjectWithDefaults(rxSchema: RxSchema<any>, obj: any): any {\r\n    const defaultKeys = Object.keys(rxSchema.defaultValues);\r\n    for (let i = 0; i < defaultKeys.length; ++i) {\r\n        const key = defaultKeys[i];\r\n        if (!Object.prototype.hasOwnProperty.call(obj, key) || typeof obj[key] === 'undefined') {\r\n            obj[key] = rxSchema.defaultValues[key];\r\n        }\r\n    }\r\n    return obj;\r\n}\r\n\r\nexport const DEFAULT_CHECKPOINT_SCHEMA: DeepReadonly<JsonSchema<RxStorageDefaultCheckpoint>> = {\r\n    type: 'object',\r\n    properties: {\r\n        id: {\r\n            type: 'string'\r\n        },\r\n        lwt: {\r\n            type: 'number'\r\n        }\r\n    },\r\n    required: [\r\n        'id',\r\n        'lwt'\r\n    ],\r\n    additionalProperties: false\r\n} as const;\r\n"],"mappings":"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","ignoreList":[]}