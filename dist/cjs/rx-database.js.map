{"version":3,"file":"rx-database.js","names":["_customIdleQueue","require","_obliviousSet","_index","_rxError","_rxSchema","_hooks","_rxjs","_operators","_rxCollection","_rxStorageHelper","_rxDatabaseInternalStore","_rxCollectionHelper","_overwritable","_rxChangeEvent","USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","exports","name","token","storage","instanceCreationOptions","password","multiInstance","eventReduce","options","internalStore","hashFunction","cleanupPolicy","allowSlowCount","reactivity","idleQueue","IdleQueue","rxdbVersion","RXDB_VERSION","storageInstances","_subs","startupErrors","onClose","closed","collections","states","eventBulks$","Subject","observable$","pipe","mergeMap","changeEventBulk","rxChangeEventBulkToRxChangeEvents","storageToken","PROMISE_RESOLVE_FALSE","storageTokenDocument","emittedEventBulkIds","ObliviousSet","getWrappedStorageInstance","asRxDatabase","INTERNAL_STORE_SCHEMA","ensureStorageTokenDocumentExists","catch","err","push","then","doc","data","_proto","prototype","getReactivityFactory","newRxError","database","$emit","has","id","add","next","removeCollectionDoc","schema","getSingleDocument","getPrimaryKeyOfInternalDocument","_collectionNamePrimary","INTERNAL_CONTEXT_COLLECTION","writeDoc","flatCloneDocWithMeta","_deleted","bulkWrite","document","previous","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","Promise","all","Object","entries","map","args","collectionName","rxJsonSchema","createRxSchema","collectionNameWithVersion","collectionDocData","key","context","schemaHash","hash","jsonSchema","version","connectedStorages","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_attachments","useArgs","assign","hookData","flatClone","runPluginHooks","conflictHandler","putDocsResult","ensureNoStartupErrors","error","status","writeError","docInDb","ensureNotFalsy","documentInDb","collection","previousSchemaHash","previousSchema","ret","keys","createRxCollection","defineProperty","get","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","pluginMissing","addState","_name","importJSON","_exportedJSON","backup","_options","leaderElector","isLeader","waitForLeadership","migrationStates","close","runAsyncPluginHooks","complete","sub","unsubscribe","col","delete","remove","removeRxDatabase","_createClass2","default","throwIfDatabaseNameUsed","link","createRxDatabaseStorageInstance","databaseInstanceToken","databaseName","createStorageInstance","INTERNAL_STORAGE_NAME","devMode","overwritable","isDevMode","createRxDatabase","ignoreDuplicate","localDocuments","defaultHashSha256","randomToken","storageInstance","rxDatabase","creator","dbInternalsStorageInstance","collectionDocs","getAllCollectionDocuments","collectionNames","forEach","removedCollectionNames","Array","from","removeCollectionStorages","isRxDatabase","obj","dbCount","isRxDatabaseFirstTimeInstantiated","tokenDoc","instanceToken"],"sources":["../../src/rx-database.ts"],"sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\r\nimport type {\r\n    LeaderElector\r\n} from 'broadcast-channel';\r\nimport { ObliviousSet } from 'oblivious-set';\r\nimport type {\r\n    CollectionsOfDatabase,\r\n    RxDatabase,\r\n    RxCollectionCreator,\r\n    RxJsonSchema,\r\n    RxCollection,\r\n    RxDumpDatabase,\r\n    RxDumpDatabaseAny,\r\n    BackupOptions,\r\n    RxStorage,\r\n    RxStorageInstance,\r\n    BulkWriteRow,\r\n    RxChangeEvent,\r\n    RxDatabaseCreator,\r\n    RxChangeEventBulk,\r\n    RxDocumentData,\r\n    RxCleanupPolicy,\r\n    InternalStoreDocType,\r\n    InternalStoreStorageTokenDocType,\r\n    InternalStoreCollectionDocType,\r\n    RxTypeError,\r\n    RxError,\r\n    HashFunction,\r\n    MaybePromise,\r\n    RxState\r\n} from './types/index.d.ts';\r\n\r\nimport {\r\n    pluginMissing,\r\n    flatClone,\r\n    PROMISE_RESOLVE_FALSE,\r\n    randomToken,\r\n    ensureNotFalsy,\r\n    getDefaultRevision,\r\n    getDefaultRxDocumentMeta,\r\n    defaultHashSha256,\r\n    RXDB_VERSION\r\n} from './plugins/utils/index.ts';\r\nimport {\r\n    newRxError\r\n} from './rx-error.ts';\r\nimport {\r\n    createRxSchema,\r\n    RxSchema\r\n} from './rx-schema.ts';\r\nimport {\r\n    runPluginHooks,\r\n    runAsyncPluginHooks\r\n} from './hooks.ts';\r\nimport {\r\n    Subject,\r\n    Subscription,\r\n    Observable\r\n} from 'rxjs';\r\nimport {\r\n    mergeMap\r\n} from 'rxjs/operators';\r\nimport {\r\n    createRxCollection\r\n} from './rx-collection.ts';\r\nimport {\r\n    flatCloneDocWithMeta,\r\n    getSingleDocument,\r\n    getWrappedStorageInstance,\r\n    INTERNAL_STORAGE_NAME,\r\n    WrappedRxStorageInstance\r\n} from './rx-storage-helper.ts';\r\nimport type { RxBackupState } from './plugins/backup/index.ts';\r\nimport {\r\n    ensureStorageTokenDocumentExists,\r\n    getAllCollectionDocuments,\r\n    getPrimaryKeyOfInternalDocument,\r\n    INTERNAL_CONTEXT_COLLECTION,\r\n    INTERNAL_STORE_SCHEMA,\r\n    _collectionNamePrimary\r\n} from './rx-database-internal-store.ts';\r\nimport { removeCollectionStorages } from './rx-collection-helper.ts';\r\nimport { overwritable } from './overwritable.ts';\r\nimport type { RxMigrationState } from './plugins/migration-schema/index.ts';\r\nimport type { RxReactivityFactory } from './types/plugins/reactivity.d.ts';\r\nimport { rxChangeEventBulkToRxChangeEvents } from './rx-change-event.ts';\r\n\r\n/**\r\n * stores the used database names+storage names\r\n * so we can throw when the same database is created more then once.\r\n */\r\nconst USED_DATABASE_NAMES: Set<string> = new Set();\r\n\r\nlet DB_COUNT = 0;\r\n\r\nexport class RxDatabaseBase<\r\n    Internals,\r\n    InstanceCreationOptions,\r\n    Collections = CollectionsOfDatabase,\r\n    Reactivity = unknown\r\n> {\r\n\r\n    public readonly idleQueue: IdleQueue = new IdleQueue();\r\n    public readonly rxdbVersion = RXDB_VERSION;\r\n\r\n    /**\r\n     * Contains all known non-closed storage instances\r\n     * that belong to this database.\r\n     * Used in plugins and unit tests.\r\n     */\r\n    public readonly storageInstances = new Set<WrappedRxStorageInstance<any, Internals, InstanceCreationOptions>>();\r\n\r\n    constructor(\r\n        public readonly name: string,\r\n        /**\r\n         * Uniquely identifies the instance\r\n         * of this RxDatabase.\r\n         */\r\n        public readonly token: string,\r\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\r\n        public readonly instanceCreationOptions: InstanceCreationOptions,\r\n        public readonly password: any,\r\n        public readonly multiInstance: boolean,\r\n        public readonly eventReduce: boolean = false,\r\n        public options: any = {},\r\n        /**\r\n         * Stores information documents about the collections of the database\r\n         */\r\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\r\n        public readonly hashFunction: HashFunction,\r\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>,\r\n        public readonly allowSlowCount?: boolean,\r\n        public readonly reactivity?: RxReactivityFactory<any>\r\n    ) {\r\n        DB_COUNT++;\r\n\r\n        /**\r\n         * In the dev-mode, we create a pseudoInstance\r\n         * to get all properties of RxDatabase and ensure they do not\r\n         * conflict with the collection names etc.\r\n         * So only if it is not pseudoInstance,\r\n         * we have all values to prepare a real RxDatabase.\r\n         *\r\n         * TODO this is ugly, we should use a different way in the dev-mode\r\n         * so that all non-dev-mode code can be cleaner.\r\n         */\r\n        if (this.name !== 'pseudoInstance') {\r\n            /**\r\n             * Wrap the internal store\r\n             * to ensure that calls to it also end up in\r\n             * calculation of the idle state and the hooks.\r\n             */\r\n            this.internalStore = getWrappedStorageInstance(\r\n                this.asRxDatabase,\r\n                internalStore,\r\n                INTERNAL_STORE_SCHEMA\r\n            );\r\n\r\n            /**\r\n             * Start writing the storage token.\r\n             * Do not await the creation because it would run\r\n             * in a critical path that increases startup time.\r\n             *\r\n             * Writing the token takes about 20 milliseconds\r\n             * even on a fast adapter, so this is worth it.\r\n             */\r\n            this.storageTokenDocument = ensureStorageTokenDocumentExists(this.asRxDatabase)\r\n                .catch(err => this.startupErrors.push(err) as any);\r\n            this.storageToken = this.storageTokenDocument\r\n                .then(doc => doc.data.token)\r\n                .catch(err => this.startupErrors.push(err) as any);\r\n        }\r\n    }\r\n\r\n    get $(): Observable<RxChangeEvent<any>> {\r\n        return this.observable$;\r\n    }\r\n\r\n    public getReactivityFactory(): RxReactivityFactory<Reactivity> {\r\n        if (!this.reactivity) {\r\n            throw newRxError('DB14', { database: this.name });\r\n        }\r\n        return this.reactivity;\r\n    }\r\n\r\n    public _subs: Subscription[] = [];\r\n\r\n    /**\r\n     * Because having unhandled exceptions would fail,\r\n     * we have to store the async errors of the constructor here\r\n     * so we can throw them later.\r\n     */\r\n    public startupErrors: (RxError | RxTypeError)[] = [];\r\n\r\n    /**\r\n     * When the database is closed,\r\n     * these functions will be called an awaited.\r\n     * Used to automatically clean up stuff that\r\n     * belongs to this collection.\r\n     */\r\n    public onClose: (() => MaybePromise<any>)[] = [];\r\n    public closed: boolean = false;\r\n    public collections: Collections = {} as any;\r\n    public states: { [name: string]: RxState<any, Reactivity>; } = {};\r\n\r\n    /**\r\n     * Internally only use eventBulks$\r\n     * Do not use .$ or .observable$ because that has to transform\r\n     * the events which decreases performance.\r\n     */\r\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\r\n\r\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\r\n        .pipe(\r\n            mergeMap(changeEventBulk => rxChangeEventBulkToRxChangeEvents(changeEventBulk))\r\n        );\r\n\r\n    /**\r\n     * Unique token that is stored with the data.\r\n     * Used to detect if the dataset has been deleted\r\n     * and if two RxDatabase instances work on the same dataset or not.\r\n     *\r\n     * Because reading and writing the storageToken runs in the hot path\r\n     * of database creation, we do not await the storageWrites but instead\r\n     * work with the promise when we need the value.\r\n     */\r\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\r\n    /**\r\n     * Stores the whole state of the internal storage token document.\r\n     * We need this in some plugins.\r\n     */\r\n    public storageTokenDocument: Promise<RxDocumentData<InternalStoreStorageTokenDocType>> = PROMISE_RESOLVE_FALSE as any;\r\n\r\n    /**\r\n     * Contains the ids of all event bulks that have been emitted\r\n     * by the database.\r\n     * Used to detect duplicates that come in again via BroadcastChannel\r\n     * or other streams.\r\n     * In the past we tried to remove this and to ensure\r\n     * all storages only emit the same event bulks only once\r\n     * but it turns out this is just not possible for all storages.\r\n     * JavaScript processes, workers and browser tabs can be closed and started at any time\r\n     * which can cause cases where it is not possible to know if an event bulk has been emitted already.\r\n     */\r\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\r\n\r\n    /**\r\n     * This is the main handle-point for all change events\r\n     * ChangeEvents created by this instance go:\r\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\r\n     * ChangeEvents created by other instances go:\r\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\r\n     */\r\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\r\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\r\n            return;\r\n        }\r\n        this.emittedEventBulkIds.add(changeEventBulk.id);\r\n        this.eventBulks$.next(changeEventBulk);\r\n    }\r\n\r\n    /**\r\n     * removes the collection-doc from the internalStore\r\n     */\r\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\r\n        const doc = await getSingleDocument(\r\n            this.internalStore,\r\n            getPrimaryKeyOfInternalDocument(\r\n                _collectionNamePrimary(name, schema),\r\n                INTERNAL_CONTEXT_COLLECTION\r\n            )\r\n        );\r\n        if (!doc) {\r\n            throw newRxError('SNH', { name, schema });\r\n        }\r\n        const writeDoc = flatCloneDocWithMeta(doc);\r\n        writeDoc._deleted = true;\r\n\r\n        await this.internalStore.bulkWrite([{\r\n            document: writeDoc,\r\n            previous: doc\r\n        }], 'rx-database-remove-collection');\r\n    }\r\n\r\n    /**\r\n     * creates multiple RxCollections at once\r\n     * to be much faster by saving db txs and doing stuff in bulk-operations\r\n     * This function is not called often, but mostly in the critical path at the initial page load\r\n     * So it must be as fast as possible.\r\n     */\r\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\r\n        [key in keyof CreatedCollections]: RxCollectionCreator<any>\r\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection<any, {}, {}, {}, Reactivity> }> {\r\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\r\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\r\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\r\n        const useArgsByCollectionName: any = {};\r\n\r\n        await Promise.all(\r\n            Object.entries(collectionCreators).map(async ([name, args]) => {\r\n                const collectionName: keyof CreatedCollections = name as any;\r\n                const rxJsonSchema = (args as RxCollectionCreator<any>).schema;\r\n                jsonSchemas[collectionName] = rxJsonSchema;\r\n                const schema = createRxSchema(rxJsonSchema, this.hashFunction);\r\n                schemas[collectionName] = schema;\r\n\r\n                // collection already exists\r\n                if ((this.collections as any)[name]) {\r\n                    throw newRxError('DB3', {\r\n                        name\r\n                    });\r\n                }\r\n\r\n                const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\r\n                const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\r\n                    id: getPrimaryKeyOfInternalDocument(\r\n                        collectionNameWithVersion,\r\n                        INTERNAL_CONTEXT_COLLECTION\r\n                    ),\r\n                    key: collectionNameWithVersion,\r\n                    context: INTERNAL_CONTEXT_COLLECTION,\r\n                    data: {\r\n                        name: collectionName as any,\r\n                        schemaHash: await schema.hash,\r\n                        schema: schema.jsonSchema,\r\n                        version: schema.version,\r\n                        connectedStorages: []\r\n                    },\r\n                    _deleted: false,\r\n                    _meta: getDefaultRxDocumentMeta(),\r\n                    _rev: getDefaultRevision(),\r\n                    _attachments: {}\r\n                };\r\n                bulkPutDocs.push({\r\n                    document: collectionDocData\r\n                });\r\n\r\n                const useArgs: any = Object.assign(\r\n                    {},\r\n                    args,\r\n                    {\r\n                        name: collectionName,\r\n                        schema,\r\n                        database: this\r\n                    }\r\n                );\r\n\r\n                // run hooks\r\n                const hookData: RxCollectionCreator<any> & { name: string; } = flatClone(args) as any;\r\n                (hookData as any).database = this;\r\n                hookData.name = name;\r\n                runPluginHooks('preCreateRxCollection', hookData);\r\n                useArgs.conflictHandler = hookData.conflictHandler;\r\n\r\n                useArgsByCollectionName[collectionName] = useArgs;\r\n            })\r\n        );\r\n\r\n\r\n        const putDocsResult = await this.internalStore.bulkWrite(\r\n            bulkPutDocs,\r\n            'rx-database-add-collection'\r\n        );\r\n\r\n        await ensureNoStartupErrors(this);\r\n\r\n        await Promise.all(\r\n            putDocsResult.error.map(async (error) => {\r\n                if (error.status !== 409) {\r\n                    throw newRxError('DB12', {\r\n                        database: this.name,\r\n                        writeError: error\r\n                    });\r\n                }\r\n                const docInDb: RxDocumentData<InternalStoreCollectionDocType> = ensureNotFalsy(error.documentInDb);\r\n                const collectionName = docInDb.data.name;\r\n                const schema = (schemas as any)[collectionName];\r\n                // collection already exists but has different schema\r\n                if (docInDb.data.schemaHash !== await schema.hash) {\r\n                    throw newRxError('DB6', {\r\n                        database: this.name,\r\n                        collection: collectionName,\r\n                        previousSchemaHash: docInDb.data.schemaHash,\r\n                        schemaHash: await schema.hash,\r\n                        previousSchema: docInDb.data.schema,\r\n                        schema: ensureNotFalsy((jsonSchemas as any)[collectionName])\r\n                    });\r\n                }\r\n            })\r\n        );\r\n\r\n        const ret: { [key in keyof CreatedCollections]: RxCollection<any, {}, {}, {}, Reactivity> } = {} as any;\r\n        await Promise.all(\r\n            Object.keys(collectionCreators).map(async (collectionName) => {\r\n                const useArgs = useArgsByCollectionName[collectionName];\r\n                const collection = await createRxCollection(useArgs);\r\n                (ret as any)[collectionName] = collection;\r\n\r\n                // set as getter to the database\r\n                (this.collections as any)[collectionName] = collection;\r\n                if (!(this as any)[collectionName]) {\r\n                    Object.defineProperty(this, collectionName, {\r\n                        get: () => (this.collections as any)[collectionName]\r\n                    });\r\n                }\r\n            })\r\n        );\r\n\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * runs the given function between idleQueue-locking\r\n     */\r\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\r\n        return this.idleQueue.wrapCall(fn) as any;\r\n    }\r\n\r\n    requestIdlePromise() {\r\n        return this.idleQueue.requestIdlePromise();\r\n    }\r\n\r\n    /**\r\n     * Export database to a JSON friendly format.\r\n     */\r\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\r\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\r\n    exportJSON(_collections?: string[]): Promise<any> {\r\n        throw pluginMissing('json-dump');\r\n    }\r\n\r\n    addState<T = any>(_name?: string): Promise<RxState<T, Reactivity>> {\r\n        throw pluginMissing('state');\r\n    }\r\n\r\n    /**\r\n     * Import the parsed JSON export into the collection.\r\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\r\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\r\n     * since data could be encrypted.\r\n     */\r\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\r\n        throw pluginMissing('json-dump');\r\n    }\r\n\r\n    backup(_options: BackupOptions): RxBackupState {\r\n        throw pluginMissing('backup');\r\n    }\r\n\r\n    public leaderElector(): LeaderElector {\r\n        throw pluginMissing('leader-election');\r\n    }\r\n\r\n    public isLeader(): boolean {\r\n        throw pluginMissing('leader-election');\r\n    }\r\n    /**\r\n     * returns a promise which resolves when the instance becomes leader\r\n     */\r\n    public waitForLeadership(): Promise<boolean> {\r\n        throw pluginMissing('leader-election');\r\n    }\r\n\r\n    public migrationStates(): Observable<RxMigrationState[]> {\r\n        throw pluginMissing('migration-schema');\r\n    }\r\n\r\n    /**\r\n     * closes the database-instance and all collections\r\n     */\r\n    public async close(): Promise<boolean> {\r\n        if (this.closed) {\r\n            return PROMISE_RESOLVE_FALSE;\r\n        }\r\n\r\n        // settings closed = true must be the first thing to do.\r\n        this.closed = true;\r\n\r\n        await runAsyncPluginHooks('preCloseRxDatabase', this);\r\n        /**\r\n         * Complete the event stream\r\n         * to stop all subscribers who forgot to unsubscribe.\r\n         */\r\n        this.eventBulks$.complete();\r\n\r\n        DB_COUNT--;\r\n        this._subs.map(sub => sub.unsubscribe());\r\n\r\n        /**\r\n         * closing the pseudo instance will throw\r\n         * because stuff is missing\r\n         * TODO we should not need the pseudo instance on runtime.\r\n         * we should generate the property list on build time.\r\n         */\r\n        if (this.name === 'pseudoInstance') {\r\n            return PROMISE_RESOLVE_FALSE;\r\n        }\r\n\r\n        /**\r\n         * First wait until the database is idle\r\n         */\r\n        return this.requestIdlePromise()\r\n            .then(() => Promise.all(this.onClose.map(fn => fn())))\r\n            // close all collections\r\n            .then(() => Promise.all(\r\n                Object.keys(this.collections as any)\r\n                    .map(key => (this.collections as any)[key])\r\n                    .map(col => col.close())\r\n            ))\r\n            // close internal storage instances\r\n            .then(() => this.internalStore.close())\r\n            // remove combination from USED_COMBINATIONS-map\r\n            .then(() => USED_DATABASE_NAMES.delete(this.storage.name + '|' + this.name))\r\n            .then(() => true);\r\n    }\r\n\r\n    /**\r\n     * deletes the database and its stored data.\r\n     * Returns the names of all removed collections.\r\n     */\r\n    remove(): Promise<string[]> {\r\n        return this\r\n            .close()\r\n            .then(() => removeRxDatabase(this.name, this.storage, this.multiInstance, this.password));\r\n    }\r\n\r\n    get asRxDatabase(): RxDatabase<\r\n        {},\r\n        Internals,\r\n        InstanceCreationOptions,\r\n        Reactivity\r\n    > {\r\n        return this as any;\r\n    }\r\n}\r\n\r\n/**\r\n * checks if an instance with same name and storage already exists\r\n * @throws {RxError} if used\r\n */\r\nfunction throwIfDatabaseNameUsed(\r\n    name: string,\r\n    storage: RxStorage<any, any>\r\n) {\r\n    const key = storage.name + '|' + name;\r\n    if (!USED_DATABASE_NAMES.has(key)) {\r\n        return;\r\n    } else {\r\n        throw newRxError('DB8', {\r\n            name,\r\n            storage: storage.name,\r\n            link: 'https://rxdb.info/rx-database.html#ignoreduplicate'\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Creates the storage instances that are used internally in the database\r\n * to store schemas and other configuration stuff.\r\n */\r\nexport async function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\r\n    databaseInstanceToken: string,\r\n    storage: RxStorage<Internals, InstanceCreationOptions>,\r\n    databaseName: string,\r\n    options: InstanceCreationOptions,\r\n    multiInstance: boolean,\r\n    password?: string\r\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\r\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\r\n        {\r\n            databaseInstanceToken,\r\n            databaseName,\r\n            collectionName: INTERNAL_STORAGE_NAME,\r\n            schema: INTERNAL_STORE_SCHEMA,\r\n            options,\r\n            multiInstance,\r\n            password,\r\n            devMode: overwritable.isDevMode()\r\n        }\r\n    );\r\n    return internalStore;\r\n}\r\n\r\nexport function createRxDatabase<\r\n    Collections = { [key: string]: RxCollection; },\r\n    Internals = any,\r\n    InstanceCreationOptions = any,\r\n    Reactivity = unknown\r\n>(\r\n    {\r\n        storage,\r\n        instanceCreationOptions,\r\n        name,\r\n        password,\r\n        multiInstance = true,\r\n        eventReduce = true,\r\n        ignoreDuplicate = false,\r\n        options = {},\r\n        cleanupPolicy,\r\n        allowSlowCount = false,\r\n        localDocuments = false,\r\n        hashFunction = defaultHashSha256,\r\n        reactivity\r\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions, Reactivity>\r\n): Promise<\r\n    RxDatabase<Collections, Internals, InstanceCreationOptions, Reactivity>\r\n> {\r\n    runPluginHooks('preCreateRxDatabase', {\r\n        storage,\r\n        instanceCreationOptions,\r\n        name,\r\n        password,\r\n        multiInstance,\r\n        eventReduce,\r\n        ignoreDuplicate,\r\n        options,\r\n        localDocuments\r\n    });\r\n    // check if combination already used\r\n    if (!ignoreDuplicate) {\r\n        throwIfDatabaseNameUsed(name, storage);\r\n    } else {\r\n        if (!overwritable.isDevMode()) {\r\n            throw newRxError('DB9', {\r\n                database: name\r\n            });\r\n        }\r\n    }\r\n    USED_DATABASE_NAMES.add(storage.name + '|' + name);\r\n\r\n    const databaseInstanceToken = randomToken(10);\r\n\r\n    return createRxDatabaseStorageInstance<\r\n        Internals,\r\n        InstanceCreationOptions\r\n    >(\r\n        databaseInstanceToken,\r\n        storage,\r\n        name,\r\n        instanceCreationOptions as any,\r\n        multiInstance,\r\n        password\r\n    )\r\n        /**\r\n         * Creating the internal store might fail\r\n         * if some RxStorage wrapper is used that does some checks\r\n         * and then throw.\r\n         * In that case we have to properly clean up the database.\r\n         */\r\n        .catch(err => {\r\n            USED_DATABASE_NAMES.delete(storage.name + '|' + name);\r\n            throw err;\r\n        })\r\n        .then(storageInstance => {\r\n            const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\r\n                name,\r\n                databaseInstanceToken,\r\n                storage,\r\n                instanceCreationOptions,\r\n                password,\r\n                multiInstance,\r\n                eventReduce,\r\n                options,\r\n                storageInstance,\r\n                hashFunction,\r\n                cleanupPolicy,\r\n                allowSlowCount,\r\n                reactivity\r\n            ) as any;\r\n\r\n            return runAsyncPluginHooks('createRxDatabase', {\r\n                database: rxDatabase,\r\n                creator: {\r\n                    storage,\r\n                    instanceCreationOptions,\r\n                    name,\r\n                    password,\r\n                    multiInstance,\r\n                    eventReduce,\r\n                    ignoreDuplicate,\r\n                    options,\r\n                    localDocuments\r\n                }\r\n            }).then(() => rxDatabase);\r\n        });\r\n}\r\n\r\n/**\r\n * Removes the database and all its known data\r\n * with all known collections and all internal meta data.\r\n *\r\n * Returns the names of the removed collections.\r\n */\r\nexport async function removeRxDatabase(\r\n    databaseName: string,\r\n    storage: RxStorage<any, any>,\r\n    multiInstance: boolean = true,\r\n    password?: string\r\n): Promise<string[]> {\r\n    const databaseInstanceToken = randomToken(10);\r\n    const dbInternalsStorageInstance = await createRxDatabaseStorageInstance(\r\n        databaseInstanceToken,\r\n        storage,\r\n        databaseName,\r\n        {},\r\n        multiInstance,\r\n        password\r\n    );\r\n    const collectionDocs = await getAllCollectionDocuments(dbInternalsStorageInstance);\r\n    const collectionNames = new Set<string>();\r\n    collectionDocs.forEach(doc => collectionNames.add(doc.data.name));\r\n    const removedCollectionNames: string[] = Array.from(collectionNames);\r\n\r\n    await Promise.all(\r\n        removedCollectionNames.map(collectionName => removeCollectionStorages(\r\n            storage,\r\n            dbInternalsStorageInstance,\r\n            databaseInstanceToken,\r\n            databaseName,\r\n            collectionName,\r\n            multiInstance,\r\n            password\r\n        ))\r\n    );\r\n\r\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\r\n        databaseName,\r\n        storage\r\n    });\r\n\r\n    await dbInternalsStorageInstance.remove();\r\n    return removedCollectionNames;\r\n}\r\n\r\nexport function isRxDatabase(obj: any) {\r\n    return obj instanceof RxDatabaseBase;\r\n}\r\n\r\nexport function dbCount(): number {\r\n    return DB_COUNT;\r\n}\r\n\r\n\r\n/**\r\n * Returns true if the given RxDatabase was the first\r\n * instance that was created on the storage with this name.\r\n *\r\n * Can be used for some optimizations because on the first instantiation,\r\n * we can assume that no data was written before.\r\n */\r\nexport async function isRxDatabaseFirstTimeInstantiated(\r\n    database: RxDatabase\r\n): Promise<boolean> {\r\n    const tokenDoc = await database.storageTokenDocument;\r\n    return tokenDoc.data.instanceToken === database.token;\r\n}\r\n\r\n\r\n/**\r\n * For better performance some tasks run async\r\n * and are awaited later.\r\n * But we still have to ensure that there have been no errors\r\n * on database creation.\r\n */\r\nexport async function ensureNoStartupErrors(\r\n    rxDatabase: RxDatabaseBase<any, any, any, any>\r\n) {\r\n    await rxDatabase.storageToken;\r\n    if (rxDatabase.startupErrors[0]) {\r\n        throw rxDatabase.startupErrors[0];\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]}