{"version":3,"file":"upstream.js","names":["_rxjs","require","_rxStorageHelper","_index","_checkpoint","_conflicts","_helper","_metaInstance","_index2","_rxError","startReplicationUpstream","state","input","initialCheckpoint","upstream","checkpointDoc","getLastCheckpointDoc","setCheckpoint","replicationHandler","streamQueue","up","then","upstreamInitialSync","processTasks","timer","initialSyncStartTime","openTasks","persistenceQueue","PROMISE_RESOLVE_FALSE","nonPersistedFromMaster","docs","sub","forkInstance","changeStream","subscribe","eventBulk","events","paused","getValue","stats","forkChangeStreamEmit","push","task","time","active","next","waitBeforePersist","subResync","masterChangeStream$","pipe","filter","ev","firstValueFrom","canceled","unsubscribe","checkpointQueue","lastCheckpoint","promises","Set","_loop","size","Promise","race","Array","from","upResult","getChangedDocumentsSince","pushBatchSize","documents","length","stackCheckpoints","checkpoint","promise","persistToMaster","ensureNotFalsy","add","catch","delete","resolvedPromises","all","hadConflicts","find","r","firstSyncDone","taskWithTime","shift","context","downstreamBulkWriteFlag","appendToArray","map","documentData","forEach","docData","docId","primaryPath","upDocsById","useCheckpoint","docIds","Object","keys","rememberCheckpointBeforeReturn","assumedMasterState","getAssumedMasterState","writeRowsToMaster","writeRowsToMasterIds","writeRowsToMeta","forkStateById","fullDocData","writeDocToDocState","hasAttachments","keepMeta","assumedMasterDoc","metaDocument","isResolvedConflict","_rev","conflictHandler","isEqual","getHeightOfRevision","_meta","identifier","undefined","newDocumentState","getMetaWriteRow","writeRowsArray","values","conflictIds","conflictsById","writeBatches","batchArray","writeBatch","row","fillWriteDataForAttachmentsChange","clone","masterWriteResult","masterWrite","conflictDoc","id","useWriteRowsToMeta","has","processed","metaInstance","bulkWrite","stripAttachmentsDataFromMetaWriteRows","hadConflictWrites","persistToMasterHadConflicts","conflictWriteFork","conflictWriteMeta","entries","realMasterState","writeToMasterRow","resolveConflictError","resolved","resolvedConflicts","output","previous","document","persistToMasterConflictWrites","forkWriteResult","mustThrow","error","status","throwMe","newRxError","writeError","useMetaWrites","success","getWrittenDocumentsFromBulkWriteResponse","unhandledError"],"sources":["../../../src/replication-protocol/upstream.ts"],"sourcesContent":["import { firstValueFrom, filter } from 'rxjs';\r\nimport {\r\n    getChangedDocumentsSince,\r\n    getWrittenDocumentsFromBulkWriteResponse,\r\n    stackCheckpoints\r\n} from '../rx-storage-helper.ts';\r\nimport type {\r\n    BulkWriteRow,\r\n    BulkWriteRowById,\r\n    ById,\r\n    EventBulk,\r\n    RxDocumentData,\r\n    RxError,\r\n    RxReplicationWriteToMasterRow,\r\n    RxStorageChangeEvent,\r\n    RxStorageInstanceReplicationState,\r\n    RxStorageReplicationMeta,\r\n    WithDeleted\r\n} from '../types/index.d.ts';\r\nimport {\r\n    appendToArray,\r\n    batchArray,\r\n    clone,\r\n    ensureNotFalsy,\r\n    getHeightOfRevision,\r\n    PROMISE_RESOLVE_FALSE\r\n} from '../plugins/utils/index.ts';\r\nimport {\r\n    getLastCheckpointDoc,\r\n    setCheckpoint\r\n} from './checkpoint.ts';\r\nimport {\r\n    resolveConflictError\r\n} from './conflicts.ts';\r\nimport {\r\n    stripAttachmentsDataFromMetaWriteRows,\r\n    writeDocToDocState\r\n} from './helper.ts';\r\nimport {\r\n    getAssumedMasterState,\r\n    getMetaWriteRow\r\n} from './meta-instance.ts';\r\nimport { fillWriteDataForAttachmentsChange } from '../plugins/attachments/index.ts';\r\nimport { newRxError } from '../rx-error.ts';\r\n\r\n/**\r\n * Writes all document changes from the fork to the master.\r\n * The upstream runs on two modes:\r\n * - For initial replication, a checkpoint-iteration is used\r\n * - For ongoing local writes, we just subscribe to the changeStream of the fork.\r\n *   In contrast to the master, the fork can be assumed to never loose connection,\r\n *   so we do not have to prepare for missed out events.\r\n */\r\nexport async function startReplicationUpstream<RxDocType, CheckpointType>(\r\n    state: RxStorageInstanceReplicationState<RxDocType>\r\n) {\r\n    if (\r\n        state.input.initialCheckpoint &&\r\n        state.input.initialCheckpoint.upstream\r\n    ) {\r\n        const checkpointDoc = await getLastCheckpointDoc(state, 'up');\r\n        if (!checkpointDoc) {\r\n            await setCheckpoint(\r\n                state,\r\n                'up',\r\n                state.input.initialCheckpoint.upstream\r\n            );\r\n        }\r\n    }\r\n\r\n    const replicationHandler = state.input.replicationHandler;\r\n    state.streamQueue.up = state.streamQueue.up.then(() => {\r\n        return upstreamInitialSync().then(() => {\r\n            return processTasks();\r\n        });\r\n    });\r\n\r\n    // used to detect which tasks etc can in it at which order.\r\n    let timer = 0;\r\n    let initialSyncStartTime = -1;\r\n\r\n    type Task = EventBulk<RxStorageChangeEvent<RxDocType>, any> | 'RESYNC';\r\n    type TaskWithTime = {\r\n        task: Task;\r\n        time: number;\r\n    };\r\n    const openTasks: TaskWithTime[] = [];\r\n    let persistenceQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\r\n    const nonPersistedFromMaster: {\r\n        checkpoint?: CheckpointType;\r\n        docs: ById<RxDocumentData<RxDocType>>;\r\n    } = {\r\n        docs: {}\r\n    };\r\n\r\n    const sub = state.input.forkInstance.changeStream()\r\n        .subscribe((eventBulk) => {\r\n            if (state.events.paused.getValue()) {\r\n                return;\r\n            }\r\n\r\n\r\n            state.stats.up.forkChangeStreamEmit = state.stats.up.forkChangeStreamEmit + 1;\r\n            openTasks.push({\r\n                task: eventBulk,\r\n                time: timer++\r\n            });\r\n            if (!state.events.active.up.getValue()) {\r\n                state.events.active.up.next(true);\r\n            }\r\n            if (state.input.waitBeforePersist) {\r\n                return state.input.waitBeforePersist()\r\n                    .then(() => processTasks());\r\n            } else {\r\n                return processTasks();\r\n            }\r\n        });\r\n    const subResync = replicationHandler\r\n        .masterChangeStream$\r\n        .pipe(\r\n            filter(ev => ev === 'RESYNC')\r\n        )\r\n        .subscribe(() => {\r\n            openTasks.push({\r\n                task: 'RESYNC',\r\n                time: timer++\r\n            });\r\n            processTasks();\r\n        });\r\n\r\n    // unsubscribe when replication is canceled\r\n    firstValueFrom(\r\n        state.events.canceled.pipe(\r\n            filter(canceled => !!canceled)\r\n        )\r\n    ).then(() => {\r\n        sub.unsubscribe();\r\n        subResync.unsubscribe();\r\n    });\r\n\r\n\r\n    async function upstreamInitialSync() {\r\n        state.stats.up.upstreamInitialSync = state.stats.up.upstreamInitialSync + 1;\r\n        if (state.events.canceled.getValue()) {\r\n            return;\r\n        }\r\n\r\n        state.checkpointQueue = state.checkpointQueue.then(() => getLastCheckpointDoc(state, 'up'));\r\n        let lastCheckpoint: CheckpointType = await state.checkpointQueue;\r\n\r\n        const promises: Set<Promise<any>> = new Set();\r\n\r\n        while (!state.events.canceled.getValue()) {\r\n            initialSyncStartTime = timer++;\r\n\r\n            /**\r\n             * Throttle the calls to\r\n             * forkInstance.getChangedDocumentsSince() so that\r\n             * if the pushing to the remote is slower compared to the\r\n             * pulling out of forkInstance, we do not block the UI too much\r\n             * and have a big memory spike with all forkInstance documents.\r\n             */\r\n            if (promises.size > 3) {\r\n                await Promise.race(Array.from(promises));\r\n            }\r\n            const upResult = await getChangedDocumentsSince(\r\n                state.input.forkInstance,\r\n                state.input.pushBatchSize,\r\n                lastCheckpoint\r\n            );\r\n            if (upResult.documents.length === 0) {\r\n                break;\r\n            }\r\n\r\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, upResult.checkpoint]);\r\n\r\n            const promise = persistToMaster(\r\n                upResult.documents,\r\n                ensureNotFalsy(lastCheckpoint)\r\n            );\r\n            promises.add(promise);\r\n            promise.catch().then(() => promises.delete(promise));\r\n        }\r\n\r\n        /**\r\n         * If we had conflicts during the initial sync,\r\n         * it means that we likely have new writes to the fork\r\n         * and so we have to run the initial sync again to upstream these new writes.\r\n         */\r\n        const resolvedPromises = await Promise.all(promises);\r\n        const hadConflicts = resolvedPromises.find(r => !!r);\r\n        if (hadConflicts) {\r\n            await upstreamInitialSync();\r\n        } else if (\r\n            !state.firstSyncDone.up.getValue() &&\r\n            !state.events.canceled.getValue()\r\n        ) {\r\n            state.firstSyncDone.up.next(true);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Takes all open tasks an processes them at once.\r\n     */\r\n    function processTasks() {\r\n        if (\r\n            state.events.canceled.getValue() ||\r\n            openTasks.length === 0\r\n        ) {\r\n            state.events.active.up.next(false);\r\n            return;\r\n        }\r\n        state.stats.up.processTasks = state.stats.up.processTasks + 1;\r\n        state.events.active.up.next(true);\r\n        state.streamQueue.up = state.streamQueue.up.then(async () => {\r\n            /**\r\n             * Merge/filter all open tasks\r\n             */\r\n            const docs: RxDocumentData<RxDocType>[] = [];\r\n            let checkpoint: CheckpointType = {} as any;\r\n            while (openTasks.length > 0) {\r\n                const taskWithTime = ensureNotFalsy(openTasks.shift());\r\n                /**\r\n                 * If the task came in before the last time the initial sync fetching\r\n                 * has run, we can ignore the task because the initial sync already processed\r\n                 * these documents.\r\n                 */\r\n                if (taskWithTime.time < initialSyncStartTime) {\r\n                    continue;\r\n                }\r\n\r\n                if (taskWithTime.task === 'RESYNC') {\r\n                    state.events.active.up.next(false);\r\n                    await upstreamInitialSync();\r\n                    return;\r\n                }\r\n\r\n                /**\r\n                 * If the task came from the downstream, we can ignore these documents\r\n                 * because we know they are replicated already.\r\n                 * But even if they can be ignored, we later have to call persistToMaster()\r\n                 * to have the correct checkpoint set.\r\n                 */\r\n                if (taskWithTime.task.context !== await state.downstreamBulkWriteFlag) {\r\n                    appendToArray(\r\n                        docs,\r\n                        taskWithTime.task.events.map(r => {\r\n                            return r.documentData as any;\r\n                        })\r\n                    );\r\n                }\r\n                checkpoint = stackCheckpoints([checkpoint, taskWithTime.task.checkpoint]);\r\n            }\r\n\r\n            await persistToMaster(\r\n                docs,\r\n                checkpoint\r\n            );\r\n\r\n            // might have got more tasks while running persistToMaster()\r\n            if (openTasks.length === 0) {\r\n                state.events.active.up.next(false);\r\n            } else {\r\n                return processTasks();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns true if had conflicts,\r\n     * false if not.\r\n     */\r\n    function persistToMaster(\r\n        docs: RxDocumentData<RxDocType>[],\r\n        checkpoint: CheckpointType\r\n    ): Promise<boolean> {\r\n        state.stats.up.persistToMaster = state.stats.up.persistToMaster + 1;\r\n\r\n        /**\r\n         * Add the new docs to the non-persistent list\r\n         */\r\n        docs.forEach(docData => {\r\n            const docId: string = (docData as any)[state.primaryPath];\r\n            nonPersistedFromMaster.docs[docId] = docData;\r\n        });\r\n        nonPersistedFromMaster.checkpoint = checkpoint;\r\n\r\n        persistenceQueue = persistenceQueue.then(async () => {\r\n            if (state.events.canceled.getValue()) {\r\n                return false;\r\n            }\r\n\r\n            const upDocsById: ById<RxDocumentData<RxDocType>> = nonPersistedFromMaster.docs;\r\n            nonPersistedFromMaster.docs = {};\r\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\r\n            const docIds = Object.keys(upDocsById);\r\n            /**\r\n             * Even if we do not have anything to push,\r\n             * we still have to store the up-checkpoint.\r\n             * This ensures that when many documents have been pulled\r\n             * from the remote (that do not have to be pushed again),\r\n             * we continue at the correct position and do not have to load\r\n             * these documents from the storage again when the replication is restarted.\r\n             */\r\n            function rememberCheckpointBeforeReturn() {\r\n                return setCheckpoint(\r\n                    state,\r\n                    'up',\r\n                    useCheckpoint\r\n                );\r\n            };\r\n\r\n\r\n            if (docIds.length === 0) {\r\n                rememberCheckpointBeforeReturn();\r\n                return false;\r\n            }\r\n\r\n            const assumedMasterState = await getAssumedMasterState(\r\n                state,\r\n                docIds\r\n            );\r\n\r\n            const writeRowsToMaster: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\r\n            const writeRowsToMasterIds: string[] = [];\r\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta<RxDocType, any>> = {};\r\n            const forkStateById: ById<RxDocumentData<RxDocType>> = {};\r\n\r\n            await Promise.all(\r\n                docIds.map(async (docId) => {\r\n                    const fullDocData: RxDocumentData<RxDocType> = upDocsById[docId];\r\n                    forkStateById[docId] = fullDocData;\r\n                    const docData: WithDeleted<RxDocType> = writeDocToDocState(fullDocData, state.hasAttachments, !!state.input.keepMeta);\r\n                    const assumedMasterDoc = assumedMasterState[docId];\r\n\r\n                    /**\r\n                     * If the master state is equal to the\r\n                     * fork state, we can assume that the document state is already\r\n                     * replicated.\r\n                     */\r\n                    if (\r\n                        (\r\n                            assumedMasterDoc &&\r\n                            // if the isResolvedConflict is correct, we do not have to compare the documents.\r\n                            assumedMasterDoc.metaDocument.isResolvedConflict !== fullDocData._rev\r\n                            &&\r\n                            (\r\n                                state.input.conflictHandler.isEqual(\r\n                                    assumedMasterDoc.docData,\r\n                                    docData,\r\n                                    'upstream-check-if-equal'\r\n                                )\r\n                            )\r\n                        )\r\n                        ||\r\n                        /**\r\n                         * If the master works with _rev fields,\r\n                         * we use that to check if our current doc state\r\n                         * is different from the assumedMasterDoc.\r\n                         */\r\n                        (\r\n                            assumedMasterDoc &&\r\n                            (assumedMasterDoc.docData as any)._rev &&\r\n                            getHeightOfRevision(fullDocData._rev) === fullDocData._meta[state.input.identifier]\r\n                        )\r\n                    ) {\r\n                        return;\r\n                    }\r\n\r\n                    writeRowsToMasterIds.push(docId);\r\n\r\n                    writeRowsToMaster[docId] = {\r\n                        assumedMasterState: assumedMasterDoc ? assumedMasterDoc.docData : undefined,\r\n                        newDocumentState: docData\r\n                    };\r\n                    writeRowsToMeta[docId] = await getMetaWriteRow(\r\n                        state,\r\n                        docData,\r\n                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined\r\n                    );\r\n                })\r\n            );\r\n\r\n            if (writeRowsToMasterIds.length === 0) {\r\n                rememberCheckpointBeforeReturn();\r\n                return false;\r\n            }\r\n\r\n\r\n            const writeRowsArray = Object.values(writeRowsToMaster);\r\n            const conflictIds: Set<string> = new Set();\r\n            const conflictsById: ById<WithDeleted<RxDocType>> = {};\r\n\r\n            /**\r\n             * To always respect the push.batchSize,\r\n             * we have to split the write rows into batches\r\n             * to ensure that replicationHandler.masterWrite() is never\r\n             * called with more documents than what the batchSize limits.\r\n             */\r\n            const writeBatches = batchArray(writeRowsArray, state.input.pushBatchSize);\r\n            await Promise.all(\r\n                writeBatches.map(async (writeBatch) => {\r\n\r\n                    // enhance docs with attachments\r\n                    if (state.hasAttachments) {\r\n                        await Promise.all(\r\n                            writeBatch.map(async (row) => {\r\n                                row.newDocumentState = await fillWriteDataForAttachmentsChange(\r\n                                    state.primaryPath,\r\n                                    state.input.forkInstance,\r\n                                    clone(row.newDocumentState),\r\n                                    row.assumedMasterState\r\n                                );\r\n                            })\r\n                        );\r\n                    }\r\n                    const masterWriteResult = await replicationHandler.masterWrite(writeBatch);\r\n                    masterWriteResult.forEach(conflictDoc => {\r\n                        const id = (conflictDoc as any)[state.primaryPath];\r\n                        conflictIds.add(id);\r\n                        conflictsById[id] = conflictDoc;\r\n                    });\r\n                })\r\n            );\r\n\r\n            const useWriteRowsToMeta: BulkWriteRow<RxStorageReplicationMeta<RxDocType, any>>[] = [];\r\n\r\n            writeRowsToMasterIds.forEach(docId => {\r\n                if (!conflictIds.has(docId)) {\r\n                    state.events.processed.up.next(writeRowsToMaster[docId]);\r\n                    useWriteRowsToMeta.push(writeRowsToMeta[docId]);\r\n                }\r\n            });\r\n\r\n            if (state.events.canceled.getValue()) {\r\n                return false;\r\n            }\r\n\r\n            if (useWriteRowsToMeta.length > 0) {\r\n                await state.input.metaInstance.bulkWrite(\r\n                    stripAttachmentsDataFromMetaWriteRows(state, useWriteRowsToMeta),\r\n                    'replication-up-write-meta'\r\n                );\r\n                // TODO what happens when we have conflicts here?\r\n            }\r\n\r\n            /**\r\n             * Resolve conflicts by writing a new document\r\n             * state to the fork instance and the 'real' master state\r\n             * to the meta instance.\r\n             * Non-409 errors will be detected by resolveConflictError()\r\n             */\r\n            let hadConflictWrites = false;\r\n            if (conflictIds.size > 0) {\r\n                state.stats.up.persistToMasterHadConflicts = state.stats.up.persistToMasterHadConflicts + 1;\r\n                const conflictWriteFork: BulkWriteRow<RxDocType>[] = [];\r\n                const conflictWriteMeta: BulkWriteRowById<RxStorageReplicationMeta<RxDocType, any>> = {};\r\n                await Promise.all(\r\n                    Object\r\n                        .entries(conflictsById)\r\n                        .map(([docId, realMasterState]) => {\r\n                            const writeToMasterRow = writeRowsToMaster[docId];\r\n                            const input = {\r\n                                newDocumentState: writeToMasterRow.newDocumentState,\r\n                                assumedMasterState: writeToMasterRow.assumedMasterState,\r\n                                realMasterState\r\n                            };\r\n                            return resolveConflictError(\r\n                                state,\r\n                                input,\r\n                                forkStateById[docId]\r\n                            ).then(async (resolved) => {\r\n                                if (resolved) {\r\n                                    state.events.resolvedConflicts.next({\r\n                                        input,\r\n                                        output: resolved\r\n                                    });\r\n                                    conflictWriteFork.push({\r\n                                        previous: forkStateById[docId],\r\n                                        document: resolved\r\n                                    });\r\n                                    const assumedMasterDoc = assumedMasterState[docId];\r\n                                    conflictWriteMeta[docId] = await getMetaWriteRow(\r\n                                        state,\r\n                                        ensureNotFalsy(realMasterState),\r\n                                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined,\r\n                                        resolved._rev\r\n                                    );\r\n                                }\r\n                            });\r\n                        })\r\n                );\r\n\r\n                if (conflictWriteFork.length > 0) {\r\n                    hadConflictWrites = true;\r\n\r\n                    state.stats.up.persistToMasterConflictWrites = state.stats.up.persistToMasterConflictWrites + 1;\r\n                    const forkWriteResult = await state.input.forkInstance.bulkWrite(\r\n                        conflictWriteFork,\r\n                        'replication-up-write-conflict'\r\n                    );\r\n\r\n                    let mustThrow: RxError | undefined;\r\n                    forkWriteResult.error.forEach(error => {\r\n                        /**\r\n                         * Conflict-Errors in the forkWriteResult must not be handled\r\n                         * because they have been caused by a write to the forkInstance\r\n                         * in between which will anyway trigger a new upstream cycle\r\n                         * that will then resolved the conflict again.\r\n                         */\r\n                        if (error.status === 409) {\r\n                            return;\r\n                        }\r\n                        // other non-conflict errors must be handled\r\n                        const throwMe = newRxError('RC_PUSH', {\r\n                            writeError: error\r\n                        });\r\n                        state.events.error.next(throwMe);\r\n                        mustThrow = throwMe;\r\n                    });\r\n                    if (mustThrow) {\r\n                        throw mustThrow;\r\n                    }\r\n\r\n                    const useMetaWrites: BulkWriteRow<RxStorageReplicationMeta<RxDocType, any>>[] = [];\r\n                    const success = getWrittenDocumentsFromBulkWriteResponse(\r\n                        state.primaryPath,\r\n                        conflictWriteFork,\r\n                        forkWriteResult\r\n                    );\r\n                    success\r\n                        .forEach(docData => {\r\n                            const docId = (docData as any)[state.primaryPath];\r\n                            useMetaWrites.push(\r\n                                conflictWriteMeta[docId]\r\n                            );\r\n                        });\r\n                    if (useMetaWrites.length > 0) {\r\n                        await state.input.metaInstance.bulkWrite(\r\n                            stripAttachmentsDataFromMetaWriteRows(state, useMetaWrites),\r\n                            'replication-up-write-conflict-meta'\r\n                        );\r\n                    }\r\n                    // TODO what to do with conflicts while writing to the metaInstance?\r\n                }\r\n            }\r\n\r\n            /**\r\n             * For better performance we do not await checkpoint writes,\r\n             * but to ensure order on parallel checkpoint writes,\r\n             * we have to use a queue.\r\n             */\r\n            rememberCheckpointBeforeReturn();\r\n\r\n            return hadConflictWrites;\r\n        }).catch(unhandledError => {\r\n            state.events.error.next(unhandledError);\r\n            return false;\r\n        });\r\n\r\n        return persistenceQueue;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]}