{"version":3,"file":"index.js","names":["_rxjs","require","_rxSchemaHelper","_index","_checkpoint","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_downstream","_helper","_upstream","_index2","_rxStorageHelper","_rxError","_metaInstance","_conflicts","_defaultConflictHandler","replicateRxStorageInstance","input","flatClone","forkInstance","getUnderlyingPersistentStorage","metaInstance","checkpointKeyPromise","getCheckpointKey","state","primaryPath","getPrimaryFieldOfPrimaryKey","schema","primaryKey","hasAttachments","attachments","checkpointKey","downstreamBulkWriteFlag","then","events","canceled","BehaviorSubject","paused","active","down","up","processed","Subject","resolvedConflicts","error","stats","addNewTask","downstreamProcessChanges","downstreamResyncOnce","masterChangeStreamEmit","persistFromMaster","forkChangeStreamEmit","persistToMaster","persistToMasterConflictWrites","persistToMasterHadConflicts","processTasks","upstreamInitialSync","firstSyncDone","streamQueue","PROMISE_RESOLVE_VOID","checkpointQueue","lastCheckpointDoc","startReplicationDownstream","startReplicationUpstream","awaitRxStorageReplicationFirstInSync","firstValueFrom","combineLatest","pipe","filter","v","awaitRxStorageReplicationInSync","replicationState","Promise","all","awaitRxStorageReplicationIdle","rxStorageInstanceToReplicationHandler","instance","conflictHandler","databaseInstanceToken","keepMeta","replicationHandler","masterChangeStream$","changeStream","mergeMap","eventBulk","ret","checkpoint","documents","map","event","docData","writeDocToDocState","documentData","fillWriteDataForAttachmentsChange","clone","undefined","masterChangesSince","batchSize","getChangedDocumentsSince","result","length","plainDocumentData","masterWrite","rows","rowById","row","docId","newDocumentState","ids","masterDocsStateList","findDocumentsById","masterDocsState","Map","doc","set","conflicts","writeRows","entries","id","masterState","push","document","docStateToWriteDoc","assumedMasterState","isEqual","ensureNotFalsy","previous","bulkWrite","err","status","newRxError","name","documentInDb","cancelRxStorageReplication","next","complete"],"sources":["../../../src/replication-protocol/index.ts"],"sourcesContent":["/**\r\n * These files contain the replication protocol.\r\n * It can be used to replicated RxStorageInstances or RxCollections\r\n * or even to do a client(s)-server replication.\r\n */\r\n\r\n\r\nimport {\r\n    BehaviorSubject,\r\n    combineLatest,\r\n    filter,\r\n    firstValueFrom,\r\n    mergeMap,\r\n    Subject\r\n} from 'rxjs';\r\nimport {\r\n    getPrimaryFieldOfPrimaryKey\r\n} from '../rx-schema-helper.ts';\r\nimport type {\r\n    BulkWriteRow,\r\n    ById,\r\n    DocumentsWithCheckpoint,\r\n    RxConflictHandler,\r\n    RxDocumentData,\r\n    RxReplicationHandler,\r\n    RxReplicationWriteToMasterRow,\r\n    RxStorageInstance,\r\n    RxStorageInstanceReplicationInput,\r\n    RxStorageInstanceReplicationState,\r\n    WithDeleted\r\n} from '../types/index.d.ts';\r\nimport {\r\n    clone,\r\n    ensureNotFalsy,\r\n    flatClone,\r\n    PROMISE_RESOLVE_VOID\r\n} from '../plugins/utils/index.ts';\r\nimport {\r\n    getCheckpointKey\r\n} from './checkpoint.ts';\r\nimport { startReplicationDownstream } from './downstream.ts';\r\nimport { docStateToWriteDoc, getUnderlyingPersistentStorage, writeDocToDocState } from './helper.ts';\r\nimport { startReplicationUpstream } from './upstream.ts';\r\nimport { fillWriteDataForAttachmentsChange } from '../plugins/attachments/index.ts';\r\nimport { getChangedDocumentsSince } from '../rx-storage-helper.ts';\r\nimport { newRxError } from '../rx-error.ts';\r\n\r\n\r\nexport * from './checkpoint.ts';\r\nexport * from './downstream.ts';\r\nexport * from './upstream.ts';\r\nexport * from './meta-instance.ts';\r\nexport * from './conflicts.ts';\r\nexport * from './helper.ts';\r\nexport * from './default-conflict-handler.ts';\r\n\r\n\r\nexport function replicateRxStorageInstance<RxDocType>(\r\n    input: RxStorageInstanceReplicationInput<RxDocType>\r\n): RxStorageInstanceReplicationState<RxDocType> {\r\n    input = flatClone(input);\r\n    input.forkInstance = getUnderlyingPersistentStorage(input.forkInstance);\r\n    input.metaInstance = getUnderlyingPersistentStorage(input.metaInstance);\r\n    const checkpointKeyPromise = getCheckpointKey(input);\r\n    const state: RxStorageInstanceReplicationState<RxDocType> = {\r\n        primaryPath: getPrimaryFieldOfPrimaryKey(input.forkInstance.schema.primaryKey),\r\n        hasAttachments: !!input.forkInstance.schema.attachments,\r\n        input,\r\n        checkpointKey: checkpointKeyPromise,\r\n        downstreamBulkWriteFlag: checkpointKeyPromise.then(checkpointKey => 'replication-downstream-' + checkpointKey),\r\n        events: {\r\n            canceled: new BehaviorSubject<boolean>(false),\r\n            paused: new BehaviorSubject<boolean>(false),\r\n            active: {\r\n                down: new BehaviorSubject<boolean>(true),\r\n                up: new BehaviorSubject<boolean>(true)\r\n            },\r\n            processed: {\r\n                down: new Subject(),\r\n                up: new Subject()\r\n            },\r\n            resolvedConflicts: new Subject(),\r\n            error: new Subject()\r\n        },\r\n        stats: {\r\n            down: {\r\n                addNewTask: 0,\r\n                downstreamProcessChanges: 0,\r\n                downstreamResyncOnce: 0,\r\n                masterChangeStreamEmit: 0,\r\n                persistFromMaster: 0\r\n            },\r\n            up: {\r\n                forkChangeStreamEmit: 0,\r\n                persistToMaster: 0,\r\n                persistToMasterConflictWrites: 0,\r\n                persistToMasterHadConflicts: 0,\r\n                processTasks: 0,\r\n                upstreamInitialSync: 0\r\n            }\r\n        },\r\n        firstSyncDone: {\r\n            down: new BehaviorSubject<boolean>(false),\r\n            up: new BehaviorSubject<boolean>(false)\r\n        },\r\n        streamQueue: {\r\n            down: PROMISE_RESOLVE_VOID,\r\n            up: PROMISE_RESOLVE_VOID\r\n        },\r\n        checkpointQueue: PROMISE_RESOLVE_VOID,\r\n        lastCheckpointDoc: {}\r\n    };\r\n\r\n    startReplicationDownstream(state);\r\n    startReplicationUpstream(state);\r\n    return state;\r\n}\r\n\r\nexport function awaitRxStorageReplicationFirstInSync(\r\n    state: RxStorageInstanceReplicationState<any>\r\n): Promise<void> {\r\n    return firstValueFrom(\r\n        combineLatest([\r\n            state.firstSyncDone.down.pipe(\r\n                filter(v => !!v)\r\n            ),\r\n            state.firstSyncDone.up.pipe(\r\n                filter(v => !!v)\r\n            )\r\n        ])\r\n    ).then(() => { });\r\n}\r\n\r\nexport function awaitRxStorageReplicationInSync(\r\n    replicationState: RxStorageInstanceReplicationState<any>\r\n) {\r\n    return Promise.all([\r\n        replicationState.streamQueue.up,\r\n        replicationState.streamQueue.down,\r\n        replicationState.checkpointQueue\r\n    ]);\r\n}\r\n\r\n\r\nexport async function awaitRxStorageReplicationIdle(\r\n    state: RxStorageInstanceReplicationState<any>\r\n) {\r\n    await awaitRxStorageReplicationFirstInSync(state);\r\n    while (true) {\r\n        const { down, up } = state.streamQueue;\r\n        await Promise.all([\r\n            up,\r\n            down\r\n        ]);\r\n        /**\r\n         * If the Promises have not been reassigned\r\n         * after awaiting them, we know that the replication\r\n         * is in idle state at this point in time.\r\n         */\r\n        if (\r\n            down === state.streamQueue.down &&\r\n            up === state.streamQueue.up\r\n        ) {\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function rxStorageInstanceToReplicationHandler<RxDocType, MasterCheckpointType>(\r\n    instance: RxStorageInstance<RxDocType, any, any, MasterCheckpointType>,\r\n    conflictHandler: RxConflictHandler<RxDocType>,\r\n    databaseInstanceToken: string,\r\n    /**\r\n     * If set to true,\r\n     * the _meta.lwt from the pushed documents is kept.\r\n     * (Used in the migration to ensure checkpoints are still valid)\r\n     */\r\n    keepMeta: boolean = false\r\n): RxReplicationHandler<RxDocType, MasterCheckpointType> {\r\n    instance = getUnderlyingPersistentStorage(instance);\r\n\r\n    const hasAttachments = !!instance.schema.attachments;\r\n    const primaryPath = getPrimaryFieldOfPrimaryKey(instance.schema.primaryKey);\r\n    const replicationHandler: RxReplicationHandler<RxDocType, MasterCheckpointType> = {\r\n        masterChangeStream$: instance.changeStream().pipe(\r\n            mergeMap(async (eventBulk) => {\r\n                const ret: DocumentsWithCheckpoint<RxDocType, MasterCheckpointType> = {\r\n                    checkpoint: eventBulk.checkpoint,\r\n                    documents: await Promise.all(\r\n                        eventBulk.events.map(async (event) => {\r\n                            let docData = writeDocToDocState(event.documentData, hasAttachments, keepMeta);\r\n                            if (hasAttachments) {\r\n                                docData = await fillWriteDataForAttachmentsChange(\r\n                                    primaryPath,\r\n                                    instance,\r\n                                    clone(docData),\r\n                                    /**\r\n                                     * Notice that the master never knows\r\n                                     * the client state of the document.\r\n                                     * Therefore we always send all attachments data.\r\n                                     */\r\n                                    undefined\r\n                                );\r\n                            }\r\n                            return docData;\r\n                        })\r\n                    )\r\n                };\r\n                return ret;\r\n            })\r\n        ),\r\n        masterChangesSince(\r\n            checkpoint,\r\n            batchSize\r\n        ) {\r\n            return getChangedDocumentsSince(\r\n                instance,\r\n                batchSize,\r\n                checkpoint\r\n            ).then(async (result) => {\r\n                return {\r\n                    checkpoint: result.documents.length > 0 ? result.checkpoint : checkpoint,\r\n                    documents: await Promise.all(\r\n                        result.documents.map(async (plainDocumentData) => {\r\n                            let docData = writeDocToDocState(plainDocumentData, hasAttachments, keepMeta);\r\n                            if (hasAttachments) {\r\n                                docData = await fillWriteDataForAttachmentsChange(\r\n                                    primaryPath,\r\n                                    instance,\r\n                                    clone(docData),\r\n                                    /**\r\n                                     * Notice the the master never knows\r\n                                     * the client state of the document.\r\n                                     * Therefore we always send all attachments data.\r\n                                     */\r\n                                    undefined\r\n                                );\r\n                            }\r\n                            return docData;\r\n                        })\r\n                    )\r\n                };\r\n            });\r\n        },\r\n        async masterWrite(\r\n            rows\r\n        ) {\r\n            const rowById: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\r\n            rows.forEach(row => {\r\n                const docId: string = (row.newDocumentState as any)[primaryPath];\r\n                rowById[docId] = row;\r\n            });\r\n            const ids = Object.keys(rowById);\r\n\r\n            const masterDocsStateList = await instance.findDocumentsById(\r\n                ids,\r\n                true\r\n            );\r\n            const masterDocsState = new Map<string, RxDocumentData<RxDocType>>();\r\n            masterDocsStateList.forEach(doc => masterDocsState.set((doc as any)[primaryPath], doc));\r\n            const conflicts: WithDeleted<RxDocType>[] = [];\r\n            const writeRows: BulkWriteRow<RxDocType>[] = [];\r\n            await Promise.all(\r\n                Object.entries(rowById)\r\n                    .map(([id, row]) => {\r\n                        const masterState = masterDocsState.get(id);\r\n                        if (!masterState) {\r\n                            writeRows.push({\r\n                                document: docStateToWriteDoc(databaseInstanceToken, hasAttachments, keepMeta, row.newDocumentState)\r\n                            });\r\n                        } else if (\r\n                            masterState &&\r\n                            !row.assumedMasterState\r\n                        ) {\r\n                            conflicts.push(writeDocToDocState(masterState, hasAttachments, keepMeta));\r\n                        } else if (\r\n                            conflictHandler.isEqual(\r\n                                writeDocToDocState(masterState, hasAttachments, keepMeta),\r\n                                ensureNotFalsy(row.assumedMasterState),\r\n                                'rxStorageInstanceToReplicationHandler-masterWrite'\r\n                            ) === true\r\n                        ) {\r\n                            writeRows.push({\r\n                                previous: masterState,\r\n                                document: docStateToWriteDoc(databaseInstanceToken, hasAttachments, keepMeta, row.newDocumentState, masterState)\r\n                            });\r\n                        } else {\r\n                            conflicts.push(writeDocToDocState(masterState, hasAttachments, keepMeta));\r\n                        }\r\n                    })\r\n            );\r\n\r\n            if (writeRows.length > 0) {\r\n                const result = await instance.bulkWrite(\r\n                    writeRows,\r\n                    'replication-master-write'\r\n                );\r\n\r\n                result.error.forEach(err => {\r\n                    if (err.status !== 409) {\r\n                        throw newRxError('SNH', {\r\n                            name: 'non conflict error',\r\n                            error: err as any\r\n                        });\r\n                    } else {\r\n                        conflicts.push(\r\n                            writeDocToDocState(ensureNotFalsy(err.documentInDb), hasAttachments, keepMeta)\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n            return conflicts;\r\n        }\r\n    };\r\n\r\n    return replicationHandler;\r\n}\r\n\r\n\r\nexport async function cancelRxStorageReplication(\r\n    replicationState: RxStorageInstanceReplicationState<any>\r\n) {\r\n    replicationState.events.canceled.next(true);\r\n    replicationState.events.active.up.complete();\r\n    replicationState.events.active.down.complete();\r\n    replicationState.events.processed.up.complete();\r\n    replicationState.events.processed.down.complete();\r\n    replicationState.events.resolvedConflicts.complete();\r\n    replicationState.events.canceled.complete();\r\n    await replicationState.checkpointQueue;\r\n}\r\n"],"mappings":"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","ignoreList":[]}