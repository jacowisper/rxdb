{"version":3,"file":"rx-collection.js","names":["_rxjs","require","_index","_rxCollectionHelper","_rxQuery","_rxError","_docCache","_queryCache","_changeEventBuffer","_hooks","_rxDocumentPrototypeMerge","_rxStorageHelper","_incrementalWrite","_rxDocument","_overwritable","_defaultConflictHandler","_rxChangeEvent","HOOKS_WHEN","HOOKS_KEYS","hooksApplied","OPEN_COLLECTIONS","exports","Set","RxCollectionBase","database","name","schema","internalStorageInstance","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","defaultCacheReplacementPolicy","statics","conflictHandler","defaultConflictHandler","storageInstance","timeouts","incrementalWriteQueue","awaitBeforeReads","_incrementalUpsertQueues","Map","synced","hooks","_subs","createQueryCache","$","checkpoint$","eventBulks$","onClose","closed","onRemove","_applyHookFunctions","asRxCollection","pipe","filter","changeEventBulk","collectionName","add","_proto","prototype","prepare","hasPremiumFlag","count","size","NON_PREMIUM_COLLECTION_LIMIT","promiseWait","newRxError","collection","args","existing","Array","from","values","map","c","db","getWrappedStorageInstance","jsonSchema","IncrementalWriteQueue","primaryPath","newData","oldData","beforeDocumentUpdateWrite","result","_runHooks","mergeMap","rxChangeEventBulkToRxChangeEvents","checkpoint","createChangeEventBuffer","documentConstructor","DocumentCache","bulk","isLocal","events","docData","getRxDocumentConstructor","createNewRxDocument","listenToRemoveSub","internalStore","changeStream","key","version","found","find","event","documentData","context","operation","subscribe","close","Promise","all","fn","push","databaseStorageToken","storageToken","subDocs","eventBulk","id","internal","databaseToken","token","$emit","PROMISE_RESOLVE_VOID","cleanup","_minimumDeletedTime","ensureRxCollectionIsNotClosed","pluginMissing","migrationNeeded","getMigrationState","startMigration","batchSize","migratePromise","insert","json","writeResult","bulkInsert","isError","error","throwIfIsStorageWriteError","insertResult","ensureNotFalsy","success","insertIfNotExists","length","status","conflictDocData","documentInDb","mapDocumentsDataToCacheDocs","docsData","ids","insertRows","hasHooks","useDocData","fillObjectDataBeforeInsert","then","document","index","documents","results","bulkWrite","rxDocuments","ret","getWrittenDocumentsFromBulkWriteResponse","docsMap","forEach","row","doc","set","get","primary","bulkRemove","idsOrDocs","rxDocumentMap","findByIds","exec","d","rxDocument","data","toMutableJSON","removeDocs","writeDoc","flatClone","_deleted","previous","deletedRxDocuments","successIds","getCachedRxDocument","bulkUpsert","insertData","useJsonByDocId","useJson","slice","err","documentId","writeData","getFromMapOrThrow","docDataInDb","getCachedRxDocuments","newDoc","incrementalModify","upsert","bulkResult","incrementalUpsert","queue","_incrementalUpsertEnsureRxDocumentExists","wasInserted","inserted","_incrementalUpsertUpdate","queryObj","runPluginHooks","op","_getDefaultQuery","query","createRxQuery","findOne","selector","limit","mangoQuery","$in","exportJSON","importJSON","_exportedJSON","insertCRDT","_updateObj","addPipeline","_options","addHook","when","fun","parallel","newRxTypeError","includes","boundFun","bind","runName","series","getHooks","instance","tasks","hook","promiseSeries","_runHooksSync","time","res","timeout","setTimeout","delete","PROMISE_RESOLVE_FALSE","clearTimeout","requestIdlePromise","sub","unsubscribe","collections","runAsyncPluginHooks","remove","removeCollectionStorages","storage","multiInstance","password","hashFunction","_createClass2","default","cE","colProto","Object","getPrototypeOf","fnName","ucfirst","_innerDoc","rxCollection","docDataFromCache","getLatestDocumentDataIfExists","resolve","createRxCollection","autoMigrate","localDocuments","storageInstanceCreationParams","databaseInstanceToken","databaseName","devMode","overwritable","isDevMode","createRxCollectionStorageInstance","entries","funName","defineProperty","creator","catch","reject","isRxCollection","obj"],"sources":["../../src/rx-collection.ts"],"sourcesContent":["import {\r\n    filter,\r\n    map,\r\n    mergeMap\r\n} from 'rxjs';\r\n\r\nimport {\r\n    ucfirst,\r\n    flatClone,\r\n    promiseSeries,\r\n    pluginMissing,\r\n    ensureNotFalsy,\r\n    getFromMapOrThrow,\r\n    PROMISE_RESOLVE_FALSE,\r\n    PROMISE_RESOLVE_VOID,\r\n    NON_PREMIUM_COLLECTION_LIMIT,\r\n    hasPremiumFlag\r\n} from './plugins/utils/index.ts';\r\nimport {\r\n    fillObjectDataBeforeInsert,\r\n    createRxCollectionStorageInstance,\r\n    removeCollectionStorages,\r\n    ensureRxCollectionIsNotClosed\r\n} from './rx-collection-helper.ts';\r\nimport {\r\n    createRxQuery,\r\n    _getDefaultQuery\r\n} from './rx-query.ts';\r\nimport {\r\n    newRxError,\r\n    newRxTypeError\r\n} from './rx-error.ts';\r\nimport type {\r\n    RxMigrationState\r\n} from './plugins/migration-schema/index.ts';\r\nimport {\r\n    DocumentCache,\r\n    mapDocumentsDataToCacheDocs\r\n} from './doc-cache.ts';\r\nimport {\r\n    QueryCache,\r\n    createQueryCache,\r\n    defaultCacheReplacementPolicy\r\n} from './query-cache.ts';\r\nimport {\r\n    ChangeEventBuffer,\r\n    createChangeEventBuffer\r\n} from './change-event-buffer.ts';\r\nimport {\r\n    runAsyncPluginHooks,\r\n    runPluginHooks\r\n} from './hooks.ts';\r\n\r\nimport {\r\n    Subscription,\r\n    Observable\r\n} from 'rxjs';\r\n\r\nimport type {\r\n    KeyFunctionMap,\r\n    RxCollection,\r\n    RxDatabase,\r\n    RxQuery,\r\n    RxDocument,\r\n    RxDumpCollection,\r\n    RxDumpCollectionAny,\r\n    MangoQuery,\r\n    MangoQueryNoLimit,\r\n    RxCacheReplacementPolicy,\r\n    RxStorageWriteError,\r\n    RxDocumentData,\r\n    RxStorageInstanceCreationParams,\r\n    BulkWriteRow,\r\n    RxChangeEvent,\r\n    RxChangeEventInsert,\r\n    RxChangeEventUpdate,\r\n    RxChangeEventDelete,\r\n    RxStorageInstance,\r\n    CollectionsOfDatabase,\r\n    RxChangeEventBulk,\r\n    RxLocalDocumentData,\r\n    RxDocumentBase,\r\n    RxConflictHandler,\r\n    MaybePromise,\r\n    CRDTEntry,\r\n    MangoQuerySelectorAndIndex,\r\n    MigrationStrategies\r\n} from './types/index.d.ts';\r\n\r\nimport {\r\n    RxSchema\r\n} from './rx-schema.ts';\r\n\r\nimport {\r\n    createNewRxDocument,\r\n    getRxDocumentConstructor\r\n} from './rx-document-prototype-merge.ts';\r\nimport {\r\n    getWrappedStorageInstance,\r\n    getWrittenDocumentsFromBulkWriteResponse,\r\n    throwIfIsStorageWriteError,\r\n    WrappedRxStorageInstance\r\n} from './rx-storage-helper.ts';\r\nimport { IncrementalWriteQueue } from './incremental-write.ts';\r\nimport { beforeDocumentUpdateWrite } from './rx-document.ts';\r\nimport { overwritable } from './overwritable.ts';\r\nimport type { RxPipeline, RxPipelineOptions } from './plugins/pipeline/index.ts';\r\nimport { defaultConflictHandler } from './replication-protocol/default-conflict-handler.ts';\r\nimport { rxChangeEventBulkToRxChangeEvents } from './rx-change-event.ts';\r\n\r\nconst HOOKS_WHEN = ['pre', 'post'] as const;\r\ntype HookWhenType = typeof HOOKS_WHEN[number];\r\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'] as const;\r\ntype HookKeyType = typeof HOOKS_KEYS[number];\r\nlet hooksApplied = false;\r\n\r\nexport const OPEN_COLLECTIONS = new Set<RxCollectionBase<any, any, any>>();\r\n\r\nexport class RxCollectionBase<\r\n    InstanceCreationOptions,\r\n    RxDocumentType = { [prop: string]: any; },\r\n    OrmMethods = {},\r\n    StaticMethods = { [key: string]: any; },\r\n    Reactivity = any\r\n> {\r\n\r\n\r\n    /**\r\n     * Stores all 'normal' documents\r\n     */\r\n    public storageInstance: WrappedRxStorageInstance<RxDocumentType, any, InstanceCreationOptions> = {} as any;\r\n    public readonly timeouts: Set<ReturnType<typeof setTimeout>> = new Set();\r\n    public incrementalWriteQueue: IncrementalWriteQueue<RxDocumentType> = {} as any;\r\n\r\n\r\n    /**\r\n     * Before reads, all these methods are awaited. Used to \"block\" reads\r\n     * depending on other processes, like when the RxPipeline is running.\r\n     */\r\n    public readonly awaitBeforeReads = new Set<() => MaybePromise<any>>();\r\n\r\n    constructor(\r\n        public readonly database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions, Reactivity>,\r\n        public name: string,\r\n        public schema: RxSchema<RxDocumentType>,\r\n        public internalStorageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\r\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\r\n        public migrationStrategies: MigrationStrategies = {},\r\n        public methods: KeyFunctionMap = {},\r\n        public attachments: KeyFunctionMap = {},\r\n        public options: any = {},\r\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\r\n        public statics: KeyFunctionMap = {},\r\n        public conflictHandler: RxConflictHandler<RxDocumentType> = defaultConflictHandler\r\n    ) {\r\n        _applyHookFunctions(this.asRxCollection);\r\n\r\n\r\n        if (database) { // might be falsy on pseudoInstance\r\n            this.eventBulks$ = database.eventBulks$.pipe(\r\n                filter(changeEventBulk => changeEventBulk.collectionName === this.name)\r\n            );\r\n        } else { }\r\n\r\n\r\n        /**\r\n         * Must be last because the hooks might throw on dev-mode\r\n         * checks and we do not want to have broken collections here.\r\n         * RxCollection instances created for testings do not have a database\r\n         * so we do not add these to the list.\r\n         */\r\n        if (this.database) {\r\n            OPEN_COLLECTIONS.add(this);\r\n        }\r\n    }\r\n\r\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\r\n        return this.$.pipe(\r\n            filter(cE => cE.operation === 'INSERT')\r\n        ) as any;\r\n    }\r\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\r\n        return this.$.pipe(\r\n            filter(cE => cE.operation === 'UPDATE')\r\n        ) as any;\r\n    }\r\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\r\n        return this.$.pipe(\r\n            filter(cE => cE.operation === 'DELETE')\r\n        ) as any;\r\n    }\r\n\r\n    public _incrementalUpsertQueues: Map<string, Promise<any>> = new Map();\r\n    // defaults\r\n    public synced: boolean = false;\r\n    public hooks: {\r\n        [key in HookKeyType]: {\r\n            [when in HookWhenType]: {\r\n                series: Function[];\r\n                parallel: Function[];\r\n            };\r\n        }\r\n    } = {} as any;\r\n    public _subs: Subscription[] = [];\r\n\r\n    public _docCache: DocumentCache<RxDocumentType, OrmMethods> = {} as any;\r\n\r\n    public _queryCache: QueryCache = createQueryCache();\r\n    public $: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\r\n    public checkpoint$: Observable<any> = {} as any;\r\n    public _changeEventBuffer: ChangeEventBuffer<RxDocumentType> = {} as ChangeEventBuffer<RxDocumentType>;\r\n\r\n    /**\r\n     * Internally only use eventBulks$\r\n     * Do not use .$ or .observable$ because that has to transform\r\n     * the events which decreases performance.\r\n     */\r\n    public readonly eventBulks$: Observable<RxChangeEventBulk<any>> = {} as any;\r\n\r\n\r\n    /**\r\n     * When the collection is closed,\r\n     * these functions will be called an awaited.\r\n     * Used to automatically clean up stuff that\r\n     * belongs to this collection.\r\n    */\r\n    public onClose: (() => MaybePromise<any>)[] = [];\r\n    public closed = false;\r\n\r\n    public onRemove: (() => MaybePromise<any>)[] = [];\r\n\r\n    public async prepare(): Promise<void> {\r\n\r\n        if (!(await hasPremiumFlag())) {\r\n\r\n            /**\r\n             * When used in a test suite, we often open and close many databases with collections\r\n             * while not awaiting the database.close() call to improve the test times.\r\n             * So when reopening collections and the OPEN_COLLECTIONS size is full,\r\n             * we retry after some times to account for this.\r\n             */\r\n            let count = 0;\r\n            while (count < 10 && OPEN_COLLECTIONS.size > NON_PREMIUM_COLLECTION_LIMIT) {\r\n                count++;\r\n                await this.promiseWait(30);\r\n            }\r\n            if (OPEN_COLLECTIONS.size > NON_PREMIUM_COLLECTION_LIMIT) {\r\n                throw newRxError('COL23', {\r\n                    database: this.database.name,\r\n                    collection: this.name,\r\n                    args: {\r\n                        existing: Array.from(OPEN_COLLECTIONS.values()).map(c => ({\r\n                            db: c.database ? c.database.name : '',\r\n                            c: c.name\r\n                        }))\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n        this.storageInstance = getWrappedStorageInstance(\r\n            this.database,\r\n            this.internalStorageInstance,\r\n            this.schema.jsonSchema\r\n        );\r\n        this.incrementalWriteQueue = new IncrementalWriteQueue<RxDocumentType>(\r\n            this.storageInstance,\r\n            this.schema.primaryPath,\r\n            (newData, oldData) => beforeDocumentUpdateWrite(this as any, newData, oldData),\r\n            result => this._runHooks('post', 'save', result)\r\n        );\r\n\r\n        this.$ = this.eventBulks$.pipe(\r\n            mergeMap(changeEventBulk => rxChangeEventBulkToRxChangeEvents(changeEventBulk)),\r\n        );\r\n        this.checkpoint$ = this.eventBulks$.pipe(\r\n            map(changeEventBulk => changeEventBulk.checkpoint),\r\n        );\r\n\r\n        this._changeEventBuffer = createChangeEventBuffer<RxDocumentType>(this.asRxCollection);\r\n        let documentConstructor: any;\r\n        this._docCache = new DocumentCache(\r\n            this.schema.primaryPath,\r\n            this.eventBulks$.pipe(\r\n                filter(bulk => !bulk.isLocal),\r\n                map(bulk => bulk.events)\r\n            ),\r\n            docData => {\r\n                if (!documentConstructor) {\r\n                    documentConstructor = getRxDocumentConstructor(this.asRxCollection);\r\n                }\r\n                return createNewRxDocument(this.asRxCollection, documentConstructor, docData);\r\n            }\r\n        );\r\n\r\n\r\n        const listenToRemoveSub = this.database.internalStore.changeStream().pipe(\r\n            filter(bulk => {\r\n                const key = this.name + '-' + this.schema.version;\r\n                const found = bulk.events.find(event => {\r\n                    return (\r\n                        event.documentData.context === 'collection' &&\r\n                        event.documentData.key === key &&\r\n                        event.operation === 'DELETE'\r\n                    );\r\n                });\r\n                return !!found;\r\n            })\r\n        ).subscribe(async () => {\r\n            await this.close();\r\n            await Promise.all(this.onRemove.map(fn => fn()));\r\n        });\r\n        this._subs.push(listenToRemoveSub);\r\n\r\n\r\n        const databaseStorageToken = await this.database.storageToken;\r\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\r\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\r\n                id: eventBulk.id,\r\n                isLocal: false,\r\n                internal: false,\r\n                collectionName: this.name,\r\n                storageToken: databaseStorageToken,\r\n                events: eventBulk.events,\r\n                databaseToken: this.database.token,\r\n                checkpoint: eventBulk.checkpoint,\r\n                context: eventBulk.context\r\n            };\r\n            this.database.$emit(changeEventBulk);\r\n        });\r\n        this._subs.push(subDocs);\r\n\r\n        return PROMISE_RESOLVE_VOID;\r\n    }\r\n\r\n\r\n    /**\r\n     * Manually call the cleanup function of the storage.\r\n     * @link https://rxdb.info/cleanup.html\r\n     */\r\n    cleanup(_minimumDeletedTime?: number): Promise<boolean> {\r\n        ensureRxCollectionIsNotClosed(this);\r\n        throw pluginMissing('cleanup');\r\n    }\r\n\r\n    // overwritten by migration-plugin\r\n    migrationNeeded(): Promise<boolean> {\r\n        throw pluginMissing('migration-schema');\r\n    }\r\n    getMigrationState(): RxMigrationState {\r\n        throw pluginMissing('migration-schema');\r\n    }\r\n    startMigration(batchSize: number = 10): Promise<void> {\r\n        ensureRxCollectionIsNotClosed(this);\r\n        return this.getMigrationState().startMigration(batchSize);\r\n    }\r\n    migratePromise(batchSize: number = 10): Promise<any> {\r\n        return this.getMigrationState().migratePromise(batchSize);\r\n    }\r\n\r\n    async insert(\r\n        json: RxDocumentType | RxDocument\r\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\r\n        ensureRxCollectionIsNotClosed(this);\r\n        const writeResult = await this.bulkInsert([json as any]);\r\n\r\n        const isError = writeResult.error[0];\r\n        throwIfIsStorageWriteError(this as any, (json as any)[this.schema.primaryPath] as any, json, isError as any);\r\n        const insertResult = ensureNotFalsy(writeResult.success[0]);\r\n        return insertResult;\r\n    }\r\n\r\n    async insertIfNotExists(\r\n        json: RxDocumentType | RxDocument\r\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\r\n        const writeResult = await this.bulkInsert([json as any]);\r\n        if (writeResult.error.length > 0) {\r\n            const error = writeResult.error[0];\r\n            if (error.status === 409) {\r\n                const conflictDocData = error.documentInDb;\r\n                return mapDocumentsDataToCacheDocs(this._docCache, [conflictDocData])[0];\r\n\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n        return writeResult.success[0];\r\n    }\r\n\r\n    async bulkInsert(\r\n        docsData: RxDocumentType[]\r\n    ): Promise<{\r\n        success: RxDocument<RxDocumentType, OrmMethods>[];\r\n        error: RxStorageWriteError<RxDocumentType>[];\r\n    }> {\r\n        ensureRxCollectionIsNotClosed(this);\r\n        /**\r\n         * Optimization shortcut,\r\n         * do nothing when called with an empty array\r\n        */\r\n        if (docsData.length === 0) {\r\n            return {\r\n                success: [],\r\n                error: []\r\n            };\r\n        }\r\n\r\n        const primaryPath = this.schema.primaryPath;\r\n\r\n        const ids = new Set<string>();\r\n\r\n        /**\r\n         * This code is a bit redundant for better performance.\r\n         * Instead of iterating multiple times,\r\n         * we directly transform the input to a write-row array.\r\n         */\r\n        let insertRows: BulkWriteRow<RxDocumentType>[];\r\n        if (this.hasHooks('pre', 'insert')) {\r\n            insertRows = await Promise.all(\r\n                docsData.map(docData => {\r\n                    const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\r\n                    return this._runHooks('pre', 'insert', useDocData)\r\n                        .then(() => {\r\n                            ids.add((useDocData as any)[primaryPath]);\r\n                            return { document: useDocData };\r\n                        });\r\n                })\r\n            );\r\n        } else {\r\n            insertRows = new Array(docsData.length);\r\n            const schema = this.schema;\r\n            for (let index = 0; index < docsData.length; index++) {\r\n                const docData = docsData[index];\r\n                const useDocData = fillObjectDataBeforeInsert(schema, docData);\r\n                ids.add((useDocData as any)[primaryPath]);\r\n                insertRows[index] = { document: useDocData };\r\n            }\r\n        }\r\n\r\n\r\n        if (ids.size !== docsData.length) {\r\n            throw newRxError('COL22', {\r\n                collection: this.name,\r\n                args: {\r\n                    documents: docsData\r\n                }\r\n            });\r\n        }\r\n\r\n        const results = await this.storageInstance.bulkWrite(\r\n            insertRows,\r\n            'rx-collection-bulk-insert'\r\n        );\r\n\r\n\r\n        /**\r\n         * Often the user does not need to access the RxDocuments of the bulkInsert() call.\r\n         * So we transform the data to RxDocuments only if needed to use less CPU performance.\r\n         */\r\n        let rxDocuments: RxDocument<RxDocumentType, OrmMethods>[];\r\n        const collection = this;\r\n        const ret = {\r\n            get success() {\r\n                if (!rxDocuments) {\r\n                    const success = getWrittenDocumentsFromBulkWriteResponse(\r\n                        collection.schema.primaryPath,\r\n                        insertRows,\r\n                        results\r\n                    );\r\n                    rxDocuments = mapDocumentsDataToCacheDocs<RxDocumentType, OrmMethods>(collection._docCache, success);\r\n                }\r\n                return rxDocuments;\r\n            },\r\n            error: results.error\r\n        };\r\n\r\n        if (this.hasHooks('post', 'insert')) {\r\n            const docsMap: Map<string, RxDocumentType> = new Map();\r\n            insertRows.forEach(row => {\r\n                const doc = row.document;\r\n                docsMap.set((doc as any)[primaryPath] as any, doc);\r\n            });\r\n            await Promise.all(\r\n                ret.success.map(doc => {\r\n                    return this._runHooks(\r\n                        'post',\r\n                        'insert',\r\n                        docsMap.get(doc.primary),\r\n                        doc\r\n                    );\r\n                })\r\n            );\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    async bulkRemove(\r\n        /**\r\n         * You can either remove the documents by their ids\r\n         * or by directly providing the RxDocument instances\r\n         * if you have them already. This improves performance a bit.\r\n         */\r\n        idsOrDocs: string[] | RxDocument<RxDocumentType>[]\r\n    ): Promise<{\r\n        success: RxDocument<RxDocumentType, OrmMethods>[];\r\n        error: RxStorageWriteError<RxDocumentType>[];\r\n    }> {\r\n        ensureRxCollectionIsNotClosed(this);\r\n        const primaryPath = this.schema.primaryPath;\r\n        /**\r\n         * Optimization shortcut,\r\n         * do nothing when called with an empty array\r\n         */\r\n        if (idsOrDocs.length === 0) {\r\n            return {\r\n                success: [],\r\n                error: []\r\n            };\r\n        }\r\n\r\n        let rxDocumentMap: Map<string, RxDocument<RxDocumentType, OrmMethods>>;\r\n        if (typeof idsOrDocs[0] === 'string') {\r\n            rxDocumentMap = await this.findByIds(idsOrDocs as string[]).exec();\r\n        } else {\r\n            rxDocumentMap = new Map();\r\n            (idsOrDocs as RxDocument<RxDocumentType, OrmMethods>[]).forEach(d => rxDocumentMap.set(d.primary, d));\r\n        }\r\n\r\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\r\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\r\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\r\n            const data: RxDocumentData<RxDocumentType> = rxDocument.toMutableJSON(true) as any;\r\n            docsData.push(data);\r\n            docsMap.set(rxDocument.primary, data);\r\n        });\r\n\r\n        await Promise.all(\r\n            docsData.map(doc => {\r\n                const primary = (doc as any)[this.schema.primaryPath];\r\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\r\n            })\r\n        );\r\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\r\n            const writeDoc = flatClone(doc);\r\n            writeDoc._deleted = true;\r\n            return {\r\n                previous: doc,\r\n                document: writeDoc\r\n            };\r\n        });\r\n        const results = await this.storageInstance.bulkWrite(\r\n            removeDocs,\r\n            'rx-collection-bulk-remove'\r\n        );\r\n\r\n\r\n        const success = getWrittenDocumentsFromBulkWriteResponse(\r\n            this.schema.primaryPath,\r\n            removeDocs,\r\n            results\r\n        );\r\n\r\n        const deletedRxDocuments: RxDocument<RxDocumentType, OrmMethods>[] = [];\r\n        const successIds: string[] = success.map(d => {\r\n            const id = d[primaryPath] as string;\r\n            const doc = this._docCache.getCachedRxDocument(d);\r\n            deletedRxDocuments.push(doc);\r\n            return id;\r\n        });\r\n\r\n        // run hooks\r\n        await Promise.all(\r\n            successIds.map(id => {\r\n                return this._runHooks(\r\n                    'post',\r\n                    'remove',\r\n                    docsMap.get(id),\r\n                    rxDocumentMap.get(id)\r\n                );\r\n            })\r\n        );\r\n\r\n\r\n        return {\r\n            success: deletedRxDocuments,\r\n            error: results.error\r\n        };\r\n    }\r\n\r\n    /**\r\n     * same as bulkInsert but overwrites existing document with same primary\r\n     */\r\n    async bulkUpsert(docsData: Partial<RxDocumentType>[]): Promise<{\r\n        success: RxDocument<RxDocumentType, OrmMethods>[];\r\n        error: RxStorageWriteError<RxDocumentType>[];\r\n    }> {\r\n        ensureRxCollectionIsNotClosed(this);\r\n        const insertData: RxDocumentType[] = [];\r\n        const useJsonByDocId: Map<string, RxDocumentType> = new Map();\r\n        docsData.forEach(docData => {\r\n            const useJson = fillObjectDataBeforeInsert(this.schema, docData);\r\n            const primary: string = useJson[this.schema.primaryPath] as any;\r\n            if (!primary) {\r\n                throw newRxError('COL3', {\r\n                    primaryPath: this.schema.primaryPath as string,\r\n                    data: useJson,\r\n                    schema: this.schema.jsonSchema\r\n                });\r\n            }\r\n            useJsonByDocId.set(primary, useJson);\r\n            insertData.push(useJson);\r\n        });\r\n\r\n        const insertResult = await this.bulkInsert(insertData);\r\n        const success = insertResult.success.slice(0);\r\n        const error: RxStorageWriteError<RxDocumentType>[] = [];\r\n\r\n        // update the ones that existed already\r\n        await Promise.all(\r\n            insertResult.error.map(async (err) => {\r\n                if (err.status !== 409) {\r\n                    error.push(err);\r\n                } else {\r\n                    const id = err.documentId;\r\n                    const writeData = getFromMapOrThrow(useJsonByDocId, id);\r\n                    const docDataInDb = ensureNotFalsy(err.documentInDb);\r\n                    const doc = this._docCache.getCachedRxDocuments([docDataInDb])[0];\r\n                    const newDoc = await doc.incrementalModify(() => writeData);\r\n                    success.push(newDoc);\r\n                }\r\n            })\r\n        );\r\n        return {\r\n            error,\r\n            success\r\n        };\r\n    }\r\n\r\n    /**\r\n     * same as insert but overwrites existing document with same primary\r\n     */\r\n    async upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\r\n        ensureRxCollectionIsNotClosed(this);\r\n        const bulkResult = await this.bulkUpsert([json]);\r\n        throwIfIsStorageWriteError<RxDocumentType>(\r\n            this.asRxCollection,\r\n            (json as any)[this.schema.primaryPath],\r\n            json as any,\r\n            bulkResult.error[0]\r\n        );\r\n        return bulkResult.success[0];\r\n    }\r\n\r\n    /**\r\n     * upserts to a RxDocument, uses incrementalModify if document already exists\r\n     */\r\n    incrementalUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\r\n        ensureRxCollectionIsNotClosed(this);\r\n        const useJson = fillObjectDataBeforeInsert(this.schema, json);\r\n        const primary: string = useJson[this.schema.primaryPath] as any;\r\n        if (!primary) {\r\n            throw newRxError('COL4', {\r\n                data: json\r\n            });\r\n        }\r\n\r\n        // ensure that it won't try 2 parallel runs\r\n        let queue = this._incrementalUpsertQueues.get(primary);\r\n        if (!queue) {\r\n            queue = PROMISE_RESOLVE_VOID;\r\n        }\r\n        queue = queue\r\n            .then(() => _incrementalUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\r\n            .then((wasInserted) => {\r\n                if (!wasInserted.inserted) {\r\n                    return _incrementalUpsertUpdate(wasInserted.doc, useJson);\r\n                } else {\r\n                    return wasInserted.doc;\r\n                }\r\n            });\r\n        this._incrementalUpsertQueues.set(primary, queue);\r\n        return queue;\r\n    }\r\n\r\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\r\n        RxDocumentType,\r\n        RxDocument<RxDocumentType, OrmMethods>[],\r\n        OrmMethods,\r\n        Reactivity\r\n    > {\r\n        ensureRxCollectionIsNotClosed(this);\r\n\r\n        runPluginHooks('prePrepareRxQuery', {\r\n            op: 'find',\r\n            queryObj,\r\n            collection: this\r\n        });\r\n\r\n        if (!queryObj) {\r\n            queryObj = _getDefaultQuery();\r\n        }\r\n\r\n        const query = createRxQuery('find', queryObj, this as any);\r\n        return query as any;\r\n    }\r\n\r\n    findOne(\r\n        queryObj?: MangoQueryNoLimit<RxDocumentType> | string\r\n    ): RxQuery<\r\n        RxDocumentType,\r\n        RxDocument<RxDocumentType, OrmMethods> | null,\r\n        OrmMethods,\r\n        Reactivity\r\n    > {\r\n        ensureRxCollectionIsNotClosed(this);\r\n\r\n        runPluginHooks('prePrepareRxQuery', {\r\n            op: 'findOne',\r\n            queryObj,\r\n            collection: this\r\n        });\r\n\r\n        let query;\r\n\r\n        if (typeof queryObj === 'string') {\r\n            query = createRxQuery('findOne', {\r\n                selector: {\r\n                    [this.schema.primaryPath]: queryObj\r\n                },\r\n                limit: 1\r\n            }, this as any);\r\n        } else {\r\n            if (!queryObj) {\r\n                queryObj = _getDefaultQuery();\r\n            }\r\n\r\n            // cannot have limit on findOne queries because it will be overwritten\r\n            if ((queryObj as MangoQuery).limit) {\r\n                throw newRxError('QU6');\r\n            }\r\n\r\n            queryObj = flatClone(queryObj);\r\n            (queryObj as any).limit = 1;\r\n            query = createRxQuery<RxDocumentType>('findOne', queryObj, this as any);\r\n        }\r\n\r\n\r\n        return query as any;\r\n    }\r\n\r\n    count(queryObj?: MangoQuerySelectorAndIndex<RxDocumentType>): RxQuery<\r\n        RxDocumentType,\r\n        number,\r\n        OrmMethods,\r\n        Reactivity\r\n    > {\r\n        ensureRxCollectionIsNotClosed(this);\r\n        if (!queryObj) {\r\n            queryObj = _getDefaultQuery();\r\n        }\r\n        const query = createRxQuery('count', queryObj, this as any);\r\n        return query as any;\r\n    }\r\n\r\n    /**\r\n     * find a list documents by their primary key\r\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\r\n     */\r\n    findByIds(\r\n        ids: string[]\r\n    ): RxQuery<\r\n        RxDocumentType,\r\n        Map<string, RxDocument<RxDocumentType, OrmMethods>>,\r\n        OrmMethods,\r\n        Reactivity\r\n    > {\r\n        ensureRxCollectionIsNotClosed(this);\r\n        const mangoQuery: MangoQuery<RxDocumentType> = {\r\n            selector: {\r\n                [this.schema.primaryPath]: {\r\n                    $in: ids.slice(0)\r\n                }\r\n            } as any\r\n        };\r\n        const query = createRxQuery('findByIds', mangoQuery, this as any);\r\n        return query as any;\r\n    }\r\n\r\n    /**\r\n     * Export collection to a JSON friendly format.\r\n     */\r\n    exportJSON(): Promise<RxDumpCollection<RxDocumentType>>;\r\n    exportJSON(): Promise<RxDumpCollectionAny<RxDocumentType>>;\r\n    exportJSON(): Promise<any> {\r\n        throw pluginMissing('json-dump');\r\n    }\r\n\r\n    /**\r\n     * Import the parsed JSON export into the collection.\r\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\r\n     */\r\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\r\n        throw pluginMissing('json-dump');\r\n    }\r\n\r\n    insertCRDT(_updateObj: CRDTEntry<any> | CRDTEntry<any>[]): RxDocument<RxDocumentType, OrmMethods> {\r\n        throw pluginMissing('crdt');\r\n    }\r\n\r\n\r\n    addPipeline(_options: RxPipelineOptions<RxDocumentType>): Promise<RxPipeline<RxDocumentType>> {\r\n        throw pluginMissing('pipeline');\r\n    }\r\n\r\n    /**\r\n     * HOOKS\r\n     */\r\n    addHook(when: HookWhenType, key: HookKeyType, fun: any, parallel = false) {\r\n        if (typeof fun !== 'function') {\r\n            throw newRxTypeError('COL7', {\r\n                key,\r\n                when\r\n            });\r\n        }\r\n\r\n        if (!HOOKS_WHEN.includes(when)) {\r\n            throw newRxTypeError('COL8', {\r\n                key,\r\n                when\r\n            });\r\n        }\r\n\r\n        if (!HOOKS_KEYS.includes(key)) {\r\n            throw newRxError('COL9', {\r\n                key\r\n            });\r\n        }\r\n\r\n        if (when === 'post' && key === 'create' && parallel === true) {\r\n            throw newRxError('COL10', {\r\n                when,\r\n                key,\r\n                parallel\r\n            });\r\n        }\r\n\r\n        // bind this-scope to hook-function\r\n        const boundFun = fun.bind(this);\r\n\r\n        const runName = parallel ? 'parallel' : 'series';\r\n\r\n        this.hooks[key] = this.hooks[key] || {};\r\n        this.hooks[key][when] = this.hooks[key][when] || {\r\n            series: [],\r\n            parallel: []\r\n        };\r\n        this.hooks[key][when][runName].push(boundFun);\r\n    }\r\n\r\n    getHooks(when: HookWhenType, key: HookKeyType) {\r\n        if (\r\n            !this.hooks[key] ||\r\n            !this.hooks[key][when]\r\n        ) {\r\n            return {\r\n                series: [],\r\n                parallel: []\r\n            };\r\n        }\r\n        return this.hooks[key][when];\r\n    }\r\n\r\n    hasHooks(when: HookWhenType, key: HookKeyType) {\r\n        /**\r\n         * Performance shortcut\r\n         * so that we not have to build the empty object.\r\n         */\r\n        if (\r\n            !this.hooks[key] ||\r\n            !this.hooks[key][when]\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        const hooks = this.getHooks(when, key);\r\n        if (!hooks) {\r\n            return false;\r\n        }\r\n        return hooks.series.length > 0 || hooks.parallel.length > 0;\r\n    }\r\n\r\n    _runHooks(when: HookWhenType, key: HookKeyType, data: any, instance?: any): Promise<any> {\r\n        const hooks = this.getHooks(when, key);\r\n\r\n        if (!hooks) {\r\n            return PROMISE_RESOLVE_VOID;\r\n        }\r\n\r\n        // run parallel: false\r\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\r\n        return promiseSeries(tasks)\r\n            // run parallel: true\r\n            .then(() => Promise.all(\r\n                hooks.parallel\r\n                    .map((hook: any) => hook(data, instance))\r\n            ));\r\n    }\r\n\r\n    /**\r\n     * does the same as ._runHooks() but with non-async-functions\r\n     */\r\n    _runHooksSync(when: HookWhenType, key: HookKeyType, data: any, instance: any) {\r\n        if (!this.hasHooks(when, key)) {\r\n            return;\r\n        }\r\n        const hooks = this.getHooks(when, key);\r\n        if (!hooks) return;\r\n        hooks.series.forEach((hook: any) => hook(data, instance));\r\n    }\r\n\r\n    /**\r\n     * Returns a promise that resolves after the given time.\r\n     * Ensures that is properly cleans up when the collection is closed\r\n     * so that no running timeouts prevent the exit of the JavaScript process.\r\n     */\r\n    promiseWait(time: number): Promise<void> {\r\n        const ret = new Promise<void>(res => {\r\n            const timeout = setTimeout(() => {\r\n                this.timeouts.delete(timeout);\r\n                res();\r\n            }, time);\r\n            this.timeouts.add(timeout);\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    async close(): Promise<boolean> {\r\n        if (this.closed) {\r\n            return PROMISE_RESOLVE_FALSE;\r\n        }\r\n\r\n        OPEN_COLLECTIONS.delete(this);\r\n\r\n\r\n        await Promise.all(this.onClose.map(fn => fn()));\r\n\r\n        /**\r\n         * Settings closed = true\r\n         * must be the first thing to do,\r\n         * so for example the replication can directly stop\r\n         * instead of sending requests to a closed storage.\r\n         */\r\n        this.closed = true;\r\n\r\n\r\n        Array.from(this.timeouts).forEach(timeout => clearTimeout(timeout));\r\n        if (this._changeEventBuffer) {\r\n            this._changeEventBuffer.close();\r\n        }\r\n        /**\r\n         * First wait until the whole database is idle.\r\n         * This ensures that the storage does not get closed\r\n         * while some operation is running.\r\n         * It is important that we do not intercept a running call\r\n         * because it might lead to undefined behavior like when a doc is written\r\n         * but the change is not added to the changes collection.\r\n         */\r\n        return this.database.requestIdlePromise()\r\n            .then(() => this.storageInstance.close())\r\n            .then(() => {\r\n                /**\r\n                 * Unsubscribing must be done AFTER the storageInstance.close()\r\n                 * Because the conflict handling is part of the subscriptions and\r\n                 * otherwise there might be open conflicts to be resolved which\r\n                 * will then stuck and never resolve.\r\n                 */\r\n                this._subs.forEach(sub => sub.unsubscribe());\r\n\r\n                delete this.database.collections[this.name];\r\n                return runAsyncPluginHooks('postCloseRxCollection', this).then(() => true);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * remove all data of the collection\r\n     */\r\n    async remove(): Promise<any> {\r\n        await this.close();\r\n        await Promise.all(this.onRemove.map(fn => fn()));\r\n        /**\r\n         * TODO here we should pass the already existing\r\n         * storage instances instead of creating new ones.\r\n         */\r\n        await removeCollectionStorages(\r\n            this.database.storage,\r\n            this.database.internalStore,\r\n            this.database.token,\r\n            this.database.name,\r\n            this.name,\r\n            this.database.multiInstance,\r\n            this.database.password,\r\n            this.database.hashFunction\r\n        );\r\n    }\r\n\r\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods, any, Reactivity> {\r\n        return this as any;\r\n    }\r\n}\r\n\r\n/**\r\n * adds the hook-functions to the collections prototype\r\n * this runs only once\r\n */\r\nfunction _applyHookFunctions(\r\n    collection: RxCollection<any, any>\r\n) {\r\n    if (hooksApplied) return; // already run\r\n    hooksApplied = true;\r\n    const colProto = Object.getPrototypeOf(collection);\r\n    HOOKS_KEYS.forEach(key => {\r\n        HOOKS_WHEN.map(when => {\r\n            const fnName = when + ucfirst(key);\r\n            colProto[fnName] = function (fun: string, parallel: boolean) {\r\n                return this.addHook(when, key, fun, parallel);\r\n            };\r\n        });\r\n    });\r\n}\r\n\r\nfunction _incrementalUpsertUpdate<RxDocType>(\r\n    doc: RxDocumentBase<RxDocType>,\r\n    json: RxDocumentData<RxDocType>\r\n): Promise<RxDocumentBase<RxDocType>> {\r\n    return doc.incrementalModify((_innerDoc) => {\r\n        return json;\r\n    });\r\n}\r\n\r\n/**\r\n * ensures that the given document exists\r\n * @return promise that resolves with new doc and flag if inserted\r\n */\r\nfunction _incrementalUpsertEnsureRxDocumentExists<RxDocType>(\r\n    rxCollection: RxCollection<RxDocType>,\r\n    primary: string,\r\n    json: any\r\n): Promise<\r\n    {\r\n        doc: RxDocument<RxDocType>;\r\n        inserted: boolean;\r\n    }\r\n> {\r\n    /**\r\n     * Optimisation shortcut,\r\n     * first try to find the document in the doc-cache\r\n     */\r\n    const docDataFromCache = rxCollection._docCache.getLatestDocumentDataIfExists(primary);\r\n    if (docDataFromCache) {\r\n        return Promise.resolve({\r\n            doc: rxCollection._docCache.getCachedRxDocuments([docDataFromCache])[0],\r\n            inserted: false\r\n        });\r\n    }\r\n    return rxCollection.findOne(primary).exec()\r\n        .then(doc => {\r\n            if (!doc) {\r\n                return rxCollection.insert(json).then(newDoc => ({\r\n                    doc: newDoc,\r\n                    inserted: true\r\n                }));\r\n            } else {\r\n                return {\r\n                    doc,\r\n                    inserted: false\r\n                };\r\n            }\r\n        });\r\n}\r\n\r\n/**\r\n * creates and prepares a new collection\r\n */\r\nexport function createRxCollection(\r\n    {\r\n        database,\r\n        name,\r\n        schema,\r\n        instanceCreationOptions = {},\r\n        migrationStrategies = {},\r\n        autoMigrate = true,\r\n        statics = {},\r\n        methods = {},\r\n        attachments = {},\r\n        options = {},\r\n        localDocuments = false,\r\n        cacheReplacementPolicy = defaultCacheReplacementPolicy,\r\n        conflictHandler = defaultConflictHandler\r\n    }: any\r\n): Promise<RxCollection> {\r\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\r\n        databaseInstanceToken: database.token,\r\n        databaseName: database.name,\r\n        collectionName: name,\r\n        schema: schema.jsonSchema,\r\n        options: instanceCreationOptions,\r\n        multiInstance: database.multiInstance,\r\n        password: database.password,\r\n        devMode: overwritable.isDevMode()\r\n    };\r\n\r\n    runPluginHooks(\r\n        'preCreateRxStorageInstance',\r\n        storageInstanceCreationParams\r\n    );\r\n\r\n    return createRxCollectionStorageInstance(\r\n        database,\r\n        storageInstanceCreationParams\r\n    ).then(storageInstance => {\r\n        const collection = new RxCollectionBase(\r\n            database,\r\n            name,\r\n            schema,\r\n            storageInstance,\r\n            instanceCreationOptions,\r\n            migrationStrategies,\r\n            methods,\r\n            attachments,\r\n            options,\r\n            cacheReplacementPolicy,\r\n            statics,\r\n            conflictHandler\r\n        );\r\n\r\n        return collection\r\n            .prepare()\r\n            .then(() => {\r\n                // ORM add statics\r\n                Object\r\n                    .entries(statics)\r\n                    .forEach(([funName, fun]) => {\r\n                        Object.defineProperty(collection, funName, {\r\n                            get: () => (fun as any).bind(collection)\r\n                        });\r\n                    });\r\n\r\n                let ret = PROMISE_RESOLVE_VOID;\r\n                if (autoMigrate && collection.schema.version !== 0) {\r\n                    ret = collection.migratePromise();\r\n                }\r\n                return ret;\r\n            })\r\n            .then(() => {\r\n                runPluginHooks('createRxCollection', {\r\n                    collection,\r\n                    creator: {\r\n                        name,\r\n                        schema,\r\n                        storageInstance,\r\n                        instanceCreationOptions,\r\n                        migrationStrategies,\r\n                        methods,\r\n                        attachments,\r\n                        options,\r\n                        cacheReplacementPolicy,\r\n                        localDocuments,\r\n                        statics\r\n                    }\r\n                });\r\n                return collection as any;\r\n            })\r\n            /**\r\n             * If the collection creation fails,\r\n             * we yet have to close the storage instances.\r\n             */\r\n            .catch(err => {\r\n                OPEN_COLLECTIONS.delete(collection);\r\n                return storageInstance.close()\r\n                    .then(() => Promise.reject(err as Error));\r\n            });\r\n    });\r\n}\r\n\r\nexport function isRxCollection(obj: any): boolean {\r\n    return obj instanceof RxCollectionBase;\r\n}\r\n"],"mappings":"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","ignoreList":[]}