{"version":3,"file":"rx-collection-helper.js","names":["_index","require","_rxSchemaHelper","_hooks","_rxDatabaseInternalStore","_rxStorageHelper","_overwritable","_rxError","fillObjectDataBeforeInsert","schema","data","flatClone","fillObjectWithDefaults","jsonSchema","primaryKey","fillPrimaryKey","primaryPath","_meta","getDefaultRxDocumentMeta","Object","prototype","hasOwnProperty","call","_deleted","_attachments","_rev","getDefaultRevision","createRxCollectionStorageInstance","rxDatabase","storageInstanceCreationParams","multiInstance","storageInstance","storage","createStorageInstance","removeCollectionStorages","databaseInternalStorage","databaseInstanceToken","databaseName","collectionName","password","hashFunction","allCollectionMetaDocs","getAllCollectionDocuments","relevantCollectionMetaDocs","filter","metaDoc","name","removeStorages","forEach","push","isCollection","connectedStorages","row","alreadyAdded","Set","key","version","has","add","Promise","all","map","options","devMode","overwritable","isDevMode","remove","runAsyncPluginHooks","writeRows","doc","writeDoc","flatCloneDocWithMeta","lwt","now","createRevision","previous","document","bulkWrite","ensureRxCollectionIsNotClosed","collection","closed","newRxError"],"sources":["../../src/rx-collection-helper.ts"],"sourcesContent":["import type {\r\n    HashFunction,\r\n    InternalStoreDocType,\r\n    RxCollection,\r\n    RxDatabase,\r\n    RxDocumentData,\r\n    RxJsonSchema,\r\n    RxStorage,\r\n    RxStorageInstance,\r\n    RxStorageInstanceCreationParams\r\n} from './types/index.d.ts';\r\nimport {\r\n    createRevision,\r\n    flatClone,\r\n    getDefaultRevision,\r\n    getDefaultRxDocumentMeta,\r\n    now\r\n} from './plugins/utils/index.ts';\r\nimport {\r\n    fillObjectWithDefaults,\r\n    fillPrimaryKey\r\n} from './rx-schema-helper.ts';\r\nimport type { RxSchema } from './rx-schema.ts';\r\nimport { runAsyncPluginHooks } from './hooks.ts';\r\nimport { getAllCollectionDocuments } from './rx-database-internal-store.ts';\r\nimport { flatCloneDocWithMeta } from './rx-storage-helper.ts';\r\nimport { overwritable } from './overwritable.ts';\r\nimport type { RxCollectionBase } from './rx-collection.ts';\r\nimport { newRxError } from './rx-error.ts';\r\n\r\n/**\r\n * fills in the default data.\r\n * This also clones the data.\r\n */\r\nexport function fillObjectDataBeforeInsert<RxDocType>(\r\n    schema: RxSchema<RxDocType>,\r\n    data: Partial<RxDocumentData<RxDocType>> | any\r\n): RxDocumentData<RxDocType> {\r\n    data = flatClone(data);\r\n    data = fillObjectWithDefaults(schema, data);\r\n    if (typeof schema.jsonSchema.primaryKey !== 'string') {\r\n        data = fillPrimaryKey(\r\n            schema.primaryPath,\r\n            schema.jsonSchema,\r\n            data\r\n        );\r\n    }\r\n    data._meta = getDefaultRxDocumentMeta();\r\n    if (!Object.prototype.hasOwnProperty.call(data, '_deleted')) {\r\n        data._deleted = false;\r\n    }\r\n    if (!Object.prototype.hasOwnProperty.call(data, '_attachments')) {\r\n        data._attachments = {};\r\n    }\r\n    if (!Object.prototype.hasOwnProperty.call(data, '_rev')) {\r\n        data._rev = getDefaultRevision();\r\n    }\r\n    return data;\r\n}\r\n\r\n/**\r\n * Creates the storage instances that are used internally in the collection\r\n */\r\nexport async function createRxCollectionStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>(\r\n    rxDatabase: RxDatabase<{}, Internals, InstanceCreationOptions>,\r\n    storageInstanceCreationParams: RxStorageInstanceCreationParams<RxDocumentType, InstanceCreationOptions>\r\n): Promise<RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>> {\r\n    storageInstanceCreationParams.multiInstance = rxDatabase.multiInstance;\r\n    const storageInstance = await rxDatabase.storage.createStorageInstance<RxDocumentType>(\r\n        storageInstanceCreationParams\r\n    );\r\n    return storageInstance;\r\n}\r\n\r\n/**\r\n * Removes the main storage of the collection\r\n * and all connected storages like the ones from the replication meta etc.\r\n */\r\nexport async function removeCollectionStorages(\r\n    storage: RxStorage<any, any>,\r\n    databaseInternalStorage: RxStorageInstance<InternalStoreDocType<any>, any, any>,\r\n    databaseInstanceToken: string,\r\n    databaseName: string,\r\n    collectionName: string,\r\n    multiInstance: boolean,\r\n    password?: string,\r\n    /**\r\n     * If no hash function is provided,\r\n     * we assume that the whole internal store is removed anyway\r\n     * so we do not have to delete the meta documents.\r\n     */\r\n    hashFunction?: HashFunction,\r\n) {\r\n    const allCollectionMetaDocs = await getAllCollectionDocuments(\r\n        databaseInternalStorage\r\n    );\r\n    const relevantCollectionMetaDocs = allCollectionMetaDocs\r\n        .filter(metaDoc => metaDoc.data.name === collectionName);\r\n    let removeStorages: {\r\n        collectionName: string;\r\n        schema: RxJsonSchema<any>;\r\n        isCollection: boolean;\r\n    }[] = [];\r\n    relevantCollectionMetaDocs.forEach(metaDoc => {\r\n        removeStorages.push({\r\n            collectionName: metaDoc.data.name,\r\n            schema: metaDoc.data.schema,\r\n            isCollection: true\r\n        });\r\n        metaDoc.data.connectedStorages.forEach(row => removeStorages.push({\r\n            collectionName: row.collectionName,\r\n            isCollection: false,\r\n            schema: row.schema\r\n        }));\r\n    });\r\n\r\n    // ensure uniqueness\r\n    const alreadyAdded = new Set<string>();\r\n    removeStorages = removeStorages.filter(row => {\r\n        const key = row.collectionName + '||' + row.schema.version;\r\n        if (alreadyAdded.has(key)) {\r\n            return false;\r\n        } else {\r\n            alreadyAdded.add(key);\r\n            return true;\r\n        }\r\n    });\r\n\r\n    // remove all the storages\r\n    await Promise.all(\r\n        removeStorages\r\n            .map(async (row) => {\r\n                const storageInstance = await storage.createStorageInstance<any>({\r\n                    collectionName: row.collectionName,\r\n                    databaseInstanceToken,\r\n                    databaseName,\r\n                    /**\r\n                     * multiInstance must be set to true if multiInstance\r\n                     * was true on the database\r\n                     * so that the storageInstance can inform other\r\n                     * instances about being removed.\r\n                     */\r\n                    multiInstance,\r\n                    options: {},\r\n                    schema: row.schema,\r\n                    password,\r\n                    devMode: overwritable.isDevMode()\r\n                });\r\n                await storageInstance.remove();\r\n                if (row.isCollection) {\r\n                    await runAsyncPluginHooks('postRemoveRxCollection', {\r\n                        storage,\r\n                        databaseName: databaseName,\r\n                        collectionName\r\n                    });\r\n                }\r\n            })\r\n    );\r\n\r\n    // remove the meta documents\r\n    if (hashFunction) {\r\n        const writeRows = relevantCollectionMetaDocs.map(doc => {\r\n            const writeDoc = flatCloneDocWithMeta(doc);\r\n            writeDoc._deleted = true;\r\n            writeDoc._meta.lwt = now();\r\n            writeDoc._rev = createRevision(\r\n                databaseInstanceToken,\r\n                doc\r\n            );\r\n            return {\r\n                previous: doc,\r\n                document: writeDoc\r\n            };\r\n        });\r\n        await databaseInternalStorage.bulkWrite(\r\n            writeRows,\r\n            'rx-database-remove-collection-all'\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport function ensureRxCollectionIsNotClosed(\r\n    collection: RxCollection | RxCollectionBase<any, any, any, any, any>\r\n) {\r\n    if (collection.closed) {\r\n        throw newRxError(\r\n            'COL21',\r\n            {\r\n                collection: collection.name,\r\n                version: collection.schema.version\r\n            }\r\n        );\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]}