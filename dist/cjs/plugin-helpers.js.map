{"version":3,"file":"plugin-helpers.js","names":["_operators","require","_rxSchemaHelper","_index","_rxjs","VALIDATOR_CACHE_BY_VALIDATOR_KEY","Map","wrappedValidateStorageFactory","getValidator","validatorKey","VALIDATOR_CACHE","getFromMapOrCreate","initValidator","schema","JSON","stringify","args","Object","assign","storage","name","createStorageInstance","params","instance","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","validatorCached","requestIdleCallbackIfAvailable","oldBulkWrite","bulkWrite","bind","documentWrites","context","errors","continueWrites","forEach","row","documentId","document","validationErrors","length","push","status","isError","writeRow","writePromise","Promise","resolve","error","success","then","writeResult","validationError","wrapRxStorageInstance","originalSchema","modifyToStorage","modifyFromStorage","modifyAttachmentFromStorage","v","toStorage","docData","fromStorage","errorFromStorage","ret","flatClone","documentInDb","previous","processingChangesCount$","BehaviorSubject","wrappedInstance","databaseName","internals","cleanup","options","close","collectionName","count","remove","originalStorageInstance","useRows","all","map","undefined","promises","err","firstValueFrom","pipe","filter","query","preparedQuery","queryResult","documents","doc","getAttachmentData","attachmentId","digest","data","findDocumentsById","ids","deleted","findResult","getChangedDocumentsSince","limit","checkpoint","result","d","changeStream","tap","next","getValue","mergeMap","eventBulk","useEvents","events","event","documentData","previousDocumentData","ev","operation","isLocal","id"],"sources":["../../src/plugin-helpers.ts"],"sourcesContent":["import { filter, mergeMap, tap } from 'rxjs/operators';\r\nimport { getPrimaryFieldOfPrimaryKey } from './rx-schema-helper.ts';\r\nimport { WrappedRxStorageInstance } from './rx-storage-helper.ts';\r\nimport type {\r\n    BulkWriteRow,\r\n    EventBulk,\r\n    RxChangeEvent,\r\n    RxDocumentData,\r\n    RxDocumentWriteData,\r\n    RxJsonSchema,\r\n    RxStorage,\r\n    RxStorageWriteError,\r\n    RxStorageBulkWriteResponse,\r\n    RxStorageChangeEvent,\r\n    RxStorageInstance,\r\n    RxStorageInstanceCreationParams,\r\n    RxValidationError,\r\n    RxStorageWriteErrorConflict,\r\n    MaybePromise\r\n} from './types/index.d.ts';\r\nimport {\r\n    flatClone,\r\n    getFromMapOrCreate,\r\n    requestIdleCallbackIfAvailable\r\n} from './plugins/utils/index.ts';\r\nimport { BehaviorSubject, firstValueFrom } from 'rxjs';\r\n\r\n\r\ntype WrappedStorageFunction = <Internals, InstanceCreationOptions>(\r\n    args: {\r\n        storage: RxStorage<Internals, InstanceCreationOptions>;\r\n    }\r\n) => RxStorage<Internals, InstanceCreationOptions>;\r\n\r\n/**\r\n * Returns the validation errors.\r\n * If document is fully valid, returns an empty array.\r\n */\r\ntype ValidatorFunction = (docData: RxDocumentData<any>) => RxValidationError[];\r\n\r\n/**\r\n * cache the validators by the schema string\r\n * so we can reuse them when multiple collections have the same schema\r\n *\r\n * Notice: to make it easier and not dependent on a hash function,\r\n * we use the plain json string.\r\n */\r\nconst VALIDATOR_CACHE_BY_VALIDATOR_KEY: Map<string, Map<string, ValidatorFunction>> = new Map();\r\n\r\n/**\r\n * This factory is used in the validation plugins\r\n * so that we can reuse the basic storage wrapping code.\r\n */\r\nexport function wrappedValidateStorageFactory(\r\n    /**\r\n     * Returns a method that can be used to validate\r\n     * documents and throws when the document is not valid.\r\n     */\r\n    getValidator: (schema: RxJsonSchema<any>) => ValidatorFunction,\r\n    /**\r\n     * A string to identify the validation library.\r\n     */\r\n    validatorKey: string\r\n): WrappedStorageFunction {\r\n    const VALIDATOR_CACHE = getFromMapOrCreate(\r\n        VALIDATOR_CACHE_BY_VALIDATOR_KEY,\r\n        validatorKey,\r\n        () => new Map()\r\n    );\r\n\r\n    function initValidator(\r\n        schema: RxJsonSchema<any>\r\n    ): ValidatorFunction {\r\n        return getFromMapOrCreate(\r\n            VALIDATOR_CACHE,\r\n            JSON.stringify(schema),\r\n            () => getValidator(schema)\r\n        );\r\n    }\r\n\r\n    return (args) => {\r\n        return Object.assign(\r\n            {},\r\n            args.storage,\r\n            {\r\n                name: 'validate-' + validatorKey + '-' + args.storage.name,\r\n                async createStorageInstance<RxDocType>(\r\n                    params: RxStorageInstanceCreationParams<RxDocType, any>\r\n                ) {\r\n                    const instance = await args.storage.createStorageInstance(params);\r\n                    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\r\n\r\n                    /**\r\n                     * Lazy initialize the validator\r\n                     * to save initial page load performance.\r\n                     * Some libraries take really long to initialize the validator\r\n                     * from the schema.\r\n                     */\r\n                    let validatorCached: ValidatorFunction;\r\n                    requestIdleCallbackIfAvailable(() => validatorCached = initValidator(params.schema));\r\n\r\n                    const oldBulkWrite = instance.bulkWrite.bind(instance);\r\n                    instance.bulkWrite = (\r\n                        documentWrites: BulkWriteRow<RxDocType>[],\r\n                        context: string\r\n                    ) => {\r\n                        if (!validatorCached) {\r\n                            validatorCached = initValidator(params.schema);\r\n                        }\r\n                        const errors: RxStorageWriteError<RxDocType>[] = [];\r\n                        const continueWrites: typeof documentWrites = [];\r\n                        documentWrites.forEach(row => {\r\n                            const documentId: string = row.document[primaryPath] as any;\r\n                            const validationErrors = validatorCached(row.document);\r\n                            if (validationErrors.length > 0) {\r\n                                errors.push({\r\n                                    status: 422,\r\n                                    isError: true,\r\n                                    documentId,\r\n                                    writeRow: row,\r\n                                    validationErrors,\r\n                                    schema: instance.schema\r\n                                });\r\n                            } else {\r\n                                continueWrites.push(row);\r\n                            }\r\n                        });\r\n                        const writePromise: Promise<RxStorageBulkWriteResponse<RxDocType>> = continueWrites.length > 0 ?\r\n                            oldBulkWrite(continueWrites, context) :\r\n                            Promise.resolve({ error: [], success: [] });\r\n                        return writePromise.then(writeResult => {\r\n                            errors.forEach(validationError => {\r\n                                writeResult.error.push(validationError);\r\n                            });\r\n                            return writeResult;\r\n                        });\r\n                    };\r\n\r\n                    return instance;\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * Used in plugins to easily modify all in- and outgoing\r\n * data of that storage instance.\r\n */\r\nexport function wrapRxStorageInstance<RxDocType>(\r\n    originalSchema: RxJsonSchema<RxDocumentData<RxDocType>>,\r\n    instance: RxStorageInstance<RxDocType, any, any>,\r\n    modifyToStorage: (docData: RxDocumentWriteData<RxDocType>) => MaybePromise<RxDocumentData<any>>,\r\n    modifyFromStorage: (docData: RxDocumentData<any>) => MaybePromise<RxDocumentData<RxDocType>>,\r\n    modifyAttachmentFromStorage: (attachmentData: string) => MaybePromise<string> = (v) => v\r\n): WrappedRxStorageInstance<RxDocType, any, any> {\r\n    async function toStorage(docData: RxDocumentWriteData<RxDocType>): Promise<RxDocumentData<any>> {\r\n        if (!docData) {\r\n            return docData;\r\n        }\r\n        return await modifyToStorage(docData);\r\n    }\r\n    async function fromStorage(docData: RxDocumentData<any> | null): Promise<RxDocumentData<RxDocType>> {\r\n        if (!docData) {\r\n            return docData;\r\n        }\r\n        return await modifyFromStorage(docData);\r\n    }\r\n    async function errorFromStorage(\r\n        error: RxStorageWriteError<any>\r\n    ): Promise<RxStorageWriteError<RxDocType>> {\r\n        const ret = flatClone(error);\r\n        ret.writeRow = flatClone(ret.writeRow);\r\n        if ((ret as RxStorageWriteErrorConflict<any>).documentInDb) {\r\n            (ret as RxStorageWriteErrorConflict<any>).documentInDb = await fromStorage((ret as RxStorageWriteErrorConflict<any>).documentInDb);\r\n        }\r\n        if (ret.writeRow.previous) {\r\n            ret.writeRow.previous = await fromStorage(ret.writeRow.previous);\r\n        }\r\n        ret.writeRow.document = await fromStorage(ret.writeRow.document);\r\n        return ret;\r\n    }\r\n\r\n\r\n    const processingChangesCount$ = new BehaviorSubject(0);\r\n\r\n    const wrappedInstance: WrappedRxStorageInstance<RxDocType, any, any> = {\r\n        databaseName: instance.databaseName,\r\n        internals: instance.internals,\r\n        cleanup: instance.cleanup.bind(instance),\r\n        options: instance.options,\r\n        close: instance.close.bind(instance),\r\n        schema: originalSchema,\r\n        collectionName: instance.collectionName,\r\n        count: instance.count.bind(instance),\r\n        remove: instance.remove.bind(instance),\r\n        originalStorageInstance: instance,\r\n        bulkWrite: async (\r\n            documentWrites: BulkWriteRow<RxDocType>[],\r\n            context: string\r\n        ) => {\r\n            const useRows: BulkWriteRow<any>[] = [];\r\n            await Promise.all(\r\n                documentWrites.map(async (row) => {\r\n                    const [previous, document] = await Promise.all([\r\n                        row.previous ? toStorage(row.previous) : undefined,\r\n                        toStorage(row.document)\r\n                    ]);\r\n                    useRows.push({ previous, document });\r\n                })\r\n            );\r\n\r\n            const writeResult = await instance.bulkWrite(useRows, context);\r\n            const ret: RxStorageBulkWriteResponse<RxDocType> = {\r\n                error: []\r\n            };\r\n            const promises: Promise<any>[] = [];\r\n            writeResult.error.forEach(error => {\r\n                promises.push(\r\n                    errorFromStorage(error).then(err => ret.error.push(err))\r\n                );\r\n            });\r\n            await Promise.all(promises);\r\n\r\n            /**\r\n             * By definition, all change events must be emitted\r\n             * BEFORE the write call resolves.\r\n             * To ensure that even when the modifiers are async,\r\n             * we wait here until the processing queue is empty.\r\n             */\r\n            await firstValueFrom(\r\n                processingChangesCount$.pipe(\r\n                    filter(v => v === 0)\r\n                )\r\n            );\r\n            return ret;\r\n        },\r\n        query: (preparedQuery) => {\r\n            return instance.query(preparedQuery)\r\n                .then(queryResult => {\r\n                    return Promise.all(queryResult.documents.map(doc => fromStorage(doc)));\r\n                })\r\n                .then(documents => ({ documents: documents as any }));\r\n        },\r\n        getAttachmentData: async (\r\n            documentId: string,\r\n            attachmentId: string,\r\n            digest: string\r\n        ) => {\r\n            let data = await instance.getAttachmentData(documentId, attachmentId, digest);\r\n            data = await modifyAttachmentFromStorage(data);\r\n            return data;\r\n        },\r\n        findDocumentsById: (ids, deleted) => {\r\n            return instance.findDocumentsById(ids, deleted)\r\n                .then(async (findResult) => {\r\n                    const ret: RxDocumentData<RxDocType>[] = [];\r\n                    await Promise.all(\r\n                        findResult\r\n                            .map(async (doc) => {\r\n                                ret.push(await fromStorage(doc));\r\n                            })\r\n                    );\r\n                    return ret;\r\n                });\r\n        },\r\n        getChangedDocumentsSince: !instance.getChangedDocumentsSince ? undefined : (limit, checkpoint) => {\r\n            return ((instance as any).getChangedDocumentsSince)(limit, checkpoint)\r\n                .then(async (result: any) => {\r\n                    return {\r\n                        checkpoint: result.checkpoint,\r\n                        documents: await Promise.all(\r\n                            result.documents.map((d: any) => fromStorage(d))\r\n                        )\r\n                    };\r\n                });\r\n        },\r\n        changeStream: () => {\r\n            return instance.changeStream().pipe(\r\n                tap(() => processingChangesCount$.next(processingChangesCount$.getValue() + 1)),\r\n                mergeMap(async (eventBulk) => {\r\n                    const useEvents = await Promise.all(\r\n                        eventBulk.events.map(async (event) => {\r\n                            const [\r\n                                documentData,\r\n                                previousDocumentData\r\n                            ] = await Promise.all([\r\n                                fromStorage(event.documentData),\r\n                                fromStorage(event.previousDocumentData)\r\n                            ]);\r\n                            const ev: RxChangeEvent<RxDocType> = {\r\n                                operation: event.operation,\r\n                                documentId: event.documentId,\r\n                                documentData: documentData as any,\r\n                                previousDocumentData: previousDocumentData as any,\r\n                                isLocal: false\r\n                            };\r\n                            return ev;\r\n                        })\r\n                    );\r\n                    const ret: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\r\n                        id: eventBulk.id,\r\n                        events: useEvents,\r\n                        checkpoint: eventBulk.checkpoint,\r\n                        context: eventBulk.context\r\n                    };\r\n                    return ret;\r\n                }),\r\n                tap(() => processingChangesCount$.next(processingChangesCount$.getValue() - 1))\r\n            );\r\n        },\r\n    };\r\n\r\n    return wrappedInstance;\r\n}\r\n"],"mappings":";;;;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AACA,IAAAC,eAAA,GAAAD,OAAA;AAmBA,IAAAE,MAAA,GAAAF,OAAA;AAKA,IAAAG,KAAA,GAAAH,OAAA;AASA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMI,gCAA6E,GAAG,IAAIC,GAAG,CAAC,CAAC;;AAE/F;AACA;AACA;AACA;AACO,SAASC,6BAA6BA;AACzC;AACJ;AACA;AACA;AACIC,YAA8D;AAC9D;AACJ;AACA;AACIC,YAAoB,EACE;EACtB,IAAMC,eAAe,GAAG,IAAAC,yBAAkB,EACtCN,gCAAgC,EAChCI,YAAY,EACZ,MAAM,IAAIH,GAAG,CAAC,CAClB,CAAC;EAED,SAASM,aAAaA,CAClBC,MAAyB,EACR;IACjB,OAAO,IAAAF,yBAAkB,EACrBD,eAAe,EACfI,IAAI,CAACC,SAAS,CAACF,MAAM,CAAC,EACtB,MAAML,YAAY,CAACK,MAAM,CAC7B,CAAC;EACL;EAEA,OAAQG,IAAI,IAAK;IACb,OAAOC,MAAM,CAACC,MAAM,CAChB,CAAC,CAAC,EACFF,IAAI,CAACG,OAAO,EACZ;MACIC,IAAI,EAAE,WAAW,GAAGX,YAAY,GAAG,GAAG,GAAGO,IAAI,CAACG,OAAO,CAACC,IAAI;MAC1D,MAAMC,qBAAqBA,CACvBC,MAAuD,EACzD;QACE,IAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACG,OAAO,CAACE,qBAAqB,CAACC,MAAM,CAAC;QACjE,IAAME,WAAW,GAAG,IAAAC,2CAA2B,EAACH,MAAM,CAACT,MAAM,CAACa,UAAU,CAAC;;QAEzE;AACpB;AACA;AACA;AACA;AACA;QACoB,IAAIC,eAAkC;QACtC,IAAAC,qCAA8B,EAAC,MAAMD,eAAe,GAAGf,aAAa,CAACU,MAAM,CAACT,MAAM,CAAC,CAAC;QAEpF,IAAMgB,YAAY,GAAGN,QAAQ,CAACO,SAAS,CAACC,IAAI,CAACR,QAAQ,CAAC;QACtDA,QAAQ,CAACO,SAAS,GAAG,CACjBE,cAAyC,EACzCC,OAAe,KACd;UACD,IAAI,CAACN,eAAe,EAAE;YAClBA,eAAe,GAAGf,aAAa,CAACU,MAAM,CAACT,MAAM,CAAC;UAClD;UACA,IAAMqB,MAAwC,GAAG,EAAE;UACnD,IAAMC,cAAqC,GAAG,EAAE;UAChDH,cAAc,CAACI,OAAO,CAACC,GAAG,IAAI;YAC1B,IAAMC,UAAkB,GAAGD,GAAG,CAACE,QAAQ,CAACf,WAAW,CAAQ;YAC3D,IAAMgB,gBAAgB,GAAGb,eAAe,CAACU,GAAG,CAACE,QAAQ,CAAC;YACtD,IAAIC,gBAAgB,CAACC,MAAM,GAAG,CAAC,EAAE;cAC7BP,MAAM,CAACQ,IAAI,CAAC;gBACRC,MAAM,EAAE,GAAG;gBACXC,OAAO,EAAE,IAAI;gBACbN,UAAU;gBACVO,QAAQ,EAAER,GAAG;gBACbG,gBAAgB;gBAChB3B,MAAM,EAAEU,QAAQ,CAACV;cACrB,CAAC,CAAC;YACN,CAAC,MAAM;cACHsB,cAAc,CAACO,IAAI,CAACL,GAAG,CAAC;YAC5B;UACJ,CAAC,CAAC;UACF,IAAMS,YAA4D,GAAGX,cAAc,CAACM,MAAM,GAAG,CAAC,GAC1FZ,YAAY,CAACM,cAAc,EAAEF,OAAO,CAAC,GACrCc,OAAO,CAACC,OAAO,CAAC;YAAEC,KAAK,EAAE,EAAE;YAAEC,OAAO,EAAE;UAAG,CAAC,CAAC;UAC/C,OAAOJ,YAAY,CAACK,IAAI,CAACC,WAAW,IAAI;YACpClB,MAAM,CAACE,OAAO,CAACiB,eAAe,IAAI;cAC9BD,WAAW,CAACH,KAAK,CAACP,IAAI,CAACW,eAAe,CAAC;YAC3C,CAAC,CAAC;YACF,OAAOD,WAAW;UACtB,CAAC,CAAC;QACN,CAAC;QAED,OAAO7B,QAAQ;MACnB;IACJ,CACJ,CAAC;EACL,CAAC;AAEL;;AAIA;AACA;AACA;AACA;AACO,SAAS+B,qBAAqBA,CACjCC,cAAuD,EACvDhC,QAAgD,EAChDiC,eAA+F,EAC/FC,iBAA4F,EAC5FC,2BAA6E,GAAIC,CAAC,IAAKA,CAAC,EAC3C;EAC7C,eAAeC,SAASA,CAACC,OAAuC,EAAgC;IAC5F,IAAI,CAACA,OAAO,EAAE;MACV,OAAOA,OAAO;IAClB;IACA,OAAO,MAAML,eAAe,CAACK,OAAO,CAAC;EACzC;EACA,eAAeC,WAAWA,CAACD,OAAmC,EAAsC;IAChG,IAAI,CAACA,OAAO,EAAE;MACV,OAAOA,OAAO;IAClB;IACA,OAAO,MAAMJ,iBAAiB,CAACI,OAAO,CAAC;EAC3C;EACA,eAAeE,gBAAgBA,CAC3Bd,KAA+B,EACQ;IACvC,IAAMe,GAAG,GAAG,IAAAC,gBAAS,EAAChB,KAAK,CAAC;IAC5Be,GAAG,CAACnB,QAAQ,GAAG,IAAAoB,gBAAS,EAACD,GAAG,CAACnB,QAAQ,CAAC;IACtC,IAAKmB,GAAG,CAAsCE,YAAY,EAAE;MACvDF,GAAG,CAAsCE,YAAY,GAAG,MAAMJ,WAAW,CAAEE,GAAG,CAAsCE,YAAY,CAAC;IACtI;IACA,IAAIF,GAAG,CAACnB,QAAQ,CAACsB,QAAQ,EAAE;MACvBH,GAAG,CAACnB,QAAQ,CAACsB,QAAQ,GAAG,MAAML,WAAW,CAACE,GAAG,CAACnB,QAAQ,CAACsB,QAAQ,CAAC;IACpE;IACAH,GAAG,CAACnB,QAAQ,CAACN,QAAQ,GAAG,MAAMuB,WAAW,CAACE,GAAG,CAACnB,QAAQ,CAACN,QAAQ,CAAC;IAChE,OAAOyB,GAAG;EACd;EAGA,IAAMI,uBAAuB,GAAG,IAAIC,qBAAe,CAAC,CAAC,CAAC;EAEtD,IAAMC,eAA8D,GAAG;IACnEC,YAAY,EAAEhD,QAAQ,CAACgD,YAAY;IACnCC,SAAS,EAAEjD,QAAQ,CAACiD,SAAS;IAC7BC,OAAO,EAAElD,QAAQ,CAACkD,OAAO,CAAC1C,IAAI,CAACR,QAAQ,CAAC;IACxCmD,OAAO,EAAEnD,QAAQ,CAACmD,OAAO;IACzBC,KAAK,EAAEpD,QAAQ,CAACoD,KAAK,CAAC5C,IAAI,CAACR,QAAQ,CAAC;IACpCV,MAAM,EAAE0C,cAAc;IACtBqB,cAAc,EAAErD,QAAQ,CAACqD,cAAc;IACvCC,KAAK,EAAEtD,QAAQ,CAACsD,KAAK,CAAC9C,IAAI,CAACR,QAAQ,CAAC;IACpCuD,MAAM,EAAEvD,QAAQ,CAACuD,MAAM,CAAC/C,IAAI,CAACR,QAAQ,CAAC;IACtCwD,uBAAuB,EAAExD,QAAQ;IACjCO,SAAS,EAAE,MAAAA,CACPE,cAAyC,EACzCC,OAAe,KACd;MACD,IAAM+C,OAA4B,GAAG,EAAE;MACvC,MAAMjC,OAAO,CAACkC,GAAG,CACbjD,cAAc,CAACkD,GAAG,CAAC,MAAO7C,GAAG,IAAK;QAC9B,IAAM,CAAC8B,QAAQ,EAAE5B,QAAQ,CAAC,GAAG,MAAMQ,OAAO,CAACkC,GAAG,CAAC,CAC3C5C,GAAG,CAAC8B,QAAQ,GAAGP,SAAS,CAACvB,GAAG,CAAC8B,QAAQ,CAAC,GAAGgB,SAAS,EAClDvB,SAAS,CAACvB,GAAG,CAACE,QAAQ,CAAC,CAC1B,CAAC;QACFyC,OAAO,CAACtC,IAAI,CAAC;UAAEyB,QAAQ;UAAE5B;QAAS,CAAC,CAAC;MACxC,CAAC,CACL,CAAC;MAED,IAAMa,WAAW,GAAG,MAAM7B,QAAQ,CAACO,SAAS,CAACkD,OAAO,EAAE/C,OAAO,CAAC;MAC9D,IAAM+B,GAA0C,GAAG;QAC/Cf,KAAK,EAAE;MACX,CAAC;MACD,IAAMmC,QAAwB,GAAG,EAAE;MACnChC,WAAW,CAACH,KAAK,CAACb,OAAO,CAACa,KAAK,IAAI;QAC/BmC,QAAQ,CAAC1C,IAAI,CACTqB,gBAAgB,CAACd,KAAK,CAAC,CAACE,IAAI,CAACkC,GAAG,IAAIrB,GAAG,CAACf,KAAK,CAACP,IAAI,CAAC2C,GAAG,CAAC,CAC3D,CAAC;MACL,CAAC,CAAC;MACF,MAAMtC,OAAO,CAACkC,GAAG,CAACG,QAAQ,CAAC;;MAE3B;AACZ;AACA;AACA;AACA;AACA;MACY,MAAM,IAAAE,oBAAc,EAChBlB,uBAAuB,CAACmB,IAAI,CACxB,IAAAC,iBAAM,EAAC7B,CAAC,IAAIA,CAAC,KAAK,CAAC,CACvB,CACJ,CAAC;MACD,OAAOK,GAAG;IACd,CAAC;IACDyB,KAAK,EAAGC,aAAa,IAAK;MACtB,OAAOnE,QAAQ,CAACkE,KAAK,CAACC,aAAa,CAAC,CAC/BvC,IAAI,CAACwC,WAAW,IAAI;QACjB,OAAO5C,OAAO,CAACkC,GAAG,CAACU,WAAW,CAACC,SAAS,CAACV,GAAG,CAACW,GAAG,IAAI/B,WAAW,CAAC+B,GAAG,CAAC,CAAC,CAAC;MAC1E,CAAC,CAAC,CACD1C,IAAI,CAACyC,SAAS,KAAK;QAAEA,SAAS,EAAEA;MAAiB,CAAC,CAAC,CAAC;IAC7D,CAAC;IACDE,iBAAiB,EAAE,MAAAA,CACfxD,UAAkB,EAClByD,YAAoB,EACpBC,MAAc,KACb;MACD,IAAIC,IAAI,GAAG,MAAM1E,QAAQ,CAACuE,iBAAiB,CAACxD,UAAU,EAAEyD,YAAY,EAAEC,MAAM,CAAC;MAC7EC,IAAI,GAAG,MAAMvC,2BAA2B,CAACuC,IAAI,CAAC;MAC9C,OAAOA,IAAI;IACf,CAAC;IACDC,iBAAiB,EAAEA,CAACC,GAAG,EAAEC,OAAO,KAAK;MACjC,OAAO7E,QAAQ,CAAC2E,iBAAiB,CAACC,GAAG,EAAEC,OAAO,CAAC,CAC1CjD,IAAI,CAAC,MAAOkD,UAAU,IAAK;QACxB,IAAMrC,GAAgC,GAAG,EAAE;QAC3C,MAAMjB,OAAO,CAACkC,GAAG,CACboB,UAAU,CACLnB,GAAG,CAAC,MAAOW,GAAG,IAAK;UAChB7B,GAAG,CAACtB,IAAI,CAAC,MAAMoB,WAAW,CAAC+B,GAAG,CAAC,CAAC;QACpC,CAAC,CACT,CAAC;QACD,OAAO7B,GAAG;MACd,CAAC,CAAC;IACV,CAAC;IACDsC,wBAAwB,EAAE,CAAC/E,QAAQ,CAAC+E,wBAAwB,GAAGnB,SAAS,GAAG,CAACoB,KAAK,EAAEC,UAAU,KAAK;MAC9F,OAASjF,QAAQ,CAAS+E,wBAAwB,CAAEC,KAAK,EAAEC,UAAU,CAAC,CACjErD,IAAI,CAAC,MAAOsD,MAAW,IAAK;QACzB,OAAO;UACHD,UAAU,EAAEC,MAAM,CAACD,UAAU;UAC7BZ,SAAS,EAAE,MAAM7C,OAAO,CAACkC,GAAG,CACxBwB,MAAM,CAACb,SAAS,CAACV,GAAG,CAAEwB,CAAM,IAAK5C,WAAW,CAAC4C,CAAC,CAAC,CACnD;QACJ,CAAC;MACL,CAAC,CAAC;IACV,CAAC;IACDC,YAAY,EAAEA,CAAA,KAAM;MAChB,OAAOpF,QAAQ,CAACoF,YAAY,CAAC,CAAC,CAACpB,IAAI,CAC/B,IAAAqB,cAAG,EAAC,MAAMxC,uBAAuB,CAACyC,IAAI,CAACzC,uBAAuB,CAAC0C,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAC/E,IAAAC,mBAAQ,EAAC,MAAOC,SAAS,IAAK;QAC1B,IAAMC,SAAS,GAAG,MAAMlE,OAAO,CAACkC,GAAG,CAC/B+B,SAAS,CAACE,MAAM,CAAChC,GAAG,CAAC,MAAOiC,KAAK,IAAK;UAClC,IAAM,CACFC,YAAY,EACZC,oBAAoB,CACvB,GAAG,MAAMtE,OAAO,CAACkC,GAAG,CAAC,CAClBnB,WAAW,CAACqD,KAAK,CAACC,YAAY,CAAC,EAC/BtD,WAAW,CAACqD,KAAK,CAACE,oBAAoB,CAAC,CAC1C,CAAC;UACF,IAAMC,EAA4B,GAAG;YACjCC,SAAS,EAAEJ,KAAK,CAACI,SAAS;YAC1BjF,UAAU,EAAE6E,KAAK,CAAC7E,UAAU;YAC5B8E,YAAY,EAAEA,YAAmB;YACjCC,oBAAoB,EAAEA,oBAA2B;YACjDG,OAAO,EAAE;UACb,CAAC;UACD,OAAOF,EAAE;QACb,CAAC,CACL,CAAC;QACD,IAAMtD,GAAoE,GAAG;UACzEyD,EAAE,EAAET,SAAS,CAACS,EAAE;UAChBP,MAAM,EAAED,SAAS;UACjBT,UAAU,EAAEQ,SAAS,CAACR,UAAU;UAChCvE,OAAO,EAAE+E,SAAS,CAAC/E;QACvB,CAAC;QACD,OAAO+B,GAAG;MACd,CAAC,CAAC,EACF,IAAA4C,cAAG,EAAC,MAAMxC,uBAAuB,CAACyC,IAAI,CAACzC,uBAAuB,CAAC0C,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAClF,CAAC;IACL;EACJ,CAAC;EAED,OAAOxC,eAAe;AAC1B","ignoreList":[]}