{"version":3,"file":"index.js","names":["ZSchema","wrappedValidateStorageFactory","ZSchemaClass","zSchema","getZSchema","strictMode","getValidator","schema","validator","obj","validate","docData","useValidator","errors","getLastErrors","formattedZSchemaErrors","map","title","description","message","path","wrappedValidateZSchemaStorage"],"sources":["../../../../src/plugins/validate-z-schema/index.ts"],"sourcesContent":["/**\r\n * this plugin validates documents before they can be inserted into the RxCollection.\r\n * It's using z-schema as jsonschema-validator\r\n * @link https://github.com/zaggino/z-schema\r\n */\r\nimport ZSchema from 'z-schema';\r\nimport type { RxJsonSchema } from '../../types/index.d.ts';\r\nimport { wrappedValidateStorageFactory } from '../../plugin-helpers.ts';\r\n\r\n\r\nexport const ZSchemaClass = ZSchema;\r\n\r\nlet zSchema: ZSchema;\r\n\r\nexport function getZSchema() {\r\n    if (!zSchema) {\r\n        zSchema = new ZSchema({\r\n            strictMode: false\r\n        });\r\n    }\r\n    return zSchema;\r\n}\r\n\r\nexport function getValidator(\r\n    schema: RxJsonSchema<any>\r\n) {\r\n    const validator = (obj: any) => {\r\n        getZSchema().validate(obj, schema);\r\n        return getZSchema();\r\n    };\r\n    return (docData: any) => {\r\n        const useValidator = validator(docData);\r\n        if ((useValidator as any) === true) {\r\n            return;\r\n        }\r\n        const errors: ZSchema.SchemaErrorDetail[] = (useValidator as any).getLastErrors();\r\n        if (errors) {\r\n            const formattedZSchemaErrors = (errors as any).map(({\r\n                title,\r\n                description,\r\n                message,\r\n                path\r\n            }: any) => ({\r\n                title,\r\n                description,\r\n                message,\r\n                path\r\n            }));\r\n            return formattedZSchemaErrors;\r\n        } else {\r\n            return [];\r\n        }\r\n    };\r\n}\r\n\r\nexport const wrappedValidateZSchemaStorage = wrappedValidateStorageFactory(\r\n    getValidator,\r\n    'z-schema'\r\n);\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAOA,OAAO,MAAM,UAAU;AAE9B,SAASC,6BAA6B,QAAQ,yBAAyB;AAGvE,OAAO,IAAMC,YAAY,GAAGF,OAAO;AAEnC,IAAIG,OAAgB;AAEpB,OAAO,SAASC,UAAUA,CAAA,EAAG;EACzB,IAAI,CAACD,OAAO,EAAE;IACVA,OAAO,GAAG,IAAIH,OAAO,CAAC;MAClBK,UAAU,EAAE;IAChB,CAAC,CAAC;EACN;EACA,OAAOF,OAAO;AAClB;AAEA,OAAO,SAASG,YAAYA,CACxBC,MAAyB,EAC3B;EACE,IAAMC,SAAS,GAAIC,GAAQ,IAAK;IAC5BL,UAAU,CAAC,CAAC,CAACM,QAAQ,CAACD,GAAG,EAAEF,MAAM,CAAC;IAClC,OAAOH,UAAU,CAAC,CAAC;EACvB,CAAC;EACD,OAAQO,OAAY,IAAK;IACrB,IAAMC,YAAY,GAAGJ,SAAS,CAACG,OAAO,CAAC;IACvC,IAAKC,YAAY,KAAa,IAAI,EAAE;MAChC;IACJ;IACA,IAAMC,MAAmC,GAAID,YAAY,CAASE,aAAa,CAAC,CAAC;IACjF,IAAID,MAAM,EAAE;MACR,IAAME,sBAAsB,GAAIF,MAAM,CAASG,GAAG,CAAC,CAAC;QAChDC,KAAK;QACLC,WAAW;QACXC,OAAO;QACPC;MACC,CAAC,MAAM;QACRH,KAAK;QACLC,WAAW;QACXC,OAAO;QACPC;MACJ,CAAC,CAAC,CAAC;MACH,OAAOL,sBAAsB;IACjC,CAAC,MAAM;MACH,OAAO,EAAE;IACb;EACJ,CAAC;AACL;AAEA,OAAO,IAAMM,6BAA6B,GAAGpB,6BAA6B,CACtEK,YAAY,EACZ,UACJ,CAAC","ignoreList":[]}