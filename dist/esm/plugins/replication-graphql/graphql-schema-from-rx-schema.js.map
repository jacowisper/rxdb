{"version":3,"file":"graphql-schema-from-rx-schema.js","names":["getGraphqlSchemaFromJsonSchema","fillWithDefaultSettings","clone","ensureNotFalsy","flatClone","ucfirst","SPACING","graphQLSchemaFromRxSchema","input","ret","asString","queries","mutations","subscriptions","inputs","types","Object","entries","forEach","collectionName","collectionSettings","fillUpOptionals","schema","prefixes","ucCollectionName","collectionNameInput","inputSchema","stripKeysFromSchema","ignoreInputKeys","inputGraphQL","rootName","direction","pushRowGraphQL","pushRow","type","properties","assumedMasterState","newDocumentState","required","additionalProperties","checkpointSchema","checkpointFields","key","subSchema","push","checkpointInputGraphQL","checkpoint","concat","typeDefinitions","map","str","replaceTopLevelTypeName","headersSchema","headerFields","headerField","headersInputName","headers","headersInputGraphQL","length","outputSchema","ignoreOutputKeys","outputGraphQL","checkpointOutputGraphQL","pullBulkOutputGraphQL","pullBulk","documents","items","queryName","pull","queryKeys","queryString","join","mutationName","mutationString","subscriptionHeaderInputString","subscriptionName","stream","subscriptionString","fullQueryString","fullMutationString","fullSubscriptionString","fullTypeString","fullInputString","fullSchemaString","keys","startsWith","deletedField","withRevisions","strip","cloned","replace"],"sources":["../../../../src/plugins/replication-graphql/graphql-schema-from-rx-schema.ts"],"sourcesContent":["import { getGraphqlSchemaFromJsonSchema } from 'get-graphql-from-jsonschema';\r\n\r\nimport { fillWithDefaultSettings } from '../../rx-schema-helper.ts';\r\n\r\nimport type { RxJsonSchema } from '../../types/index.d.ts';\r\nimport { clone, ensureNotFalsy, flatClone, ucfirst } from '../../plugins/utils/index.ts';\r\n\r\nexport type Prefixes = {\r\n    push?: string;\r\n    pushRow?: string;\r\n    checkpoint?: string;\r\n    pull?: string;\r\n    pullBulk?: string;\r\n    stream?: string;\r\n    headers?: string;\r\n};\r\n\r\n/**\r\n * just type some common types\r\n * to have better IDE autocomplete,\r\n * all strings are allowed\r\n */\r\nexport type GraphQLParamType = 'ID' | 'ID!' |\r\n    'String' | 'String!' |\r\n    'Int' | 'Int!' |\r\n    'Float' | 'Float!' |\r\n    string;\r\n\r\nexport type GraphQLSchemaFromRxSchemaInputSingleCollection = {\r\n    schema: RxJsonSchema<any>;\r\n    /**\r\n     * These fields of the document data\r\n     * will be used for the checkpoint.\r\n     */\r\n    checkpointFields: string[];\r\n    ignoreInputKeys?: string[];\r\n    ignoreOutputKeys?: string[];\r\n    withRevisions?: boolean;\r\n    prefixes?: Prefixes;\r\n    headerFields?: string[];\r\n    /**\r\n     * Name of the boolean field that marks deleted documents.\r\n     * [default='_deleted']\r\n     */\r\n    deletedField?: string;\r\n};\r\n\r\nexport type GraphQLSchemaFromRxSchemaInput = {\r\n    [collectionName: string]: GraphQLSchemaFromRxSchemaInputSingleCollection;\r\n};\r\nexport type GraphQLSchemaFromRxSchemaOutput = {\r\n    asString: string;\r\n    queries: string[];\r\n    mutations: string[];\r\n    subscriptions: string[];\r\n    inputs: string[];\r\n    types: string[];\r\n};\r\n\r\n// we use two spaces because get-graphql-from-jsonschema does also\r\nexport const SPACING = '  ';\r\n\r\n/**\r\n * Create a GraphQL schema from a given RxJsonSchema\r\n */\r\nexport function graphQLSchemaFromRxSchema(\r\n    input: GraphQLSchemaFromRxSchemaInput\r\n): GraphQLSchemaFromRxSchemaOutput {\r\n    const ret: GraphQLSchemaFromRxSchemaOutput = {\r\n        asString: '',\r\n        queries: [],\r\n        mutations: [],\r\n        subscriptions: [],\r\n        inputs: [],\r\n        types: []\r\n    };\r\n\r\n    Object.entries(input).forEach(([collectionName, collectionSettings]) => {\r\n        collectionSettings = fillUpOptionals(collectionSettings);\r\n\r\n        const schema = collectionSettings.schema;\r\n        const prefixes: Prefixes = ensureNotFalsy(collectionSettings.prefixes);\r\n        const ucCollectionName = ucfirst(collectionName);\r\n        const collectionNameInput = ucfirst(collectionName) + 'Input';\r\n\r\n        // input\r\n        const inputSchema = stripKeysFromSchema(schema, ensureNotFalsy(collectionSettings.ignoreInputKeys));\r\n\r\n        const inputGraphQL = getGraphqlSchemaFromJsonSchema({\r\n            rootName: collectionNameInput,\r\n            schema: inputSchema as any,\r\n            direction: 'input'\r\n        });\r\n        const pushRowGraphQL = getGraphqlSchemaFromJsonSchema({\r\n            rootName: collectionNameInput + prefixes.pushRow,\r\n            schema: {\r\n                type: 'object',\r\n                properties: {\r\n                    assumedMasterState: inputSchema as any,\r\n                    newDocumentState: inputSchema as any\r\n                },\r\n                required: ['newDocumentState'],\r\n                additionalProperties: false\r\n            },\r\n            direction: 'input'\r\n        });\r\n\r\n        const checkpointSchema = {\r\n            type: 'object',\r\n            properties: {},\r\n            required: [],\r\n            additionalProperties: false\r\n        } as any;\r\n        collectionSettings.checkpointFields.forEach(key => {\r\n            const subSchema: any = schema.properties[key];\r\n            checkpointSchema.properties[key] = subSchema;\r\n            checkpointSchema.required.push(key);\r\n        });\r\n        const checkpointInputGraphQL = getGraphqlSchemaFromJsonSchema({\r\n            rootName: collectionNameInput + prefixes.checkpoint,\r\n            schema: checkpointSchema as any,\r\n            direction: 'input'\r\n        });\r\n\r\n        ret.inputs = ret.inputs.concat(\r\n            inputGraphQL\r\n                .typeDefinitions\r\n                .map(str => replaceTopLevelTypeName(str, collectionNameInput))\r\n        ).concat(\r\n            pushRowGraphQL\r\n                .typeDefinitions\r\n                .map(str => replaceTopLevelTypeName(str, collectionNameInput + prefixes.pushRow))\r\n        ).concat(\r\n            checkpointInputGraphQL\r\n                .typeDefinitions\r\n                .map(str => replaceTopLevelTypeName(str, collectionNameInput + prefixes.checkpoint))\r\n        );\r\n\r\n        const headersSchema: any = {\r\n            type: 'object',\r\n            additionalProperties: false,\r\n            properties: {},\r\n            required: []\r\n        };\r\n        ensureNotFalsy(collectionSettings.headerFields).forEach(headerField => {\r\n            headersSchema.properties[headerField] = {\r\n                type: 'string'\r\n            };\r\n            headersSchema.required.push(headerField);\r\n        });\r\n        const headersInputName = collectionNameInput + prefixes.headers;\r\n        const headersInputGraphQL = getGraphqlSchemaFromJsonSchema({\r\n            rootName: headersInputName,\r\n            schema: headersSchema,\r\n            direction: 'input'\r\n        });\r\n        if (ensureNotFalsy(collectionSettings.headerFields).length > 0) {\r\n            ret.inputs = ret.inputs.concat(\r\n                headersInputGraphQL\r\n                    .typeDefinitions\r\n                    .map(str => replaceTopLevelTypeName(str, headersInputName))\r\n            );\r\n        }\r\n\r\n        // output\r\n        const outputSchema = stripKeysFromSchema(schema, ensureNotFalsy(collectionSettings.ignoreOutputKeys));\r\n        const outputGraphQL = getGraphqlSchemaFromJsonSchema({\r\n            rootName: collectionName,\r\n            schema: outputSchema as any,\r\n            direction: 'output'\r\n        });\r\n        const checkpointOutputGraphQL = getGraphqlSchemaFromJsonSchema({\r\n            rootName: ucCollectionName + prefixes.checkpoint,\r\n            schema: checkpointSchema as any,\r\n            direction: 'output'\r\n        });\r\n        const pullBulkOutputGraphQL = getGraphqlSchemaFromJsonSchema({\r\n            rootName: ucCollectionName + prefixes.pullBulk,\r\n            schema: {\r\n                type: 'object',\r\n                properties: {\r\n                    documents: {\r\n                        type: 'array',\r\n                        items: inputSchema as any\r\n                    },\r\n                    checkpoint: checkpointSchema as any\r\n                },\r\n                required: ['documents', 'checkpoint'],\r\n                additionalProperties: false\r\n            },\r\n            direction: 'output'\r\n        });\r\n        ret.types = ret.types.concat(\r\n            outputGraphQL.typeDefinitions\r\n                .map(str => replaceTopLevelTypeName(str, ucCollectionName))\r\n        ).concat(\r\n            checkpointOutputGraphQL.typeDefinitions\r\n                .map(str => replaceTopLevelTypeName(str, ucCollectionName + prefixes.checkpoint))\r\n        ).concat(\r\n            pullBulkOutputGraphQL.typeDefinitions\r\n                .map(str => replaceTopLevelTypeName(str, ucCollectionName + prefixes.pullBulk))\r\n        );\r\n\r\n        // query\r\n        const queryName = prefixes.pull + ucCollectionName;\r\n        const queryKeys = [\r\n            'checkpoint: ' + collectionNameInput + prefixes.checkpoint,\r\n            'limit: Int!'\r\n        ];\r\n        const queryString = queryName + '(' + queryKeys.join(', ') + '): ' + ucCollectionName + prefixes.pullBulk + '!';\r\n        ret.queries.push(SPACING + queryString);\r\n\r\n        // mutation\r\n        const mutationName = prefixes.push + ucCollectionName;\r\n        const mutationString = mutationName + '(' + collectionName + prefixes.pushRow + ': [' + collectionNameInput + prefixes.pushRow + ']): [' + ucCollectionName + '!]!';\r\n        ret.mutations.push(SPACING + mutationString);\r\n\r\n        // subscription\r\n        let subscriptionHeaderInputString = '';\r\n        if (collectionSettings.headerFields && collectionSettings.headerFields.length > 0) {\r\n            subscriptionHeaderInputString = '(headers: ' + headersInputName + ')';\r\n        }\r\n        const subscriptionName = prefixes.stream + ucCollectionName;\r\n        const subscriptionString = subscriptionName + subscriptionHeaderInputString + ': ' + ucCollectionName + prefixes.pullBulk + '!';\r\n        ret.subscriptions.push(SPACING + subscriptionString);\r\n    });\r\n\r\n    // build full string\r\n    const fullQueryString = 'type Query {\\n' + ret.queries.join('\\n') + '\\n}\\n';\r\n    const fullMutationString = 'type Mutation {\\n' + ret.mutations.join('\\n') + '\\n}\\n';\r\n    const fullSubscriptionString = 'type Subscription {\\n' + ret.subscriptions.join('\\n') + '\\n}\\n';\r\n\r\n    const fullTypeString = ret.types.join('\\n');\r\n    const fullInputString = ret.inputs.join('\\n');\r\n\r\n    const fullSchemaString = '' +\r\n        'schema {\\n' +\r\n        SPACING + 'query: Query\\n' +\r\n        SPACING + 'mutation: Mutation\\n' +\r\n        SPACING + 'subscription: Subscription\\n' +\r\n        '}\\n';\r\n\r\n    ret.asString = '' +\r\n        fullQueryString + '\\n' +\r\n        fullMutationString + '\\n' +\r\n        fullSubscriptionString + '\\n' +\r\n        fullTypeString + '\\n' +\r\n        fullInputString + '\\n' +\r\n        fullSchemaString;\r\n\r\n    return ret;\r\n}\r\n\r\n\r\nexport function fillUpOptionals(\r\n    input: GraphQLSchemaFromRxSchemaInputSingleCollection\r\n): GraphQLSchemaFromRxSchemaInputSingleCollection {\r\n    input = flatClone(input);\r\n\r\n    const schema = fillWithDefaultSettings(input.schema);\r\n    // strip internal attributes\r\n    Object.keys(schema.properties).forEach(key => {\r\n        if (key.startsWith('_')) {\r\n            delete schema.properties[key];\r\n        }\r\n    });\r\n    input.schema = schema;\r\n\r\n    // add deleted field to schema\r\n    if (!input.deletedField) {\r\n        input.deletedField = '_deleted';\r\n    }\r\n    schema.properties[input.deletedField] = {\r\n        type: 'boolean'\r\n    };\r\n    (schema.required as string[]).push(input.deletedField);\r\n\r\n    // fill up prefixes\r\n    if (!input.prefixes) {\r\n        input.prefixes = {} as any;\r\n    }\r\n    const prefixes: Prefixes = input.prefixes as any;\r\n    if (!prefixes.push) {\r\n        prefixes.push = 'push';\r\n    }\r\n    if (!prefixes.pushRow) {\r\n        prefixes.pushRow = 'PushRow';\r\n    }\r\n    if (!prefixes.checkpoint) {\r\n        prefixes.checkpoint = 'Checkpoint';\r\n    }\r\n    if (!prefixes.pull) {\r\n        prefixes.pull = 'pull';\r\n    }\r\n    if (!prefixes.pullBulk) {\r\n        prefixes.pullBulk = 'PullBulk';\r\n    }\r\n    if (!prefixes.stream) {\r\n        prefixes.stream = 'stream';\r\n    }\r\n    if (!prefixes.headers) {\r\n        prefixes.headers = 'Headers';\r\n    }\r\n    if (!input.headerFields) {\r\n        input.headerFields = [];\r\n    }\r\n\r\n\r\n    if (!input.withRevisions) {\r\n        input.withRevisions = false;\r\n    }\r\n\r\n    if (!input.ignoreInputKeys) {\r\n        input.ignoreInputKeys = [];\r\n    }\r\n    if (!input.ignoreOutputKeys) {\r\n        input.ignoreOutputKeys = [];\r\n    }\r\n\r\n    return input;\r\n}\r\n\r\nfunction stripKeysFromSchema<T>(schema: RxJsonSchema<T>, strip: string[]): RxJsonSchema<Partial<T>> {\r\n    const cloned: any = clone(schema);\r\n    strip.forEach(key => {\r\n        delete cloned.properties[key];\r\n    });\r\n    return cloned;\r\n}\r\n\r\n/**\r\n * get-graphql-from-jsonschema add a T0-suffix\r\n * that we do not want for the top level type\r\n */\r\nfunction replaceTopLevelTypeName(str: string, ucCollectionName: string): string {\r\n    return str.replace(' ' + ucCollectionName + 'T0 ', ' ' + ucCollectionName + ' ');\r\n}\r\n"],"mappings":"AAAA,SAASA,8BAA8B,QAAQ,6BAA6B;AAE5E,SAASC,uBAAuB,QAAQ,2BAA2B;AAGnE,SAASC,KAAK,EAAEC,cAAc,EAAEC,SAAS,EAAEC,OAAO,QAAQ,8BAA8B;;AAYxF;AACA;AACA;AACA;AACA;;AAsCA;AACA,OAAO,IAAMC,OAAO,GAAG,IAAI;;AAE3B;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CACrCC,KAAqC,EACN;EAC/B,IAAMC,GAAoC,GAAG;IACzCC,QAAQ,EAAE,EAAE;IACZC,OAAO,EAAE,EAAE;IACXC,SAAS,EAAE,EAAE;IACbC,aAAa,EAAE,EAAE;IACjBC,MAAM,EAAE,EAAE;IACVC,KAAK,EAAE;EACX,CAAC;EAEDC,MAAM,CAACC,OAAO,CAACT,KAAK,CAAC,CAACU,OAAO,CAAC,CAAC,CAACC,cAAc,EAAEC,kBAAkB,CAAC,KAAK;IACpEA,kBAAkB,GAAGC,eAAe,CAACD,kBAAkB,CAAC;IAExD,IAAME,MAAM,GAAGF,kBAAkB,CAACE,MAAM;IACxC,IAAMC,QAAkB,GAAGpB,cAAc,CAACiB,kBAAkB,CAACG,QAAQ,CAAC;IACtE,IAAMC,gBAAgB,GAAGnB,OAAO,CAACc,cAAc,CAAC;IAChD,IAAMM,mBAAmB,GAAGpB,OAAO,CAACc,cAAc,CAAC,GAAG,OAAO;;IAE7D;IACA,IAAMO,WAAW,GAAGC,mBAAmB,CAACL,MAAM,EAAEnB,cAAc,CAACiB,kBAAkB,CAACQ,eAAe,CAAC,CAAC;IAEnG,IAAMC,YAAY,GAAG7B,8BAA8B,CAAC;MAChD8B,QAAQ,EAAEL,mBAAmB;MAC7BH,MAAM,EAAEI,WAAkB;MAC1BK,SAAS,EAAE;IACf,CAAC,CAAC;IACF,IAAMC,cAAc,GAAGhC,8BAA8B,CAAC;MAClD8B,QAAQ,EAAEL,mBAAmB,GAAGF,QAAQ,CAACU,OAAO;MAChDX,MAAM,EAAE;QACJY,IAAI,EAAE,QAAQ;QACdC,UAAU,EAAE;UACRC,kBAAkB,EAAEV,WAAkB;UACtCW,gBAAgB,EAAEX;QACtB,CAAC;QACDY,QAAQ,EAAE,CAAC,kBAAkB,CAAC;QAC9BC,oBAAoB,EAAE;MAC1B,CAAC;MACDR,SAAS,EAAE;IACf,CAAC,CAAC;IAEF,IAAMS,gBAAgB,GAAG;MACrBN,IAAI,EAAE,QAAQ;MACdC,UAAU,EAAE,CAAC,CAAC;MACdG,QAAQ,EAAE,EAAE;MACZC,oBAAoB,EAAE;IAC1B,CAAQ;IACRnB,kBAAkB,CAACqB,gBAAgB,CAACvB,OAAO,CAACwB,GAAG,IAAI;MAC/C,IAAMC,SAAc,GAAGrB,MAAM,CAACa,UAAU,CAACO,GAAG,CAAC;MAC7CF,gBAAgB,CAACL,UAAU,CAACO,GAAG,CAAC,GAAGC,SAAS;MAC5CH,gBAAgB,CAACF,QAAQ,CAACM,IAAI,CAACF,GAAG,CAAC;IACvC,CAAC,CAAC;IACF,IAAMG,sBAAsB,GAAG7C,8BAA8B,CAAC;MAC1D8B,QAAQ,EAAEL,mBAAmB,GAAGF,QAAQ,CAACuB,UAAU;MACnDxB,MAAM,EAAEkB,gBAAuB;MAC/BT,SAAS,EAAE;IACf,CAAC,CAAC;IAEFtB,GAAG,CAACK,MAAM,GAAGL,GAAG,CAACK,MAAM,CAACiC,MAAM,CAC1BlB,YAAY,CACPmB,eAAe,CACfC,GAAG,CAACC,GAAG,IAAIC,uBAAuB,CAACD,GAAG,EAAEzB,mBAAmB,CAAC,CACrE,CAAC,CAACsB,MAAM,CACJf,cAAc,CACTgB,eAAe,CACfC,GAAG,CAACC,GAAG,IAAIC,uBAAuB,CAACD,GAAG,EAAEzB,mBAAmB,GAAGF,QAAQ,CAACU,OAAO,CAAC,CACxF,CAAC,CAACc,MAAM,CACJF,sBAAsB,CACjBG,eAAe,CACfC,GAAG,CAACC,GAAG,IAAIC,uBAAuB,CAACD,GAAG,EAAEzB,mBAAmB,GAAGF,QAAQ,CAACuB,UAAU,CAAC,CAC3F,CAAC;IAED,IAAMM,aAAkB,GAAG;MACvBlB,IAAI,EAAE,QAAQ;MACdK,oBAAoB,EAAE,KAAK;MAC3BJ,UAAU,EAAE,CAAC,CAAC;MACdG,QAAQ,EAAE;IACd,CAAC;IACDnC,cAAc,CAACiB,kBAAkB,CAACiC,YAAY,CAAC,CAACnC,OAAO,CAACoC,WAAW,IAAI;MACnEF,aAAa,CAACjB,UAAU,CAACmB,WAAW,CAAC,GAAG;QACpCpB,IAAI,EAAE;MACV,CAAC;MACDkB,aAAa,CAACd,QAAQ,CAACM,IAAI,CAACU,WAAW,CAAC;IAC5C,CAAC,CAAC;IACF,IAAMC,gBAAgB,GAAG9B,mBAAmB,GAAGF,QAAQ,CAACiC,OAAO;IAC/D,IAAMC,mBAAmB,GAAGzD,8BAA8B,CAAC;MACvD8B,QAAQ,EAAEyB,gBAAgB;MAC1BjC,MAAM,EAAE8B,aAAa;MACrBrB,SAAS,EAAE;IACf,CAAC,CAAC;IACF,IAAI5B,cAAc,CAACiB,kBAAkB,CAACiC,YAAY,CAAC,CAACK,MAAM,GAAG,CAAC,EAAE;MAC5DjD,GAAG,CAACK,MAAM,GAAGL,GAAG,CAACK,MAAM,CAACiC,MAAM,CAC1BU,mBAAmB,CACdT,eAAe,CACfC,GAAG,CAACC,GAAG,IAAIC,uBAAuB,CAACD,GAAG,EAAEK,gBAAgB,CAAC,CAClE,CAAC;IACL;;IAEA;IACA,IAAMI,YAAY,GAAGhC,mBAAmB,CAACL,MAAM,EAAEnB,cAAc,CAACiB,kBAAkB,CAACwC,gBAAgB,CAAC,CAAC;IACrG,IAAMC,aAAa,GAAG7D,8BAA8B,CAAC;MACjD8B,QAAQ,EAAEX,cAAc;MACxBG,MAAM,EAAEqC,YAAmB;MAC3B5B,SAAS,EAAE;IACf,CAAC,CAAC;IACF,IAAM+B,uBAAuB,GAAG9D,8BAA8B,CAAC;MAC3D8B,QAAQ,EAAEN,gBAAgB,GAAGD,QAAQ,CAACuB,UAAU;MAChDxB,MAAM,EAAEkB,gBAAuB;MAC/BT,SAAS,EAAE;IACf,CAAC,CAAC;IACF,IAAMgC,qBAAqB,GAAG/D,8BAA8B,CAAC;MACzD8B,QAAQ,EAAEN,gBAAgB,GAAGD,QAAQ,CAACyC,QAAQ;MAC9C1C,MAAM,EAAE;QACJY,IAAI,EAAE,QAAQ;QACdC,UAAU,EAAE;UACR8B,SAAS,EAAE;YACP/B,IAAI,EAAE,OAAO;YACbgC,KAAK,EAAExC;UACX,CAAC;UACDoB,UAAU,EAAEN;QAChB,CAAC;QACDF,QAAQ,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC;QACrCC,oBAAoB,EAAE;MAC1B,CAAC;MACDR,SAAS,EAAE;IACf,CAAC,CAAC;IACFtB,GAAG,CAACM,KAAK,GAAGN,GAAG,CAACM,KAAK,CAACgC,MAAM,CACxBc,aAAa,CAACb,eAAe,CACxBC,GAAG,CAACC,GAAG,IAAIC,uBAAuB,CAACD,GAAG,EAAE1B,gBAAgB,CAAC,CAClE,CAAC,CAACuB,MAAM,CACJe,uBAAuB,CAACd,eAAe,CAClCC,GAAG,CAACC,GAAG,IAAIC,uBAAuB,CAACD,GAAG,EAAE1B,gBAAgB,GAAGD,QAAQ,CAACuB,UAAU,CAAC,CACxF,CAAC,CAACC,MAAM,CACJgB,qBAAqB,CAACf,eAAe,CAChCC,GAAG,CAACC,GAAG,IAAIC,uBAAuB,CAACD,GAAG,EAAE1B,gBAAgB,GAAGD,QAAQ,CAACyC,QAAQ,CAAC,CACtF,CAAC;;IAED;IACA,IAAMG,SAAS,GAAG5C,QAAQ,CAAC6C,IAAI,GAAG5C,gBAAgB;IAClD,IAAM6C,SAAS,GAAG,CACd,cAAc,GAAG5C,mBAAmB,GAAGF,QAAQ,CAACuB,UAAU,EAC1D,aAAa,CAChB;IACD,IAAMwB,WAAW,GAAGH,SAAS,GAAG,GAAG,GAAGE,SAAS,CAACE,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,GAAG/C,gBAAgB,GAAGD,QAAQ,CAACyC,QAAQ,GAAG,GAAG;IAC/GvD,GAAG,CAACE,OAAO,CAACiC,IAAI,CAACtC,OAAO,GAAGgE,WAAW,CAAC;;IAEvC;IACA,IAAME,YAAY,GAAGjD,QAAQ,CAACqB,IAAI,GAAGpB,gBAAgB;IACrD,IAAMiD,cAAc,GAAGD,YAAY,GAAG,GAAG,GAAGrD,cAAc,GAAGI,QAAQ,CAACU,OAAO,GAAG,KAAK,GAAGR,mBAAmB,GAAGF,QAAQ,CAACU,OAAO,GAAG,OAAO,GAAGT,gBAAgB,GAAG,KAAK;IACnKf,GAAG,CAACG,SAAS,CAACgC,IAAI,CAACtC,OAAO,GAAGmE,cAAc,CAAC;;IAE5C;IACA,IAAIC,6BAA6B,GAAG,EAAE;IACtC,IAAItD,kBAAkB,CAACiC,YAAY,IAAIjC,kBAAkB,CAACiC,YAAY,CAACK,MAAM,GAAG,CAAC,EAAE;MAC/EgB,6BAA6B,GAAG,YAAY,GAAGnB,gBAAgB,GAAG,GAAG;IACzE;IACA,IAAMoB,gBAAgB,GAAGpD,QAAQ,CAACqD,MAAM,GAAGpD,gBAAgB;IAC3D,IAAMqD,kBAAkB,GAAGF,gBAAgB,GAAGD,6BAA6B,GAAG,IAAI,GAAGlD,gBAAgB,GAAGD,QAAQ,CAACyC,QAAQ,GAAG,GAAG;IAC/HvD,GAAG,CAACI,aAAa,CAAC+B,IAAI,CAACtC,OAAO,GAAGuE,kBAAkB,CAAC;EACxD,CAAC,CAAC;;EAEF;EACA,IAAMC,eAAe,GAAG,gBAAgB,GAAGrE,GAAG,CAACE,OAAO,CAAC4D,IAAI,CAAC,IAAI,CAAC,GAAG,OAAO;EAC3E,IAAMQ,kBAAkB,GAAG,mBAAmB,GAAGtE,GAAG,CAACG,SAAS,CAAC2D,IAAI,CAAC,IAAI,CAAC,GAAG,OAAO;EACnF,IAAMS,sBAAsB,GAAG,uBAAuB,GAAGvE,GAAG,CAACI,aAAa,CAAC0D,IAAI,CAAC,IAAI,CAAC,GAAG,OAAO;EAE/F,IAAMU,cAAc,GAAGxE,GAAG,CAACM,KAAK,CAACwD,IAAI,CAAC,IAAI,CAAC;EAC3C,IAAMW,eAAe,GAAGzE,GAAG,CAACK,MAAM,CAACyD,IAAI,CAAC,IAAI,CAAC;EAE7C,IAAMY,gBAAgB,GAAG,EAAE,GACvB,YAAY,GACZ7E,OAAO,GAAG,gBAAgB,GAC1BA,OAAO,GAAG,sBAAsB,GAChCA,OAAO,GAAG,8BAA8B,GACxC,KAAK;EAETG,GAAG,CAACC,QAAQ,GAAG,EAAE,GACboE,eAAe,GAAG,IAAI,GACtBC,kBAAkB,GAAG,IAAI,GACzBC,sBAAsB,GAAG,IAAI,GAC7BC,cAAc,GAAG,IAAI,GACrBC,eAAe,GAAG,IAAI,GACtBC,gBAAgB;EAEpB,OAAO1E,GAAG;AACd;AAGA,OAAO,SAASY,eAAeA,CAC3Bb,KAAqD,EACP;EAC9CA,KAAK,GAAGJ,SAAS,CAACI,KAAK,CAAC;EAExB,IAAMc,MAAM,GAAGrB,uBAAuB,CAACO,KAAK,CAACc,MAAM,CAAC;EACpD;EACAN,MAAM,CAACoE,IAAI,CAAC9D,MAAM,CAACa,UAAU,CAAC,CAACjB,OAAO,CAACwB,GAAG,IAAI;IAC1C,IAAIA,GAAG,CAAC2C,UAAU,CAAC,GAAG,CAAC,EAAE;MACrB,OAAO/D,MAAM,CAACa,UAAU,CAACO,GAAG,CAAC;IACjC;EACJ,CAAC,CAAC;EACFlC,KAAK,CAACc,MAAM,GAAGA,MAAM;;EAErB;EACA,IAAI,CAACd,KAAK,CAAC8E,YAAY,EAAE;IACrB9E,KAAK,CAAC8E,YAAY,GAAG,UAAU;EACnC;EACAhE,MAAM,CAACa,UAAU,CAAC3B,KAAK,CAAC8E,YAAY,CAAC,GAAG;IACpCpD,IAAI,EAAE;EACV,CAAC;EACAZ,MAAM,CAACgB,QAAQ,CAAcM,IAAI,CAACpC,KAAK,CAAC8E,YAAY,CAAC;;EAEtD;EACA,IAAI,CAAC9E,KAAK,CAACe,QAAQ,EAAE;IACjBf,KAAK,CAACe,QAAQ,GAAG,CAAC,CAAQ;EAC9B;EACA,IAAMA,QAAkB,GAAGf,KAAK,CAACe,QAAe;EAChD,IAAI,CAACA,QAAQ,CAACqB,IAAI,EAAE;IAChBrB,QAAQ,CAACqB,IAAI,GAAG,MAAM;EAC1B;EACA,IAAI,CAACrB,QAAQ,CAACU,OAAO,EAAE;IACnBV,QAAQ,CAACU,OAAO,GAAG,SAAS;EAChC;EACA,IAAI,CAACV,QAAQ,CAACuB,UAAU,EAAE;IACtBvB,QAAQ,CAACuB,UAAU,GAAG,YAAY;EACtC;EACA,IAAI,CAACvB,QAAQ,CAAC6C,IAAI,EAAE;IAChB7C,QAAQ,CAAC6C,IAAI,GAAG,MAAM;EAC1B;EACA,IAAI,CAAC7C,QAAQ,CAACyC,QAAQ,EAAE;IACpBzC,QAAQ,CAACyC,QAAQ,GAAG,UAAU;EAClC;EACA,IAAI,CAACzC,QAAQ,CAACqD,MAAM,EAAE;IAClBrD,QAAQ,CAACqD,MAAM,GAAG,QAAQ;EAC9B;EACA,IAAI,CAACrD,QAAQ,CAACiC,OAAO,EAAE;IACnBjC,QAAQ,CAACiC,OAAO,GAAG,SAAS;EAChC;EACA,IAAI,CAAChD,KAAK,CAAC6C,YAAY,EAAE;IACrB7C,KAAK,CAAC6C,YAAY,GAAG,EAAE;EAC3B;EAGA,IAAI,CAAC7C,KAAK,CAAC+E,aAAa,EAAE;IACtB/E,KAAK,CAAC+E,aAAa,GAAG,KAAK;EAC/B;EAEA,IAAI,CAAC/E,KAAK,CAACoB,eAAe,EAAE;IACxBpB,KAAK,CAACoB,eAAe,GAAG,EAAE;EAC9B;EACA,IAAI,CAACpB,KAAK,CAACoD,gBAAgB,EAAE;IACzBpD,KAAK,CAACoD,gBAAgB,GAAG,EAAE;EAC/B;EAEA,OAAOpD,KAAK;AAChB;AAEA,SAASmB,mBAAmBA,CAAIL,MAAuB,EAAEkE,KAAe,EAA4B;EAChG,IAAMC,MAAW,GAAGvF,KAAK,CAACoB,MAAM,CAAC;EACjCkE,KAAK,CAACtE,OAAO,CAACwB,GAAG,IAAI;IACjB,OAAO+C,MAAM,CAACtD,UAAU,CAACO,GAAG,CAAC;EACjC,CAAC,CAAC;EACF,OAAO+C,MAAM;AACjB;;AAEA;AACA;AACA;AACA;AACA,SAAStC,uBAAuBA,CAACD,GAAW,EAAE1B,gBAAwB,EAAU;EAC5E,OAAO0B,GAAG,CAACwC,OAAO,CAAC,GAAG,GAAGlE,gBAAgB,GAAG,KAAK,EAAE,GAAG,GAAGA,gBAAgB,GAAG,GAAG,CAAC;AACpF","ignoreList":[]}