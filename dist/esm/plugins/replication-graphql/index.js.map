{"version":3,"file":"index.js","names":["ensureNotFalsy","flatClone","getDataFromResult","graphQLRequest","RxDBLeaderElectionPlugin","RxReplicationState","startReplicationOnLeaderShip","addRxPlugin","removeGraphQLWebSocketRef","getGraphQLWebSocket","Subject","RxGraphQLReplicationState","_RxReplicationState","url","clientState","replicationIdentifier","collection","deletedField","pull","push","live","retryTime","autoStart","customFetch","_this","call","_inheritsLoose","_proto","prototype","setHeaders","headers","setCredentials","credentials","queryParams","fetch","http","replicateGraphQL","waitForLeadership","mutateableClientState","pullStream$","replicationPrimitivesPull","pullBatchSize","batchSize","handler","lastPulledCheckpoint","pullGraphQL","queryBuilder","result","graphqlReplicationState","errors","data","dataPath","responseModifier","docsData","documents","newCheckpoint","checkpoint","modifier","stream$","asObservable","replicationPrimitivesPush","rows","pushObj","mustUseSocket","ws","streamQueryBuilder","startBefore","start","bind","httpHeaders","includeWsHeaders","undefined","wsClient","wsOptions","on","next","query","subscribe","streamResponse","firstField","Object","keys","error","complete","cancelBefore","cancel","isStopped"],"sources":["../../../../src/plugins/replication-graphql/index.ts"],"sourcesContent":["/**\r\n * this plugin adds the RxCollection.syncGraphQl()-function to rxdb\r\n * you can use it to sync collections with a remote graphql endpoint.\r\n */\r\nimport {\r\n    ensureNotFalsy,\r\n    flatClone,\r\n    getProperty\r\n} from '../../plugins/utils/index.ts';\r\n\r\nimport {\r\n    getDataFromResult,\r\n    graphQLRequest\r\n} from './helper.ts';\r\n\r\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\r\nimport type {\r\n    RxCollection,\r\n    ReplicationPullOptions,\r\n    ReplicationPushOptions,\r\n    RxReplicationWriteToMasterRow,\r\n    GraphQLServerUrl,\r\n    RxReplicationPullStreamItem,\r\n    RxGraphQLReplicationQueryBuilderResponseObject,\r\n    RxGraphQLReplicationClientState,\r\n    ById\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    RxReplicationState,\r\n    startReplicationOnLeaderShip\r\n} from '../replication/index.ts';\r\nimport {\r\n    addRxPlugin,\r\n    SyncOptionsGraphQL,\r\n    WithDeleted\r\n} from '../../index.ts';\r\n\r\nimport {\r\n    removeGraphQLWebSocketRef,\r\n    getGraphQLWebSocket\r\n} from './graphql-websocket.ts';\r\nimport { Subject } from 'rxjs';\r\n\r\n\r\n\r\n\r\nexport class RxGraphQLReplicationState<RxDocType, CheckpointType> extends RxReplicationState<RxDocType, CheckpointType> {\r\n    constructor(\r\n        public readonly url: GraphQLServerUrl,\r\n        public readonly clientState: RxGraphQLReplicationClientState,\r\n        public readonly replicationIdentifier: string,\r\n        public readonly collection: RxCollection<RxDocType>,\r\n        public readonly deletedField: string,\r\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\r\n        public readonly push?: ReplicationPushOptions<RxDocType>,\r\n        public readonly live?: boolean,\r\n        public retryTime?: number,\r\n        public autoStart?: boolean,\r\n        public readonly customFetch?: WindowOrWorkerGlobalScope['fetch']\r\n    ) {\r\n        super(\r\n            replicationIdentifier,\r\n            collection,\r\n            deletedField,\r\n            pull,\r\n            push,\r\n            live,\r\n            retryTime,\r\n            autoStart\r\n        );\r\n    }\r\n\r\n    setHeaders(headers: ById<string>): void {\r\n        this.clientState.headers = flatClone(headers);\r\n    }\r\n\r\n    setCredentials(credentials: RequestCredentials | undefined) {\r\n        this.clientState.credentials = credentials;\r\n    }\r\n\r\n    graphQLRequest(\r\n        queryParams: RxGraphQLReplicationQueryBuilderResponseObject\r\n    ) {\r\n        return graphQLRequest(\r\n            this.customFetch ?? fetch,\r\n            ensureNotFalsy(this.url.http),\r\n            this.clientState,\r\n            queryParams\r\n        );\r\n    }\r\n}\r\n\r\nexport function replicateGraphQL<RxDocType, CheckpointType>(\r\n    {\r\n        collection,\r\n        url,\r\n        headers = {},\r\n        credentials,\r\n        deletedField = '_deleted',\r\n        waitForLeadership = true,\r\n        pull,\r\n        push,\r\n        live = true,\r\n        fetch: customFetch,\r\n        retryTime = 1000 * 5, // in ms\r\n        autoStart = true,\r\n        replicationIdentifier\r\n    }: SyncOptionsGraphQL<RxDocType, CheckpointType>\r\n): RxGraphQLReplicationState<RxDocType, CheckpointType> {\r\n    addRxPlugin(RxDBLeaderElectionPlugin);\r\n    /**\r\n     * We use this object to store the GraphQL client\r\n     * so we can later swap out the client inside of the replication handlers.\r\n     */\r\n    const mutateableClientState = {\r\n        headers,\r\n        credentials\r\n    };\r\n\r\n\r\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\r\n\r\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CheckpointType> | undefined;\r\n    if (pull) {\r\n        const pullBatchSize = pull.batchSize ? pull.batchSize : 20;\r\n        replicationPrimitivesPull = {\r\n            async handler(\r\n                lastPulledCheckpoint: CheckpointType | undefined\r\n            ) {\r\n                const pullGraphQL = await pull.queryBuilder(lastPulledCheckpoint, pullBatchSize);\r\n                const result = await graphqlReplicationState.graphQLRequest(pullGraphQL);\r\n                if (result.errors) {\r\n                    throw result.errors;\r\n                }\r\n                let data: any = getDataFromResult(result, pull.dataPath);\r\n                if (pull.responseModifier) {\r\n                    data = await pull.responseModifier(\r\n                        data,\r\n                        'handler',\r\n                        lastPulledCheckpoint\r\n                    );\r\n                }\r\n\r\n                const docsData: WithDeleted<RxDocType>[] = data.documents;\r\n                const newCheckpoint = data.checkpoint;\r\n\r\n                return {\r\n                    documents: docsData,\r\n                    checkpoint: newCheckpoint\r\n                };\r\n            },\r\n            batchSize: pull.batchSize,\r\n            modifier: pull.modifier,\r\n            stream$: pullStream$.asObservable()\r\n        };\r\n    }\r\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\r\n    if (push) {\r\n        replicationPrimitivesPush = {\r\n            async handler(\r\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\r\n            ) {\r\n                const pushObj = await push.queryBuilder(rows);\r\n                const result = await graphqlReplicationState.graphQLRequest(pushObj);\r\n\r\n                if (result.errors) {\r\n                    throw result.errors;\r\n                }\r\n                let data: any = getDataFromResult(result, push.dataPath);\r\n                if (push.responseModifier) {\r\n                    data = await push.responseModifier(\r\n                        data,\r\n                    );\r\n                }\r\n\r\n                return data;\r\n            },Â \r\n            batchSize: push.batchSize,\r\n            modifier: push.modifier\r\n        };\r\n    }\r\n\r\n    const graphqlReplicationState = new RxGraphQLReplicationState(\r\n        url,\r\n        mutateableClientState,\r\n        replicationIdentifier,\r\n        collection,\r\n        deletedField,\r\n        replicationPrimitivesPull,\r\n        replicationPrimitivesPush,\r\n        live,\r\n        retryTime,\r\n        autoStart,\r\n        customFetch\r\n    );\r\n\r\n    const mustUseSocket = url.ws &&\r\n        pull &&\r\n        pull.streamQueryBuilder &&\r\n        live;\r\n\r\n    const startBefore = graphqlReplicationState.start.bind(graphqlReplicationState);\r\n    graphqlReplicationState.start = () => {\r\n        if (mustUseSocket) {\r\n            const httpHeaders = pull.includeWsHeaders ? mutateableClientState.headers : undefined;\r\n            const wsClient = getGraphQLWebSocket(ensureNotFalsy(url.ws), httpHeaders, pull.wsOptions);\r\n\r\n            wsClient.on('connected', () => {\r\n                pullStream$.next('RESYNC');\r\n            });\r\n\r\n            const query: any = ensureNotFalsy(pull.streamQueryBuilder)(mutateableClientState.headers);\r\n\r\n            wsClient.subscribe(\r\n                query,\r\n                {\r\n                    next: async (streamResponse: any) => {\r\n                        const firstField = Object.keys(streamResponse.data)[0];\r\n                        let data = streamResponse.data[firstField];\r\n                        if (pull.responseModifier) {\r\n                            data = await pull.responseModifier(\r\n                                data,\r\n                                'stream'\r\n                            );\r\n                        }\r\n                        pullStream$.next(data);\r\n                    },\r\n                    error: (error: any) => {\r\n                        pullStream$.error(error);\r\n                    },\r\n                    complete: () => {\r\n                        pullStream$.complete();\r\n                    }\r\n                });\r\n        }\r\n        return startBefore();\r\n    };\r\n\r\n    const cancelBefore = graphqlReplicationState.cancel.bind(graphqlReplicationState);\r\n    graphqlReplicationState.cancel = () => {\r\n        if (!graphqlReplicationState.isStopped()) {\r\n            pullStream$.complete();\r\n            if (mustUseSocket) {\r\n                removeGraphQLWebSocketRef(ensureNotFalsy(url.ws));\r\n            }\r\n        }\r\n        return cancelBefore();\r\n    };\r\n\r\n    startReplicationOnLeaderShip(waitForLeadership, graphqlReplicationState);\r\n    return graphqlReplicationState;\r\n}\r\n\r\nexport * from './helper.ts';\r\nexport * from './graphql-schema-from-rx-schema.ts';\r\nexport * from './query-builder-from-rx-schema.ts';\r\nexport * from './graphql-websocket.ts';\r\n\r\n"],"mappings":"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","ignoreList":[]}