{"version":3,"file":"query-builder-from-rx-schema.js","names":["fillUpOptionals","SPACING","ensureNotFalsy","ucfirst","pullQueryBuilderFromRxSchema","collectionName","input","schema","prefixes","ucCollectionName","queryName","pull","operationName","outputFields","generateGQLOutputFields","ignoreOutputKeys","checkpointInputName","checkpoint","builder","limit","query","checkpointFields","join","variables","pullStreamBuilderFromRxSchema","stream","headersName","headers","pushQueryBuilderFromRxSchema","push","variableName","pushRow","returnFields","spaceCount","pushRows","sendRows","transformPushDoc","doc","sendDoc","Object","entries","forEach","k","v","ignoreInputKeys","includes","properties","newRow","newDocumentState","assumedMasterState","undefined","options","depth","NESTED_SPACING","repeat","LINE_SPACING","key","value","type"],"sources":["../../../../src/plugins/replication-graphql/query-builder-from-rx-schema.ts"],"sourcesContent":["import {\r\n    GraphQLSchemaFromRxSchemaInputSingleCollection,\r\n    fillUpOptionals,\r\n    Prefixes,\r\n    SPACING\r\n} from './graphql-schema-from-rx-schema.ts';\r\nimport { ensureNotFalsy, ucfirst } from '../../plugins/utils/index.ts';\r\nimport type {\r\n    RxGraphQLReplicationPullQueryBuilder,\r\n    RxGraphQLReplicationPullStreamQueryBuilder,\r\n    RxGraphQLReplicationPushQueryBuilder,\r\n    RxJsonSchema,\r\n    TopLevelProperty,\r\n    WithDeleted\r\n} from '../../types/index.d.ts';\r\n\r\nexport function pullQueryBuilderFromRxSchema(\r\n    collectionName: string,\r\n    input: GraphQLSchemaFromRxSchemaInputSingleCollection,\r\n): RxGraphQLReplicationPullQueryBuilder<any> {\r\n    input = fillUpOptionals(input);\r\n    const schema = input.schema\r\n    const prefixes: Prefixes = input.prefixes as any;\r\n\r\n    const ucCollectionName = ucfirst(collectionName);\r\n    const queryName = prefixes.pull + ucCollectionName;\r\n    const operationName = ucfirst(queryName);\r\n\r\n    const outputFields = generateGQLOutputFields({ schema, ignoreOutputKeys: input.ignoreOutputKeys })\r\n    // outputFields.push(input.deletedField);    \r\n    \r\n    const checkpointInputName = ucCollectionName + 'Input' + prefixes.checkpoint;\r\n    const builder: RxGraphQLReplicationPullQueryBuilder<any> = (checkpoint: any, limit: number) => {\r\n        const query = 'query ' + operationName + '($checkpoint: ' + checkpointInputName + ', $limit: Int!) {\\n' +\r\n            SPACING + SPACING + queryName + '(checkpoint: $checkpoint, limit: $limit) {\\n' +\r\n            SPACING + SPACING + SPACING + 'documents {\\n' + \r\n            outputFields  + '\\n' +\r\n            SPACING + SPACING + SPACING + '}\\n' +\r\n            SPACING + SPACING + SPACING + 'checkpoint {\\n' +\r\n            SPACING + SPACING + SPACING + SPACING + input.checkpointFields.join('\\n' + SPACING + SPACING + SPACING + SPACING) + '\\n' +\r\n            SPACING + SPACING + SPACING + '}\\n' +\r\n            SPACING + SPACING + '}\\n' +\r\n            '}';\r\n        return {\r\n            query,\r\n            operationName,\r\n            variables: {\r\n                checkpoint,\r\n                limit\r\n            }\r\n        };\r\n    };\r\n\r\n    return builder;\r\n}\r\n\r\nexport function pullStreamBuilderFromRxSchema(\r\n    collectionName: string,\r\n    input: GraphQLSchemaFromRxSchemaInputSingleCollection,\r\n) {\r\n    input = fillUpOptionals(input);\r\n    const schema = input.schema;\r\n    const prefixes: Prefixes = input.prefixes as any;\r\n\r\n    const ucCollectionName = ucfirst(collectionName);\r\n    const queryName = prefixes.stream + ucCollectionName;\r\n    const outputFields = generateGQLOutputFields({ schema, ignoreOutputKeys: input.ignoreOutputKeys })\r\n\r\n    const headersName = ucCollectionName + 'Input' + prefixes.headers;\r\n\r\n    const query = 'subscription on' + ucfirst(ensureNotFalsy(prefixes.stream)) + '($headers: ' + headersName + ') {\\n' +\r\n        SPACING + queryName + '(headers: $headers) {\\n' +\r\n        SPACING + SPACING + SPACING + 'documents {\\n' +\r\n        outputFields  + '\\n' +\r\n        SPACING + SPACING + SPACING + '}\\n' +\r\n        SPACING + SPACING + SPACING + 'checkpoint {\\n' +\r\n        SPACING + SPACING + SPACING + SPACING + input.checkpointFields.join('\\n' + SPACING + SPACING + SPACING + SPACING) + '\\n' +\r\n        SPACING + SPACING + SPACING + '}\\n' +\r\n        SPACING + '}' +\r\n        '}';\r\n\r\n    const builder: RxGraphQLReplicationPullStreamQueryBuilder = (headers: any) => {\r\n        return {\r\n            query,\r\n            variables: {\r\n                headers\r\n            }\r\n        };\r\n    };\r\n    return builder;\r\n}\r\n\r\n\r\nexport function pushQueryBuilderFromRxSchema(\r\n    collectionName: string,\r\n    input: GraphQLSchemaFromRxSchemaInputSingleCollection\r\n): RxGraphQLReplicationPushQueryBuilder {\r\n    input = fillUpOptionals(input);\r\n    const prefixes: Prefixes = input.prefixes as any;\r\n\r\n    const ucCollectionName = ucfirst(collectionName);\r\n    const queryName = prefixes.push + ucCollectionName;\r\n    const operationName = ucfirst(queryName);\r\n\r\n    const variableName = collectionName + prefixes.pushRow;\r\n    const returnFields = generateGQLOutputFields({ schema: input.schema, spaceCount: 2 })\r\n    \r\n    const builder: RxGraphQLReplicationPushQueryBuilder = (pushRows) => {\r\n        const query = '' +\r\n            'mutation ' + operationName + '($' + variableName + ': [' + ucCollectionName + 'Input' + prefixes.pushRow + '!]) {\\n' +\r\n            SPACING + queryName + '(' + variableName + ': $' + variableName + ') {\\n' +\r\n            returnFields  + '\\n' +\r\n            SPACING + '}\\n' +\r\n            '}';\r\n\r\n        const sendRows: typeof pushRows = [];\r\n        function transformPushDoc(doc: WithDeleted<any>) {\r\n            const sendDoc: any = {};\r\n            Object.entries(doc).forEach(([k, v]) => {\r\n                if (\r\n                    // skip if in ignoreInputKeys list\r\n                    !(input.ignoreInputKeys as string[]).includes(k) &&\r\n                    // only use properties that are in the schema\r\n                    input.schema.properties[k]\r\n                ) {\r\n                    sendDoc[k] = v;\r\n                }\r\n            });\r\n            return sendDoc;\r\n        }\r\n        pushRows.forEach(pushRow => {\r\n            const newRow: typeof pushRow = {\r\n                newDocumentState: transformPushDoc(pushRow.newDocumentState),\r\n                assumedMasterState: pushRow.assumedMasterState ? transformPushDoc(pushRow.assumedMasterState) : undefined\r\n            };\r\n            sendRows.push(newRow);\r\n        });\r\n        const variables = {\r\n            [variableName]: sendRows\r\n        };\r\n        return {\r\n            query,\r\n            operationName,\r\n            variables\r\n        };\r\n    };\r\n\r\n    return builder;\r\n}\r\n\r\ntype GenerateGQLOutputFieldsOptions = {\r\n    schema: RxJsonSchema<any> | TopLevelProperty,\r\n    spaceCount?: number,\r\n    depth?: number\r\n    ignoreOutputKeys?: string[]\r\n}\r\n\r\nfunction generateGQLOutputFields(options: GenerateGQLOutputFieldsOptions) {\r\n    const { schema, spaceCount = 4, depth = 0, ignoreOutputKeys = [] } = options;\r\n\r\n    const outputFields: string[] = [];\r\n    const properties = schema.properties \r\n    const NESTED_SPACING = SPACING.repeat(depth);\r\n    const LINE_SPACING = SPACING.repeat(spaceCount);\r\n  \r\n    for (const key in properties) {\r\n        //only skipping top level keys that are in ignoreOutputKeys list\r\n        if (ignoreOutputKeys.includes(key)) {\r\n            continue;\r\n        }\r\n\r\n        const value = properties[key];\r\n        if (value.type === \"object\") {\r\n          outputFields.push(\r\n            LINE_SPACING + NESTED_SPACING + key + \" {\",\r\n            generateGQLOutputFields({ schema: value, spaceCount, depth: depth + 1 }),\r\n            LINE_SPACING + NESTED_SPACING + \"}\"\r\n          );\r\n        } else {\r\n            outputFields.push(LINE_SPACING + NESTED_SPACING + key);\r\n        }\r\n    }\r\n    \r\n    return outputFields.join('\\n');\r\n}\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}