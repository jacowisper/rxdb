{"version":3,"file":"memory-helper.js","names":["pushAtSortPosition","newRxError","boundEQ","getMemoryCollectionKey","databaseName","collectionName","schemaVersion","join","ensureNotRemoved","instance","internals","removed","Error","attachmentMapKey","documentId","attachmentId","sortByIndexStringComparator","a","b","putWriteRowToState","docId","state","stateByIndex","document","docInState","documents","set","i","length","byIndex","docsWithIndex","getIndexableString","newIndexString","insertPosition","previousIndexString","prev","splice","next","args","indexBefore","compareDocsWithIndex","removeDocFromState","primaryPath","schema","doc","delete","Object","values","forEach","indexString","positionInIndex","indexStringA","indexStringB"],"sources":["../../../../src/plugins/storage-memory/memory-helper.ts"],"sourcesContent":["import type {\r\n    BulkWriteRow,\r\n    RxDocumentData,\r\n    RxJsonSchema\r\n} from '../../types/index.d.ts';\r\nimport type {\r\n    DocWithIndexString,\r\n    MemoryStorageInternals,\r\n    MemoryStorageInternalsByIndex\r\n} from './memory-types.ts';\r\nimport type { RxStorageInstanceMemory } from './rx-storage-instance-memory.ts';\r\nimport {\r\n    pushAtSortPosition\r\n} from 'array-push-at-sort-position';\r\nimport { newRxError } from '../../rx-error.ts';\r\nimport { boundEQ } from './binary-search-bounds.ts';\r\n\r\n\r\nexport function getMemoryCollectionKey(\r\n    databaseName: string,\r\n    collectionName: string,\r\n    schemaVersion: number\r\n): string {\r\n    return [\r\n        databaseName,\r\n        collectionName,\r\n        schemaVersion\r\n    ].join('--memory--');\r\n}\r\n\r\n\r\nexport function ensureNotRemoved(\r\n    instance: RxStorageInstanceMemory<any>\r\n) {\r\n    if (instance.internals.removed) {\r\n        throw new Error('removed');\r\n    }\r\n}\r\n\r\nexport function attachmentMapKey(documentId: string, attachmentId: string): string {\r\n    return documentId + '||' + attachmentId;\r\n}\r\n\r\n\r\nfunction sortByIndexStringComparator<RxDocType>(a: DocWithIndexString<RxDocType>, b: DocWithIndexString<RxDocType>) {\r\n    if (a[0] < b[0]) {\r\n        return -1;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @hotPath\r\n */\r\nexport function putWriteRowToState<RxDocType>(\r\n    docId: string,\r\n    state: MemoryStorageInternals<RxDocType>,\r\n    stateByIndex: MemoryStorageInternalsByIndex<RxDocType>[],\r\n    document: RxDocumentData<RxDocType>,\r\n    docInState?: RxDocumentData<RxDocType>\r\n) {\r\n    state.documents.set(docId, document as any);\r\n    for (let i = 0; i < stateByIndex.length; ++i) {\r\n        const byIndex = stateByIndex[i];\r\n        const docsWithIndex = byIndex.docsWithIndex;\r\n        const getIndexableString = byIndex.getIndexableString;\r\n        const newIndexString = getIndexableString(document as any);\r\n        const insertPosition = pushAtSortPosition(\r\n            docsWithIndex,\r\n            [\r\n                newIndexString,\r\n                document,\r\n                docId,\r\n            ],\r\n            sortByIndexStringComparator,\r\n            0\r\n        );\r\n\r\n        /**\r\n         * Remove previous if it was in the state\r\n         */\r\n        if (docInState) {\r\n            const previousIndexString = getIndexableString(docInState);\r\n            if (previousIndexString === newIndexString) {\r\n                /**\r\n                 * Performance shortcut.\r\n                 * If index was not changed -> The old doc must be before or after the new one.\r\n                 */\r\n                const prev = docsWithIndex[insertPosition - 1];\r\n                if (prev && prev[2] === docId) {\r\n                    docsWithIndex.splice(insertPosition - 1, 1);\r\n                } else {\r\n                    const next = docsWithIndex[insertPosition + 1];\r\n                    if (next[2] === docId) {\r\n                        docsWithIndex.splice(insertPosition + 1, 1);\r\n                    } else {\r\n                        throw newRxError('SNH', {\r\n                            document,\r\n                            args: {\r\n                                byIndex\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            } else {\r\n                /**\r\n                 * Index changed, we must search for the old one and remove it.\r\n                 */\r\n                const indexBefore = boundEQ(\r\n                    docsWithIndex,\r\n                    [\r\n                        previousIndexString\r\n                    ] as any,\r\n                    compareDocsWithIndex\r\n                );\r\n                docsWithIndex.splice(indexBefore, 1);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function removeDocFromState<RxDocType>(\r\n    primaryPath: string,\r\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\r\n    state: MemoryStorageInternals<RxDocType>,\r\n    doc: RxDocumentData<RxDocType>\r\n) {\r\n    const docId: string = (doc as any)[primaryPath];\r\n    state.documents.delete(docId);\r\n\r\n    Object.values(state.byIndex).forEach(byIndex => {\r\n        const docsWithIndex = byIndex.docsWithIndex;\r\n        const indexString = byIndex.getIndexableString(doc);\r\n\r\n        const positionInIndex = boundEQ(\r\n            docsWithIndex,\r\n            [\r\n                indexString\r\n            ] as any,\r\n            compareDocsWithIndex\r\n        );\r\n        docsWithIndex.splice(positionInIndex, 1);\r\n    });\r\n}\r\n\r\n\r\nexport function compareDocsWithIndex<RxDocType>(\r\n    a: DocWithIndexString<RxDocType>,\r\n    b: DocWithIndexString<RxDocType>\r\n): 1 | 0 | -1 {\r\n    const indexStringA = a[0];\r\n    const indexStringB = b[0];\r\n    if (indexStringA < indexStringB) {\r\n        return -1;\r\n    } else if (indexStringA === indexStringB) {\r\n        return 0;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]}