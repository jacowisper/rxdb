{"version":3,"file":"rx-storage-dexie.js","names":["RX_STORAGE_NAME_DEXIE","createDexieStorageInstance","ensureRxStorageInstanceParamsAreCorrect","RXDB_VERSION","newRxError","RxStorageDexie","settings","name","rxdbVersion","_proto","prototype","createStorageInstance","params","schema","indexes","indexFields","flat","filter","indexField","includes","forEach","required","field","getRxStorageDexie","storage"],"sources":["../../../../src/plugins/storage-dexie/rx-storage-dexie.ts"],"sourcesContent":["import type {\r\n    RxStorage,\r\n    RxStorageInstanceCreationParams\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    RX_STORAGE_NAME_DEXIE\r\n} from './dexie-helper.ts';\r\nimport type {\r\n    DexieSettings,\r\n    DexieStorageInternals\r\n} from '../../types/plugins/dexie.d.ts';\r\nimport {\r\n    createDexieStorageInstance,\r\n    RxStorageInstanceDexie\r\n} from './rx-storage-instance-dexie.ts';\r\nimport { ensureRxStorageInstanceParamsAreCorrect } from '../../rx-storage-helper.ts';\r\nimport { RXDB_VERSION } from '../utils/utils-rxdb-version.ts';\r\nimport { getSchemaByObjectPath } from '../../rx-schema-helper.ts';\r\nimport { newRxError } from '../../rx-error.ts';\r\n\r\n\r\n\r\nexport class RxStorageDexie implements RxStorage<DexieStorageInternals, DexieSettings> {\r\n    public name = RX_STORAGE_NAME_DEXIE;\r\n    public readonly rxdbVersion = RXDB_VERSION;\r\n    constructor(\r\n        public settings: DexieSettings\r\n    ) { }\r\n\r\n    public createStorageInstance<RxDocType>(\r\n        params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>\r\n    ): Promise<RxStorageInstanceDexie<RxDocType>> {\r\n        ensureRxStorageInstanceParamsAreCorrect(params);\r\n\r\n        /**\r\n         * Dexie does not support non-required indexes and must throw if that is used.\r\n         * @link https://github.com/pubkey/rxdb/pull/6643#issuecomment-2505310082\r\n         */\r\n        if (params.schema.indexes) {\r\n            const indexFields = params.schema.indexes.flat();\r\n            indexFields\r\n                .filter(indexField => !indexField.includes('.'))\r\n                .forEach(indexField => {\r\n                    if (!params.schema.required || !params.schema.required.includes(indexField as any)) {\r\n                        throw newRxError('DXE1', {\r\n                            field: indexField,\r\n                            schema: params.schema,\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n\r\n        return createDexieStorageInstance(this, params, this.settings);\r\n    }\r\n}\r\n\r\n\r\nexport function getRxStorageDexie(\r\n    settings: DexieSettings = {}\r\n): RxStorageDexie {\r\n    const storage = new RxStorageDexie(settings);\r\n    return storage;\r\n}\r\n"],"mappings":"AAIA,SACIA,qBAAqB,QAClB,mBAAmB;AAK1B,SACIC,0BAA0B,QAEvB,gCAAgC;AACvC,SAASC,uCAAuC,QAAQ,4BAA4B;AACpF,SAASC,YAAY,QAAQ,gCAAgC;AAE7D,SAASC,UAAU,QAAQ,mBAAmB;AAI9C,WAAaC,cAAc;EAGvB,SAAAA,eACWC,QAAuB,EAChC;IAAA,KAJKC,IAAI,GAAGP,qBAAqB;IAAA,KACnBQ,WAAW,GAAGL,YAAY;IAAA,KAE/BG,QAAuB,GAAvBA,QAAuB;EAC9B;EAAC,IAAAG,MAAA,GAAAJ,cAAA,CAAAK,SAAA;EAAAD,MAAA,CAEEE,qBAAqB,GAA5B,SAAOA,qBAAqBA,CACxBC,MAAiE,EACvB;IAC1CV,uCAAuC,CAACU,MAAM,CAAC;;IAE/C;AACR;AACA;AACA;IACQ,IAAIA,MAAM,CAACC,MAAM,CAACC,OAAO,EAAE;MACvB,IAAMC,WAAW,GAAGH,MAAM,CAACC,MAAM,CAACC,OAAO,CAACE,IAAI,CAAC,CAAC;MAChDD,WAAW,CACNE,MAAM,CAACC,UAAU,IAAI,CAACA,UAAU,CAACC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAC/CC,OAAO,CAACF,UAAU,IAAI;QACnB,IAAI,CAACN,MAAM,CAACC,MAAM,CAACQ,QAAQ,IAAI,CAACT,MAAM,CAACC,MAAM,CAACQ,QAAQ,CAACF,QAAQ,CAACD,UAAiB,CAAC,EAAE;UAChF,MAAMd,UAAU,CAAC,MAAM,EAAE;YACrBkB,KAAK,EAAEJ,UAAU;YACjBL,MAAM,EAAED,MAAM,CAACC;UACnB,CAAC,CAAC;QACN;MACJ,CAAC,CAAC;IACV;IAEA,OAAOZ,0BAA0B,CAAC,IAAI,EAAEW,MAAM,EAAE,IAAI,CAACN,QAAQ,CAAC;EAClE,CAAC;EAAA,OAAAD,cAAA;AAAA;AAIL,OAAO,SAASkB,iBAAiBA,CAC7BjB,QAAuB,GAAG,CAAC,CAAC,EACd;EACd,IAAMkB,OAAO,GAAG,IAAInB,cAAc,CAACC,QAAQ,CAAC;EAC5C,OAAOkB,OAAO;AAClB","ignoreList":[]}