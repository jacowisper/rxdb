{"version":3,"file":"websocket-client.js","names":["replicateRxCollection","ReconnectingWebSocket","IsomorphicWebSocket","errorToPlainJson","randomToken","toArray","filter","map","Subject","firstValueFrom","BehaviorSubject","newRxError","ensureIsWebsocket","w","is","CLOSING","console","dir","Error","createWebSocketClient","options","wsClient","url","WebSocket","connected$","message$","error$","onerror","err","log","error","message","emitError","errors","er","direction","next","Promise","res","onopen","headers","authMessage","collection","name","id","params","method","send","JSON","stringify","onclose","onmessage","messageObj","parse","data","socket","replicateWithWebsocketServer","websocketClient","messages$","requestCounter","requestFlag","getRequestId","count","database","token","replicationState","replicationIdentifier","live","pull","batchSize","stream$","pipe","msg","result","handler","lastPulledCheckpoint","requestId","request","push","docs","subscribe","subjects","isConnected","reSync","streamRequest","onClose","close"],"sources":["../../../../src/plugins/replication-websocket/websocket-client.ts"],"sourcesContent":["import {\r\n    replicateRxCollection,\r\n    RxReplicationState\r\n} from '../replication/index.ts';\r\nimport {\r\n    WebsocketClientOptions,\r\n    WebsocketMessageType\r\n} from './websocket-types.ts';\r\n\r\nimport ReconnectingWebSocket from 'reconnecting-websocket';\r\n\r\nimport IsomorphicWebSocket from 'isomorphic-ws';\r\nimport {\r\n    errorToPlainJson,\r\n    randomToken,\r\n    toArray\r\n} from '../../plugins/utils/index.ts';\r\nimport {\r\n    filter,\r\n    map,\r\n    Subject,\r\n    firstValueFrom,\r\n    BehaviorSubject\r\n} from 'rxjs';\r\nimport type {\r\n    RxError,\r\n    RxReplicationWriteToMasterRow\r\n} from '../../types/index.d.ts';\r\nimport { newRxError } from '../../rx-error.ts';\r\n\r\nexport type WebsocketClient = {\r\n    url: string;\r\n    socket: any;\r\n    connected$: BehaviorSubject<boolean>;\r\n    message$: Subject<any>;\r\n    error$: Subject<RxError>;\r\n};\r\n\r\n\r\n/**\r\n * Copied and adapted from the 'reconnecting-websocket' npm module.\r\n * Some bundlers have problems with bundling the isomorphic-ws plugin\r\n * so we directly check the correctness in RxDB to ensure that we can\r\n * throw a helpful error.\r\n */\r\nexport function ensureIsWebsocket(w: typeof IsomorphicWebSocket) {\r\n    const is = typeof w !== 'undefined' && !!w && w.CLOSING === 2;\r\n    if (!is) {\r\n        console.dir(w);\r\n        throw new Error('websocket not valid');\r\n    }\r\n}\r\n\r\n\r\nexport async function createWebSocketClient<RxDocType>(options: WebsocketClientOptions<RxDocType>): Promise<WebsocketClient> {\r\n    ensureIsWebsocket(IsomorphicWebSocket);\r\n    const wsClient = new ReconnectingWebSocket(\r\n        options.url,\r\n        [],\r\n        {\r\n            WebSocket: IsomorphicWebSocket\r\n        }\r\n    );\r\n    const connected$ = new BehaviorSubject<boolean>(false);\r\n    const message$ = new Subject<any>();\r\n    const error$ = new Subject<any>();\r\n    wsClient.onerror = (err) => {\r\n\r\n        console.log('--- WAS CLIENT GOT ERROR:');\r\n        console.log(err.error.message);\r\n\r\n        const emitError = newRxError('RC_STREAM', {\r\n            errors: toArray(err).map((er: any) => errorToPlainJson(er)),\r\n            direction: 'pull'\r\n        });\r\n        error$.next(emitError);\r\n    };\r\n    await new Promise<void>(res => {\r\n        wsClient.onopen = () => {\r\n\r\n            if (options.headers) {\r\n                const authMessage: WebsocketMessageType = {\r\n                    collection: options.collection.name,\r\n                    id: randomToken(10),\r\n                    params: [options.headers],\r\n                    method: 'auth'\r\n                };\r\n                wsClient.send(JSON.stringify(authMessage));\r\n            }\r\n\r\n            connected$.next(true);\r\n            res();\r\n        };\r\n    });\r\n    wsClient.onclose = () => {\r\n        connected$.next(false);\r\n    };\r\n\r\n    wsClient.onmessage = (messageObj) => {\r\n        const message = JSON.parse(messageObj.data);\r\n        message$.next(message);\r\n    };\r\n\r\n    return {\r\n        url: options.url,\r\n        socket: wsClient,\r\n        connected$,\r\n        message$,\r\n        error$\r\n    };\r\n\r\n}\r\n\r\nexport async function replicateWithWebsocketServer<RxDocType, CheckpointType>(\r\n    options: WebsocketClientOptions<RxDocType>\r\n): Promise<RxReplicationState<RxDocType, CheckpointType>> {\r\n    const websocketClient = await createWebSocketClient(options);\r\n    const wsClient = websocketClient.socket;\r\n    const messages$ = websocketClient.message$;\r\n\r\n    let requestCounter = 0;\r\n    const requestFlag = randomToken(10);\r\n    function getRequestId() {\r\n        const count = requestCounter++;\r\n        return options.collection.database.token + '|' + requestFlag + '|' + count;\r\n    }\r\n    const replicationState = replicateRxCollection<RxDocType, CheckpointType>({\r\n        collection: options.collection,\r\n        replicationIdentifier: options.replicationIdentifier,\r\n        live: options.live,\r\n        pull: {\r\n            batchSize: options.batchSize,\r\n            stream$: messages$.pipe(\r\n                filter(msg => msg.id === 'stream' && msg.collection === options.collection.name),\r\n                map(msg => msg.result)\r\n            ),\r\n            async handler(lastPulledCheckpoint: CheckpointType | undefined, batchSize: number) {\r\n                const requestId = getRequestId();\r\n                const request: WebsocketMessageType = {\r\n                    id: requestId,\r\n                    collection: options.collection.name,\r\n                    method: 'masterChangesSince',\r\n                    params: [lastPulledCheckpoint, batchSize]\r\n                };\r\n                wsClient.send(JSON.stringify(request));\r\n                const result = await firstValueFrom(\r\n                    messages$.pipe(\r\n                        filter(msg => msg.id === requestId),\r\n                        map(msg => msg.result)\r\n                    )\r\n                );\r\n                return result;\r\n            }\r\n        },\r\n        push: {\r\n            batchSize: options.batchSize,\r\n            handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\r\n                const requestId = getRequestId();\r\n                const request: WebsocketMessageType = {\r\n                    id: requestId,\r\n                    collection: options.collection.name,\r\n                    method: 'masterWrite',\r\n                    params: [docs]\r\n                };\r\n                wsClient.send(JSON.stringify(request));\r\n                return firstValueFrom(\r\n                    messages$.pipe(\r\n                        filter(msg => msg.id === requestId),\r\n                        map(msg => msg.result)\r\n                    )\r\n                );\r\n            }\r\n        }\r\n    });\r\n\r\n    websocketClient.error$.subscribe(err => replicationState.subjects.error.next(err));\r\n\r\n    websocketClient.connected$.subscribe(isConnected => {\r\n        if (isConnected) {\r\n            /**\r\n             * When the client goes offline and online again,\r\n             * we have to send a 'RESYNC' signal because the client\r\n             * might have missed out events while being offline.\r\n             */\r\n            replicationState.reSync();\r\n\r\n            /**\r\n             * Because reconnecting creates a new websocket-instance,\r\n             * we have to start the changestream from the remote again\r\n             * each time.\r\n             */\r\n            const streamRequest: WebsocketMessageType = {\r\n                id: 'stream',\r\n                collection: options.collection.name,\r\n                method: 'masterChangeStream$',\r\n                params: []\r\n            };\r\n            wsClient.send(JSON.stringify(streamRequest));\r\n        }\r\n    });\r\n\r\n    options.collection.onClose.push(() => websocketClient.socket.close());\r\n    return replicationState;\r\n}\r\n"],"mappings":"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","ignoreList":[]}