{"version":3,"file":"index.js","names":["path","BehaviorSubject","firstValueFrom","Subject","filter","map","getFromMapOrCreate","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_TRUE","PROMISE_RESOLVE_VOID","clearFolder","deleteFolder","documentFolder","ensureFolderExists","getMeta","prepareFolders","setMeta","writeJsonToFile","writeToFile","getChangedDocumentsSince","backupSingleDocument","rxDocument","options","data","toJSON","writtenFiles","docFolder","primary","fileLocation","join","push","attachments","attachmentsFolder","allAttachments","Promise","all","attachment","content","getData","attachmentFileLocation","id","BACKUP_STATES_BY_DB","WeakMap","addToBackupStates","db","state","ar","RxBackupState","database","isStopped","subs","persistRunning","initialReplicationDone$","internalWriteEvents$","writeEvents$","asObservable","batchSize","_proto","prototype","persistOnce","then","_persistOnce","_this","meta","Object","entries","collections","collectionName","collection","primaryKey","schema","primaryPath","processedDocuments","Set","requestIdlePromise","collectionStates","lastCheckpoint","checkpoint","hasMore","_loop","changesResult","storageInstance","documents","length","docIds","doc","has","add","elem","pos","arr","indexOf","docs","findByIds","exec","size","Array","from","values","next","name","documentId","files","deleted","docId","getValue","watchForChanges","forEach","changes$","changeStream","sub","subscribe","awaitInitialBackup","pipe","v","cancel","unsubscribe","backup","backupState","live","RxDBBackupPlugin","rxdb","prototypes","RxDatabase","proto","hooks","preCloseRxDatabase","after","states","get"],"sources":["../../../../src/plugins/backup/index.ts"],"sourcesContent":["import * as path from 'node:path';\r\nimport {\r\n    BehaviorSubject,\r\n    firstValueFrom,\r\n    Observable,\r\n    Subject,\r\n    Subscription\r\n} from 'rxjs';\r\nimport {\r\n    filter,\r\n    map\r\n} from 'rxjs';\r\nimport type {\r\n    BackupOptions,\r\n    RxBackupWriteEvent,\r\n    RxCollection,\r\n    RxDatabase,\r\n    RxDocument,\r\n    RxPlugin\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    getFromMapOrCreate,\r\n    PROMISE_RESOLVE_FALSE,\r\n    PROMISE_RESOLVE_TRUE,\r\n    PROMISE_RESOLVE_VOID\r\n} from '../../plugins/utils/index.ts';\r\nimport {\r\n    clearFolder,\r\n    deleteFolder,\r\n    documentFolder,\r\n    ensureFolderExists,\r\n    getMeta,\r\n    prepareFolders,\r\n    setMeta,\r\n    writeJsonToFile,\r\n    writeToFile\r\n} from './file-util.ts';\r\nimport { getChangedDocumentsSince } from '../../rx-storage-helper.ts';\r\n\r\n\r\n/**\r\n * Backups a single documents,\r\n * returns the paths to all written files\r\n */\r\nexport async function backupSingleDocument(\r\n    rxDocument: RxDocument<any, any>,\r\n    options: BackupOptions\r\n): Promise<string[]> {\r\n    const data = rxDocument.toJSON(true);\r\n    const writtenFiles: string[] = [];\r\n\r\n    const docFolder = documentFolder(options, rxDocument.primary);\r\n    await clearFolder(docFolder);\r\n\r\n    const fileLocation = path.join(\r\n        docFolder,\r\n        'document.json'\r\n    );\r\n    await writeJsonToFile(fileLocation, data);\r\n    writtenFiles.push(fileLocation);\r\n\r\n    if (options.attachments) {\r\n        const attachmentsFolder = path.join(\r\n            docFolder,\r\n            'attachments'\r\n        );\r\n        ensureFolderExists(attachmentsFolder);\r\n        const attachments = (rxDocument as RxDocument).allAttachments();\r\n        await Promise.all(\r\n            attachments\r\n                .map(async (attachment) => {\r\n                    const content = await attachment.getData();\r\n                    const attachmentFileLocation = path.join(\r\n                        attachmentsFolder,\r\n                        attachment.id\r\n                    );\r\n                    await writeToFile(attachmentFileLocation, content);\r\n                    writtenFiles.push(attachmentFileLocation);\r\n                })\r\n        );\r\n    }\r\n\r\n    return writtenFiles;\r\n}\r\n\r\nconst BACKUP_STATES_BY_DB: WeakMap<RxDatabase, RxBackupState[]> = new WeakMap();\r\nfunction addToBackupStates(db: RxDatabase, state: RxBackupState) {\r\n    const ar = getFromMapOrCreate(\r\n        BACKUP_STATES_BY_DB,\r\n        db,\r\n        () => []\r\n    );\r\n    ar.push(state);\r\n}\r\n\r\nexport class RxBackupState {\r\n    public isStopped: boolean = false;\r\n    private subs: Subscription[] = [];\r\n    private persistRunning: Promise<void> = PROMISE_RESOLVE_VOID;\r\n    private initialReplicationDone$: BehaviorSubject<boolean> = new BehaviorSubject(false as any);\r\n\r\n    private readonly internalWriteEvents$: Subject<RxBackupWriteEvent> = new Subject();\r\n    public readonly writeEvents$: Observable<RxBackupWriteEvent> = this.internalWriteEvents$.asObservable();\r\n\r\n    constructor(\r\n        public readonly database: RxDatabase,\r\n        public readonly options: BackupOptions\r\n    ) {\r\n        if (!this.options.batchSize) {\r\n            this.options.batchSize = 10;\r\n        }\r\n        addToBackupStates(database, this);\r\n        prepareFolders(database, options);\r\n    }\r\n\r\n    /**\r\n     * Persists all data from all collections,\r\n     * beginning from the oldest sequence checkpoint\r\n     * to the newest one.\r\n     * Do not call this while it is already running.\r\n     * Returns true if there are more documents to process\r\n     */\r\n    public persistOnce() {\r\n        return this.persistRunning = this.persistRunning.then(() => this._persistOnce());\r\n    }\r\n\r\n    public async _persistOnce() {\r\n        const meta = await getMeta(this.options);\r\n\r\n        await Promise.all(\r\n            Object\r\n                .entries(this.database.collections)\r\n                .map(async ([collectionName, collection]) => {\r\n                    const primaryKey = collection.schema.primaryPath;\r\n                    const processedDocuments: Set<string> = new Set();\r\n\r\n                    await this.database.requestIdlePromise();\r\n\r\n                    if (!meta.collectionStates[collectionName]) {\r\n                        meta.collectionStates[collectionName] = {};\r\n                    }\r\n                    let lastCheckpoint = meta.collectionStates[collectionName].checkpoint;\r\n\r\n                    let hasMore = true;\r\n                    while (hasMore && !this.isStopped) {\r\n                        await this.database.requestIdlePromise();\r\n                        const changesResult = await getChangedDocumentsSince(\r\n                            collection.storageInstance,\r\n                            this.options.batchSize ? this.options.batchSize : 0,\r\n                            lastCheckpoint\r\n                        );\r\n                        lastCheckpoint = changesResult.documents.length > 0 ? changesResult.checkpoint : lastCheckpoint;\r\n                        meta.collectionStates[collectionName].checkpoint = lastCheckpoint;\r\n\r\n                        const docIds: string[] = changesResult.documents\r\n                            .map(doc => doc[primaryKey])\r\n                            .filter(id => {\r\n                                if (\r\n                                    processedDocuments.has(id)\r\n                                ) {\r\n                                    return false;\r\n                                } else {\r\n                                    processedDocuments.add(id);\r\n                                    return true;\r\n                                }\r\n                            })\r\n                            .filter((elem, pos, arr) => arr.indexOf(elem) === pos); // unique\r\n                        await this.database.requestIdlePromise();\r\n\r\n                        const docs: Map<string, RxDocument> = await collection.findByIds(docIds).exec();\r\n                        if (docs.size === 0) {\r\n                            hasMore = false;\r\n                            continue;\r\n                        }\r\n                        await Promise.all(\r\n                            Array\r\n                                .from(docs.values())\r\n                                .map(async (doc) => {\r\n                                    const writtenFiles = await backupSingleDocument(doc, this.options);\r\n                                    this.internalWriteEvents$.next({\r\n                                        collectionName: collection.name,\r\n                                        documentId: doc.primary,\r\n                                        files: writtenFiles,\r\n                                        deleted: false\r\n                                    });\r\n                                })\r\n                        );\r\n                        // handle deleted documents\r\n                        await Promise.all(\r\n                            docIds\r\n                                .filter(docId => !docs.has(docId))\r\n                                .map(async (docId) => {\r\n                                    await deleteFolder(documentFolder(this.options, docId));\r\n                                    this.internalWriteEvents$.next({\r\n                                        collectionName: collection.name,\r\n                                        documentId: docId,\r\n                                        files: [],\r\n                                        deleted: true\r\n                                    });\r\n                                })\r\n                        );\r\n                    }\r\n                    meta.collectionStates[collectionName].checkpoint = lastCheckpoint;\r\n                    await setMeta(this.options, meta);\r\n                })\r\n        );\r\n\r\n        if (!this.initialReplicationDone$.getValue()) {\r\n            this.initialReplicationDone$.next(true);\r\n        }\r\n    }\r\n\r\n    public watchForChanges() {\r\n        const collections: RxCollection[] = Object.values(this.database.collections);\r\n        collections.forEach(collection => {\r\n            const changes$ = collection.storageInstance.changeStream();\r\n            const sub = changes$.subscribe(() => {\r\n                this.persistOnce();\r\n            });\r\n            this.subs.push(sub);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns a promise that resolves when the initial backup is done\r\n     * and the filesystem is in sync with the database state\r\n     */\r\n    public awaitInitialBackup(): Promise<boolean> {\r\n        return firstValueFrom(\r\n            this.initialReplicationDone$.pipe(\r\n                filter(v => !!v),\r\n                map(() => true)\r\n            )\r\n        );\r\n    }\r\n\r\n    cancel(): Promise<boolean> {\r\n        if (this.isStopped) {\r\n            return PROMISE_RESOLVE_FALSE;\r\n        }\r\n        this.isStopped = true;\r\n        this.subs.forEach(sub => sub.unsubscribe());\r\n        return PROMISE_RESOLVE_TRUE;\r\n    }\r\n}\r\n\r\n\r\nexport function backup(\r\n    this: RxDatabase,\r\n    options: BackupOptions\r\n): RxBackupState {\r\n    const backupState = new RxBackupState(this, options);\r\n    backupState.persistOnce();\r\n\r\n    if (options.live) {\r\n        backupState.watchForChanges();\r\n    }\r\n\r\n    return backupState;\r\n}\r\n\r\nexport * from './file-util.ts';\r\nexport const RxDBBackupPlugin: RxPlugin = {\r\n    name: 'backup',\r\n    rxdb: true,\r\n    prototypes: {\r\n        RxDatabase(proto: any) {\r\n            proto.backup = backup;\r\n        }\r\n    },\r\n    hooks: {\r\n        preCloseRxDatabase: {\r\n            after: function preCloseRxDatabase(db: RxDatabase) {\r\n                const states = BACKUP_STATES_BY_DB.get(db);\r\n                if (states) {\r\n                    states.forEach(state => state.cancel());\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]}