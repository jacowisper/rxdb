{"version":3,"file":"cleanup.js","names":["PROMISE_RESOLVE_TRUE","REPLICATION_STATE_BY_COLLECTION","DEFAULT_CLEANUP_POLICY","runAsyncPluginHooks","firstValueFrom","RXSTORAGE_CLEANUP_QUEUE","startCleanupForRxCollection","rxCollection","rxDatabase","database","cleanupPolicy","Object","assign","initialCleanupWait","closed","cleanupRxCollection","runCleanupAfterDelete","collection","promiseWait","minimumCollectionAge","waitForLeadership","storageInstance","isDone","awaitReplicationsInSync","replicationStates","get","Promise","all","map","replicationState","isStopped","awaitInSync","then","requestIdlePromise","cleanup","minimumDeletedTime","collectionName","name","databaseName","eventBulks$","catch","runEach"],"sources":["../../../../src/plugins/cleanup/cleanup.ts"],"sourcesContent":["import type { RxCleanupPolicy, RxCollection } from '../../types/index.d.ts';\r\nimport { PROMISE_RESOLVE_TRUE } from '../../plugins/utils/index.ts';\r\nimport { REPLICATION_STATE_BY_COLLECTION } from '../replication/index.ts';\r\nimport { DEFAULT_CLEANUP_POLICY } from './cleanup-helper.ts';\r\nimport { runAsyncPluginHooks } from '../../hooks.ts';\r\nimport { filter, firstValueFrom } from 'rxjs';\r\n\r\n/**\r\n * Even on multiple databases,\r\n * the calls to RxStorage().cleanup()\r\n * must never run in parallel.\r\n * The cleanup is a background task which should\r\n * not affect the performance of other, more important tasks.\r\n */\r\nlet RXSTORAGE_CLEANUP_QUEUE: Promise<boolean> = PROMISE_RESOLVE_TRUE;\r\n\r\nexport async function startCleanupForRxCollection(\r\n    rxCollection: RxCollection\r\n) {\r\n    const rxDatabase = rxCollection.database;\r\n    const cleanupPolicy = Object.assign(\r\n        {},\r\n        DEFAULT_CLEANUP_POLICY,\r\n        rxDatabase.cleanupPolicy ? rxDatabase.cleanupPolicy : {}\r\n    );\r\n\r\n\r\n    await initialCleanupWait(rxCollection, cleanupPolicy);\r\n    if (rxCollection.closed) {\r\n        return;\r\n    }\r\n\r\n    // initially cleanup the collection\r\n    await cleanupRxCollection(rxCollection, cleanupPolicy);\r\n\r\n    /**\r\n     * Afterwards we listen to deletes\r\n     * and only re-run the cleanup after\r\n     * minimumDeletedTime is reached.\r\n     */\r\n    await runCleanupAfterDelete(rxCollection, cleanupPolicy);\r\n}\r\n\r\n\r\nexport async function initialCleanupWait(collection: RxCollection, cleanupPolicy: RxCleanupPolicy) {\r\n    /**\r\n     * Wait until minimumDatabaseInstanceAge is reached\r\n     * or collection is closed.\r\n     */\r\n    await collection.promiseWait(cleanupPolicy.minimumCollectionAge);\r\n    if (collection.closed) {\r\n        return;\r\n    }\r\n\r\n    if (cleanupPolicy.waitForLeadership) {\r\n        await collection.database.waitForLeadership();\r\n    }\r\n}\r\n\r\n/**\r\n * Runs the cleanup for a single RxCollection\r\n */\r\nexport async function cleanupRxCollection(\r\n    rxCollection: RxCollection,\r\n    cleanupPolicy: RxCleanupPolicy\r\n) {\r\n    const rxDatabase = rxCollection.database;\r\n    const storageInstance = rxCollection.storageInstance;\r\n\r\n    // run cleanup() until it returns true\r\n    let isDone = false;\r\n    while (!isDone && !rxCollection.closed) {\r\n        if (cleanupPolicy.awaitReplicationsInSync) {\r\n            const replicationStates = REPLICATION_STATE_BY_COLLECTION.get(rxCollection);\r\n            if (replicationStates) {\r\n                await Promise.all(\r\n                    replicationStates.map(replicationState => {\r\n                        if (!replicationState.isStopped()) {\r\n                            return replicationState.awaitInSync();\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n        }\r\n        if (rxCollection.closed) {\r\n            return;\r\n        }\r\n        RXSTORAGE_CLEANUP_QUEUE = RXSTORAGE_CLEANUP_QUEUE\r\n            .then(async () => {\r\n                if (rxCollection.closed) {\r\n                    return true;\r\n                }\r\n                await rxDatabase.requestIdlePromise();\r\n                return storageInstance.cleanup(cleanupPolicy.minimumDeletedTime);\r\n            });\r\n        isDone = await RXSTORAGE_CLEANUP_QUEUE;\r\n    }\r\n    await runAsyncPluginHooks('postCleanup', {\r\n        collectionName: rxCollection.name,\r\n        databaseName: rxDatabase.name\r\n    });\r\n}\r\n\r\nexport async function runCleanupAfterDelete(\r\n    rxCollection: RxCollection,\r\n    cleanupPolicy: RxCleanupPolicy\r\n) {\r\n    while (!rxCollection.closed) {\r\n        /**\r\n         * In theory we should wait here until a document is deleted.\r\n         * But this would mean we have to search through all events ever processed.\r\n         * So instead we just wait for any write event and then we anyway throttle\r\n         * the calls with the promiseWait() below.\r\n         */\r\n        await firstValueFrom(rxCollection.eventBulks$).catch(() => { });\r\n\r\n        await rxCollection.promiseWait(cleanupPolicy.runEach);\r\n        if (rxCollection.closed) {\r\n            return;\r\n        }\r\n        await cleanupRxCollection(rxCollection, cleanupPolicy);\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]}