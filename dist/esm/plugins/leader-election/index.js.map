{"version":3,"file":"index.js","names":["createLeaderElection","getBroadcastChannelReference","removeBroadcastChannelReference","PROMISE_RESOLVE_TRUE","getFromMapOrCreate","LEADER_ELECTORS_OF_DB","WeakMap","LEADER_ELECTOR_BY_BROADCAST_CHANNEL","getLeaderElectorByBroadcastChannel","broadcastChannel","getForDatabase","storage","name","token","oldClose","close","bind","elector","set","leaderElector","isLeader","multiInstance","waitForLeadership","awaitLeadership","then","onClose","db","has","get","die","rxdb","prototypes","RxDatabase","proto","RxDBLeaderElectionPlugin","hooks","preCloseRxDatabase","after"],"sources":["../../../../src/plugins/leader-election/index.ts"],"sourcesContent":["/**\r\n * this plugin adds the leader-election-capabilities to rxdb\r\n */\r\n\r\nimport {\r\n    createLeaderElection,\r\n    LeaderElector,\r\n    BroadcastChannel\r\n} from 'broadcast-channel';\r\nimport {\r\n    getBroadcastChannelReference,\r\n    removeBroadcastChannelReference\r\n} from '../../rx-storage-multiinstance.ts';\r\n\r\nimport type {\r\n    RxDatabase,\r\n    RxPlugin\r\n} from '../../types/index.d.ts';\r\nimport { PROMISE_RESOLVE_TRUE, getFromMapOrCreate } from '../utils/index.ts';\r\n\r\nconst LEADER_ELECTORS_OF_DB: WeakMap<RxDatabase, LeaderElector> = new WeakMap();\r\nconst LEADER_ELECTOR_BY_BROADCAST_CHANNEL: WeakMap<BroadcastChannel, LeaderElector> = new WeakMap();\r\n\r\n\r\n/**\r\n * Returns the leader elector of a broadcast channel.\r\n * Used to ensure we reuse the same elector for the channel each time.\r\n */\r\nexport function getLeaderElectorByBroadcastChannel(broadcastChannel: BroadcastChannel): LeaderElector {\r\n    return getFromMapOrCreate(\r\n        LEADER_ELECTOR_BY_BROADCAST_CHANNEL,\r\n        broadcastChannel,\r\n        () => createLeaderElection(broadcastChannel)\r\n    );\r\n}\r\n\r\n/**\r\n * @overwrites RxDatabase().leaderElector for caching\r\n */\r\nexport function getForDatabase(this: RxDatabase): LeaderElector {\r\n    const broadcastChannel = getBroadcastChannelReference(\r\n        this.storage.name,\r\n        this.token,\r\n        this.name,\r\n        this\r\n    );\r\n\r\n    /**\r\n     * Clean up the reference on RxDatabase.close()\r\n     */\r\n    const oldClose = this.close.bind(this);\r\n    this.close = function () {\r\n        removeBroadcastChannelReference(this.token, this);\r\n        return oldClose();\r\n    };\r\n\r\n\r\n    let elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\r\n    if (!elector) {\r\n        elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\r\n        LEADER_ELECTORS_OF_DB.set(\r\n            this,\r\n            elector\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Overwrite for caching\r\n     */\r\n    this.leaderElector = () => elector;\r\n\r\n    return elector;\r\n}\r\n\r\nexport function isLeader(this: RxDatabase): boolean {\r\n    if (!this.multiInstance) {\r\n        return true;\r\n    }\r\n    return this.leaderElector().isLeader;\r\n}\r\n\r\nexport function waitForLeadership(this: RxDatabase): Promise<boolean> {\r\n    if (!this.multiInstance) {\r\n        return PROMISE_RESOLVE_TRUE;\r\n    } else {\r\n        return this.leaderElector()\r\n            .awaitLeadership()\r\n            .then(() => true);\r\n    }\r\n}\r\n\r\n/**\r\n * runs when the database gets closed\r\n */\r\nexport function onClose(db: RxDatabase) {\r\n    const has = LEADER_ELECTORS_OF_DB.get(db);\r\n    if (has) {\r\n        has.die();\r\n    }\r\n}\r\n\r\nexport const rxdb = true;\r\nexport const prototypes = {\r\n    RxDatabase: (proto: any) => {\r\n        proto.leaderElector = getForDatabase;\r\n        proto.isLeader = isLeader;\r\n        proto.waitForLeadership = waitForLeadership;\r\n    }\r\n};\r\n\r\nexport const RxDBLeaderElectionPlugin: RxPlugin = {\r\n    name: 'leader-election',\r\n    rxdb,\r\n    prototypes,\r\n    hooks: {\r\n        preCloseRxDatabase: {\r\n            after: onClose\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SACIA,oBAAoB,QAGjB,mBAAmB;AAC1B,SACIC,4BAA4B,EAC5BC,+BAA+B,QAC5B,mCAAmC;AAM1C,SAASC,oBAAoB,EAAEC,kBAAkB,QAAQ,mBAAmB;AAE5E,IAAMC,qBAAyD,GAAG,IAAIC,OAAO,CAAC,CAAC;AAC/E,IAAMC,mCAA6E,GAAG,IAAID,OAAO,CAAC,CAAC;;AAGnG;AACA;AACA;AACA;AACA,OAAO,SAASE,kCAAkCA,CAACC,gBAAkC,EAAiB;EAClG,OAAOL,kBAAkB,CACrBG,mCAAmC,EACnCE,gBAAgB,EAChB,MAAMT,oBAAoB,CAACS,gBAAgB,CAC/C,CAAC;AACL;;AAEA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAAA,EAAkC;EAC5D,IAAMD,gBAAgB,GAAGR,4BAA4B,CACjD,IAAI,CAACU,OAAO,CAACC,IAAI,EACjB,IAAI,CAACC,KAAK,EACV,IAAI,CAACD,IAAI,EACT,IACJ,CAAC;;EAED;AACJ;AACA;EACI,IAAME,QAAQ,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC;EACtC,IAAI,CAACD,KAAK,GAAG,YAAY;IACrBb,+BAA+B,CAAC,IAAI,CAACW,KAAK,EAAE,IAAI,CAAC;IACjD,OAAOC,QAAQ,CAAC,CAAC;EACrB,CAAC;EAGD,IAAIG,OAAO,GAAGT,kCAAkC,CAACC,gBAAgB,CAAC;EAClE,IAAI,CAACQ,OAAO,EAAE;IACVA,OAAO,GAAGT,kCAAkC,CAACC,gBAAgB,CAAC;IAC9DJ,qBAAqB,CAACa,GAAG,CACrB,IAAI,EACJD,OACJ,CAAC;EACL;;EAEA;AACJ;AACA;EACI,IAAI,CAACE,aAAa,GAAG,MAAMF,OAAO;EAElC,OAAOA,OAAO;AAClB;AAEA,OAAO,SAASG,QAAQA,CAAA,EAA4B;EAChD,IAAI,CAAC,IAAI,CAACC,aAAa,EAAE;IACrB,OAAO,IAAI;EACf;EACA,OAAO,IAAI,CAACF,aAAa,CAAC,CAAC,CAACC,QAAQ;AACxC;AAEA,OAAO,SAASE,iBAAiBA,CAAA,EAAqC;EAClE,IAAI,CAAC,IAAI,CAACD,aAAa,EAAE;IACrB,OAAOlB,oBAAoB;EAC/B,CAAC,MAAM;IACH,OAAO,IAAI,CAACgB,aAAa,CAAC,CAAC,CACtBI,eAAe,CAAC,CAAC,CACjBC,IAAI,CAAC,MAAM,IAAI,CAAC;EACzB;AACJ;;AAEA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,EAAc,EAAE;EACpC,IAAMC,GAAG,GAAGtB,qBAAqB,CAACuB,GAAG,CAACF,EAAE,CAAC;EACzC,IAAIC,GAAG,EAAE;IACLA,GAAG,CAACE,GAAG,CAAC,CAAC;EACb;AACJ;AAEA,OAAO,IAAMC,IAAI,GAAG,IAAI;AACxB,OAAO,IAAMC,UAAU,GAAG;EACtBC,UAAU,EAAGC,KAAU,IAAK;IACxBA,KAAK,CAACd,aAAa,GAAGT,cAAc;IACpCuB,KAAK,CAACb,QAAQ,GAAGA,QAAQ;IACzBa,KAAK,CAACX,iBAAiB,GAAGA,iBAAiB;EAC/C;AACJ,CAAC;AAED,OAAO,IAAMY,wBAAkC,GAAG;EAC9CtB,IAAI,EAAE,iBAAiB;EACvBkB,IAAI;EACJC,UAAU;EACVI,KAAK,EAAE;IACHC,kBAAkB,EAAE;MAChBC,KAAK,EAAEZ;IACX;EACJ;AACJ,CAAC","ignoreList":[]}