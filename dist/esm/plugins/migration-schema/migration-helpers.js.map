{"version":3,"file":"migration-helpers.js","names":["BehaviorSubject","INTERNAL_CONTEXT_COLLECTION","getPrimaryKeyOfInternalDocument","getPreviousVersions","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_NULL","clone","flatClone","getFromMapOrCreate","toPromise","getOldCollectionMeta","migrationState","collectionDocKeys","collection","schema","jsonSchema","map","version","name","found","database","internalStore","findDocumentsById","key","length","Error","migrateDocumentData","docSchemaVersion","docData","attachmentsBefore","_attachments","mutateableDocData","meta","_meta","nextVersion","currentPromise","Promise","resolve","_loop","then","docOrNull","runStrategyIfNotNull","doc","ret","migrationStrategies","retPromise","mustMigrate","oldColDoc","MIGRATION_DEFAULT_BATCH_SIZE","DATA_MIGRATION_STATE_SUBJECT_BY_DATABASE","WeakMap","addMigrationStateToDatabase","allSubject","getMigrationStateByDatabase","allList","getValue","slice","push","next","onDatabaseClose","subject","get","complete"],"sources":["../../../../src/plugins/migration-schema/migration-helpers.ts"],"sourcesContent":["import { BehaviorSubject } from 'rxjs';\r\nimport {\r\n    INTERNAL_CONTEXT_COLLECTION,\r\n    getPrimaryKeyOfInternalDocument\r\n} from '../../rx-database-internal-store.ts';\r\nimport { getPreviousVersions } from '../../rx-schema.ts';\r\nimport type {\r\n    InternalStoreCollectionDocType,\r\n    RxCollection,\r\n    RxDatabase,\r\n    RxDocumentData\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    PROMISE_RESOLVE_FALSE,\r\n    PROMISE_RESOLVE_NULL,\r\n    clone,\r\n    flatClone,\r\n    getFromMapOrCreate,\r\n    toPromise\r\n} from '../utils/index.ts';\r\nimport { RxMigrationState } from './rx-migration-state.ts';\r\n\r\nexport async function getOldCollectionMeta(\r\n    migrationState: RxMigrationState\r\n): Promise<RxDocumentData<InternalStoreCollectionDocType>> {\r\n\r\n    const collectionDocKeys = getPreviousVersions(migrationState.collection.schema.jsonSchema)\r\n        .map(version => migrationState.collection.name + '-' + version);\r\n\r\n    const found = await migrationState.database.internalStore.findDocumentsById(\r\n        collectionDocKeys.map(key => getPrimaryKeyOfInternalDocument(\r\n            key,\r\n            INTERNAL_CONTEXT_COLLECTION\r\n        )),\r\n        false\r\n    );\r\n    if (found.length > 1) {\r\n        throw new Error('more than one old collection meta found');\r\n    }\r\n    return found[0];\r\n}\r\n\r\n\r\n/**\r\n * runs the doc-data through all following migrationStrategies\r\n * so it will match the newest schema.\r\n * @throws Error if final doc does not match final schema or migrationStrategy crashes\r\n * @return final object or null if migrationStrategy deleted it\r\n */\r\nexport function migrateDocumentData(\r\n    collection: RxCollection,\r\n    docSchemaVersion: number,\r\n    docData: any\r\n): Promise<any | null> {\r\n    /**\r\n     * We cannot deep-clone Blob or Buffer\r\n     * so we just flat clone it here\r\n     * and attach it to the deep cloned document data.\r\n     */\r\n    const attachmentsBefore = flatClone(docData._attachments);\r\n    const mutateableDocData = clone(docData);\r\n    const meta = mutateableDocData._meta;\r\n    delete mutateableDocData._meta;\r\n    mutateableDocData._attachments = attachmentsBefore;\r\n\r\n    let nextVersion = docSchemaVersion + 1;\r\n\r\n    // run the document through migrationStrategies\r\n    let currentPromise = Promise.resolve(mutateableDocData);\r\n    while (nextVersion <= collection.schema.version) {\r\n        const version = nextVersion;\r\n        currentPromise = currentPromise.then(docOrNull => runStrategyIfNotNull(\r\n            collection,\r\n            version,\r\n            docOrNull\r\n        ));\r\n        nextVersion++;\r\n    }\r\n\r\n    return currentPromise.then(doc => {\r\n        if (doc === null) {\r\n            return PROMISE_RESOLVE_NULL;\r\n        }\r\n        doc._meta = meta;\r\n        return doc;\r\n    });\r\n}\r\n\r\nexport function runStrategyIfNotNull(\r\n    collection: RxCollection,\r\n    version: number,\r\n    docOrNull: any | null\r\n): Promise<any | null> {\r\n    if (docOrNull === null) {\r\n        return PROMISE_RESOLVE_NULL;\r\n    } else {\r\n        const ret = collection.migrationStrategies[version](docOrNull, collection);\r\n        const retPromise = toPromise(ret);\r\n        return retPromise;\r\n    }\r\n}\r\n\r\n/**\r\n * returns true if a migration is needed\r\n */\r\nexport async function mustMigrate(\r\n    migrationState: RxMigrationState\r\n): Promise<boolean> {\r\n    if (migrationState.collection.schema.version === 0) {\r\n        return PROMISE_RESOLVE_FALSE;\r\n    }\r\n    const oldColDoc = await getOldCollectionMeta(migrationState);\r\n    return !!oldColDoc;\r\n}\r\nexport const MIGRATION_DEFAULT_BATCH_SIZE = 200;\r\n\r\n\r\nexport type MigrationStateWithCollection = {\r\n    collection: RxCollection;\r\n    migrationState: RxMigrationState;\r\n};\r\n\r\nexport const DATA_MIGRATION_STATE_SUBJECT_BY_DATABASE = new WeakMap<RxDatabase, BehaviorSubject<RxMigrationState[]>>();\r\nexport function addMigrationStateToDatabase(\r\n    migrationState: RxMigrationState\r\n) {\r\n    const allSubject = getMigrationStateByDatabase(migrationState.database);\r\n    const allList = allSubject.getValue().slice(0);\r\n    allList.push(migrationState);\r\n    allSubject.next(allList);\r\n}\r\nexport function getMigrationStateByDatabase(database: RxDatabase): BehaviorSubject<RxMigrationState[]> {\r\n    return getFromMapOrCreate(\r\n        DATA_MIGRATION_STATE_SUBJECT_BY_DATABASE,\r\n        database,\r\n        () => new BehaviorSubject<RxMigrationState[]>([])\r\n    );\r\n}\r\n\r\n/**\r\n * Complete on database close\r\n * so people do not have to unsubscribe\r\n */\r\nexport function onDatabaseClose(database: RxDatabase) {\r\n    const subject = DATA_MIGRATION_STATE_SUBJECT_BY_DATABASE.get(database);\r\n    if (subject) {\r\n        subject.complete();\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]}