{"version":3,"file":"index.js","names":["ensureNotFalsy","errorToPlainJson","flatClone","getFromMapOrThrow","now","promiseWait","RxDBLeaderElectionPlugin","RxReplicationState","startReplicationOnLeaderShip","addRxPlugin","newRxError","Subject","couchDBDocToRxDocData","mergeUrlQueryParams","couchSwapPrimaryToId","getDefaultFetch","awaitRetry","RxCouchDBReplicationState","_RxReplicationState","url","fetch","replicationIdentifier","collection","pull","push","live","retryTime","autoStart","_this","call","_inheritsLoose","replicateCouchDB","options","conflictHandler","primaryPath","schema","endsWith","args","name","waitForLeadership","pullStream$","replicationPrimitivesPull","handler","lastPulledCheckpoint","batchSize","style","feed","include_docs","since","sequence","heartbeat","limit","seq_interval","response","replicationState","jsonResponse","json","results","documents","map","row","doc","checkpoint","last_seq","modifier","stream$","asObservable","initialCheckpoint","replicationPrimitivesPush","rows","conflicts","pushRowsById","Map","forEach","id","newDocumentState","set","docsByIdResponse","method","headers","body","JSON","stringify","keys","deleted","docsByIdRows","nonConflictRows","remoteRevById","Promise","all","key","realMasterState","pushRow","assumedMasterState","isEqual","_rev","docs","docId","sendDoc","has","responseJson","conflictAgainIds","writeResultRow","isConflict","error","ok","length","getConflictDocsUrl","conflictResponse","conflictResponseJson","conflictAgainRow","startBefore","start","bind","lastRequestStartTime","isStopped","err","subjects","next"],"sources":["../../../../src/plugins/replication-couchdb/index.ts"],"sourcesContent":["/**\r\n * This plugin can be used to sync collections with a remote CouchDB endpoint.\r\n */\r\nimport {\r\n    ensureNotFalsy,\r\n    errorToPlainJson,\r\n    flatClone,\r\n    getFromMapOrThrow,\r\n    now,\r\n    promiseWait\r\n} from '../../plugins/utils/index.ts';\r\n\r\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\r\nimport type {\r\n    RxCollection,\r\n    ReplicationPullOptions,\r\n    ReplicationPushOptions,\r\n    RxReplicationWriteToMasterRow,\r\n    RxReplicationPullStreamItem,\r\n    CouchdbChangesResult,\r\n    CouchBulkDocResultRow,\r\n    CouchAllDocsResponse,\r\n    RxConflictHandler\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    RxReplicationState,\r\n    startReplicationOnLeaderShip\r\n} from '../replication/index.ts';\r\nimport {\r\n    addRxPlugin,\r\n    newRxError,\r\n    WithDeleted\r\n} from '../../index.ts';\r\n\r\nimport { Subject } from 'rxjs';\r\nimport type {\r\n    CouchDBCheckpointType,\r\n    FetchMethodType,\r\n    SyncOptionsCouchDB\r\n} from './couchdb-types.ts';\r\nimport {\r\n    couchDBDocToRxDocData,\r\n    mergeUrlQueryParams,\r\n    couchSwapPrimaryToId,\r\n    getDefaultFetch\r\n} from './couchdb-helper.ts';\r\nimport { awaitRetry } from '../replication/replication-helper.ts';\r\n\r\nexport * from './couchdb-helper.ts';\r\nexport * from './couchdb-types.ts';\r\n\r\nexport class RxCouchDBReplicationState<RxDocType> extends RxReplicationState<RxDocType, CouchDBCheckpointType> {\r\n    constructor(\r\n        public readonly url: string,\r\n        public fetch: FetchMethodType,\r\n        public readonly replicationIdentifier: string,\r\n        public readonly collection: RxCollection<RxDocType>,\r\n        public readonly pull?: ReplicationPullOptions<RxDocType, CouchDBCheckpointType>,\r\n        public readonly push?: ReplicationPushOptions<RxDocType>,\r\n        public readonly live: boolean = true,\r\n        public retryTime: number = 1000 * 5,\r\n        public autoStart: boolean = true\r\n    ) {\r\n        super(\r\n            replicationIdentifier,\r\n            collection,\r\n            '_deleted',\r\n            pull,\r\n            push,\r\n            live,\r\n            retryTime,\r\n            autoStart\r\n        );\r\n    }\r\n}\r\n\r\nexport function replicateCouchDB<RxDocType>(\r\n    options: SyncOptionsCouchDB<RxDocType>\r\n) {\r\n    const collection = options.collection;\r\n    const conflictHandler: RxConflictHandler<unknown> = collection.conflictHandler;\r\n    addRxPlugin(RxDBLeaderElectionPlugin);\r\n    const primaryPath = options.collection.schema.primaryPath;\r\n\r\n    if (!options.url.endsWith('/')) {\r\n        throw newRxError('RC_COUCHDB_1', {\r\n            args: {\r\n                collection: options.collection.name,\r\n                url: options.url\r\n            }\r\n        });\r\n    }\r\n\r\n    options = flatClone(options);\r\n    if (!options.url.endsWith('/')) {\r\n        options.url = options.url + '/';\r\n    }\r\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\r\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CouchDBCheckpointType>> = new Subject();\r\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CouchDBCheckpointType> | undefined;\r\n    if (options.pull) {\r\n        replicationPrimitivesPull = {\r\n            async handler(\r\n                lastPulledCheckpoint: CouchDBCheckpointType | undefined,\r\n                batchSize: number\r\n            ) {\r\n                /**\r\n                 * @link https://docs.couchdb.org/en/3.2.2-docs/api/database/changes.html\r\n                 */\r\n                const url = options.url + '_changes?' + mergeUrlQueryParams({\r\n                    style: 'all_docs',\r\n                    feed: 'normal',\r\n                    include_docs: true,\r\n                    since: lastPulledCheckpoint ? lastPulledCheckpoint.sequence : 0,\r\n                    heartbeat: options.pull && options.pull.heartbeat ? options.pull.heartbeat : 60000,\r\n                    limit: batchSize,\r\n                    seq_interval: batchSize\r\n                });\r\n\r\n                const response = await replicationState.fetch(url);\r\n                const jsonResponse: CouchdbChangesResult = await response.json();\r\n                if (!jsonResponse.results) {\r\n                    throw newRxError('RC_COUCHDB_2', {\r\n                        args: { jsonResponse }\r\n                    });\r\n                }\r\n                const documents: WithDeleted<RxDocType>[] = jsonResponse.results\r\n                    .map(row => couchDBDocToRxDocData(collection.schema.primaryPath, ensureNotFalsy(row.doc)));\r\n                return {\r\n                    documents,\r\n                    checkpoint: {\r\n                        sequence: jsonResponse.last_seq\r\n                    }\r\n                };\r\n            },\r\n            batchSize: ensureNotFalsy(options.pull).batchSize,\r\n            modifier: ensureNotFalsy(options.pull).modifier,\r\n            stream$: pullStream$.asObservable(),\r\n            initialCheckpoint: options.pull.initialCheckpoint\r\n        };\r\n    }\r\n\r\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\r\n    if (options.push) {\r\n        replicationPrimitivesPush = {\r\n            async handler(\r\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\r\n            ) {\r\n                const conflicts: WithDeleted<RxDocType>[] = [];\r\n                const pushRowsById = new Map<string, RxReplicationWriteToMasterRow<RxDocType>>();\r\n                rows.forEach(row => {\r\n                    const id = (row.newDocumentState as any)[primaryPath];\r\n                    pushRowsById.set(id, row);\r\n                });\r\n\r\n                /**\r\n                 * First get the current master state from the remote\r\n                 * to check for conflicts\r\n                 */\r\n                const docsByIdResponse = await replicationState.fetch(\r\n                    options.url + '_all_docs?' + mergeUrlQueryParams({}),\r\n                    {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'content-type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            keys: rows.map(row => (row.newDocumentState as any)[primaryPath]),\r\n                            include_docs: true,\r\n                            deleted: 'ok'\r\n                        })\r\n                    }\r\n                );\r\n                const docsByIdRows: CouchAllDocsResponse = await docsByIdResponse.json();\r\n                const nonConflictRows: typeof rows = [];\r\n                const remoteRevById = new Map<string, string>();\r\n                await Promise.all(\r\n                    docsByIdRows.rows.map(async (row) => {\r\n                        if (!row.doc) {\r\n                            nonConflictRows.push(getFromMapOrThrow(pushRowsById, row.key));\r\n                            return;\r\n                        }\r\n                        const realMasterState: WithDeleted<RxDocType> = couchDBDocToRxDocData(primaryPath, row.doc);\r\n                        const pushRow = getFromMapOrThrow(pushRowsById, row.id);\r\n\r\n                        if (\r\n                            pushRow.assumedMasterState &&\r\n                            conflictHandler.isEqual(realMasterState, pushRow.assumedMasterState, 'couchdb-push-1')\r\n                        ) {\r\n                            remoteRevById.set(row.id, row.doc._rev);\r\n                            nonConflictRows.push(pushRow);\r\n                        } else {\r\n                            conflicts.push(realMasterState);\r\n                        }\r\n                    })\r\n                );\r\n\r\n                /**\r\n                 * @link https://docs.couchdb.org/en/3.2.2-docs/api/database/bulk-api.html#db-bulk-docs\r\n                 */\r\n                const url = options.url + '_bulk_docs?' + mergeUrlQueryParams({});\r\n                const body = {\r\n                    docs: nonConflictRows.map(row => {\r\n                        const docId = (row.newDocumentState as any)[primaryPath];\r\n                        const sendDoc = flatClone(row.newDocumentState);\r\n                        if (remoteRevById.has(docId)) {\r\n                            (sendDoc as any)._rev = getFromMapOrThrow(remoteRevById, docId);\r\n                        }\r\n                        return couchSwapPrimaryToId(collection.schema.primaryPath, sendDoc);\r\n                    })\r\n                };\r\n\r\n                const response = await replicationState.fetch(\r\n                    url,\r\n                    {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'content-type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                );\r\n                const responseJson: CouchBulkDocResultRow[] = await response.json();\r\n\r\n                // get conflicting writes\r\n                const conflictAgainIds: string[] = [];\r\n                responseJson.forEach(writeResultRow => {\r\n                    const isConflict = writeResultRow.error === 'conflict';\r\n                    if (!writeResultRow.ok && !isConflict) {\r\n                        throw newRxError('SNH', { args: { writeResultRow } });\r\n                    }\r\n                    if (isConflict) {\r\n                        conflictAgainIds.push(writeResultRow.id);\r\n                    }\r\n                });\r\n\r\n                if (conflictAgainIds.length === 0) {\r\n                    return conflicts;\r\n                }\r\n\r\n                const getConflictDocsUrl = options.url + '_all_docs?' + mergeUrlQueryParams({\r\n                    include_docs: true,\r\n                    keys: JSON.stringify(conflictAgainIds)\r\n                });\r\n                const conflictResponse = await replicationState.fetch(getConflictDocsUrl);\r\n                const conflictResponseJson: CouchAllDocsResponse = await conflictResponse.json();\r\n                conflictResponseJson.rows.forEach(conflictAgainRow => {\r\n                    conflicts.push(couchDBDocToRxDocData(collection.schema.primaryPath, conflictAgainRow.doc));\r\n                });\r\n\r\n                return conflicts;\r\n            },\r\n            batchSize: options.push.batchSize,\r\n            modifier: options.push.modifier,\r\n            initialCheckpoint: options.push.initialCheckpoint\r\n        };\r\n    }\r\n\r\n    const replicationState = new RxCouchDBReplicationState<RxDocType>(\r\n        options.url,\r\n        options.fetch ? options.fetch : getDefaultFetch(),\r\n        options.replicationIdentifier,\r\n        collection,\r\n        replicationPrimitivesPull,\r\n        replicationPrimitivesPush,\r\n        options.live,\r\n        options.retryTime,\r\n        options.autoStart\r\n    );\r\n\r\n    /**\r\n     * Use long polling to get live changes for the pull.stream$\r\n     */\r\n    if (options.live && options.pull) {\r\n        const startBefore = replicationState.start.bind(replicationState);\r\n        replicationState.start = () => {\r\n            let since: string | number = 'now';\r\n            const batchSize = options.pull && options.pull.batchSize ? options.pull.batchSize : 20;\r\n\r\n            (async () => {\r\n                let lastRequestStartTime = now();\r\n                while (!replicationState.isStopped()) {\r\n                    const url = options.url + '_changes?' + mergeUrlQueryParams({\r\n                        style: 'all_docs',\r\n                        feed: 'longpoll',\r\n                        since,\r\n                        include_docs: true,\r\n                        heartbeat: options.pull && options.pull.heartbeat ? options.pull.heartbeat : 60000,\r\n                        limit: batchSize,\r\n                        seq_interval: batchSize\r\n                    });\r\n\r\n                    let jsonResponse: CouchdbChangesResult;\r\n                    try {\r\n                        lastRequestStartTime = now();\r\n                        jsonResponse = await (await replicationState.fetch(url)).json();\r\n                    } catch (err: any) {\r\n                        replicationState.subjects.error.next(\r\n                            newRxError('RC_STREAM', {\r\n                                args: { url },\r\n                                error: errorToPlainJson(err)\r\n                            })\r\n                        );\r\n\r\n                        if (lastRequestStartTime < (now() - replicationState.retryTime)) {\r\n                            /**\r\n                             * Last request start was long ago,\r\n                             * so we directly retry.\r\n                             * This mostly happens on timeouts\r\n                             * which are normal behavior for long polling requests.\r\n                             */\r\n                            await promiseWait(0);\r\n                        } else {\r\n                            // await next tick here otherwise we could go in to a 100% CPU blocking cycle.\r\n                            await awaitRetry(\r\n                                collection,\r\n                                replicationState.retryTime\r\n                            );\r\n                        }\r\n                        continue;\r\n                    }\r\n                    const documents: WithDeleted<RxDocType>[] = jsonResponse.results\r\n                        .map(row => couchDBDocToRxDocData(collection.schema.primaryPath, ensureNotFalsy(row.doc)));\r\n                    since = jsonResponse.last_seq;\r\n\r\n                    pullStream$.next({\r\n                        documents,\r\n                        checkpoint: {\r\n                            sequence: jsonResponse.last_seq\r\n                        }\r\n                    });\r\n                }\r\n            })();\r\n            return startBefore();\r\n        };\r\n    }\r\n\r\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\r\n\r\n    return replicationState;\r\n}\r\n"],"mappings":"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","ignoreList":[]}