{"version":3,"file":"storage-remote-types.js","names":[],"sources":["../../../../src/plugins/storage-remote/storage-remote-types.ts"],"sourcesContent":["import type { Observable } from 'rxjs';\r\nimport type {\r\n    MaybePromise,\r\n    PlainJsonError,\r\n    RxDatabase,\r\n    RxStorage,\r\n    RxStorageInstance,\r\n    RxStorageInstanceCreationParams\r\n} from '../../types/index.d.ts';\r\n\r\n\r\n\r\nexport type MessageFromRemote = {\r\n    connectionId: string;\r\n    answerTo: string; // id of the request\r\n    method: keyof RxStorageInstance<any, any, any> | 'create' | 'custom';\r\n    error?: PlainJsonError;\r\n    return?: any | string;\r\n};\r\n\r\nexport type MessageToRemote = {\r\n    connectionId: string;\r\n    /**\r\n     * Unique ID of the request\r\n     */\r\n    requestId: string;\r\n    method: keyof RxStorageInstance<any, any, any> | 'create' | 'custom';\r\n    /**\r\n     * We send the RxDB version to the remote\r\n     * to ensure we are communicating with an RxDB instance\r\n     * of the same version. This is to prevent bugs\r\n     * when people forget to rebuild their workers.\r\n     */\r\n    version: string;\r\n    params:\r\n    RxStorageInstanceCreationParams<any, any> | // used in the create call\r\n    any[] | // used to call RxStorageInstance methods\r\n    any; // used in custom requests\r\n};\r\n\r\n\r\n/**\r\n * A message channel represents a single\r\n * channel that is able to communicate with the remote.\r\n * For example a single websocket connection or WebWorker instance.\r\n * The storage must be able to open and close MessageChannels\r\n * according to the modes settings.\r\n */\r\nexport type RemoteMessageChannel = {\r\n    send(msg: MessageToRemote): void;\r\n    messages$: Observable<MessageFromRemote>;\r\n    close(): Promise<void>;\r\n};\r\n\r\nexport type RxStorageRemoteSettings = {\r\n    identifier: string;\r\n    /**\r\n     * There are different modes\r\n     * that determine how many message channels are used.\r\n     * These modes can have different performance patterns.\r\n     *\r\n     * [default='storage']\r\n     */\r\n    mode?:\r\n    // create exactly one RemoteMessageChannel and reuse that everywhere.\r\n    | 'one'\r\n    // storage: create one RemoteMessageChannel per call to getRxStorage...()\r\n    | 'storage'\r\n    // database: create one RemoteMessageChannel for each database\r\n    | 'database'\r\n    // collection: create one RemoteMessageChannel for each collection\r\n    | 'collection';\r\n    messageChannelCreator: () => Promise<RemoteMessageChannel>;\r\n};\r\n\r\nexport type RxStorageRemoteInternals = {\r\n    params: RxStorageInstanceCreationParams<any, any>;\r\n    connectionId: string;\r\n    messageChannel: RemoteMessageChannel;\r\n};\r\n\r\nexport type RxStorageRemoteExposeSettingsBase = {\r\n    send(msg: MessageFromRemote): void;\r\n    messages$: Observable<MessageToRemote>;\r\n    customRequestHandler?: CustomRequestHandler<any, any>;\r\n    /**\r\n     * Used in tests to simulate what happens if the remote\r\n     * was build on a different RxDB version.\r\n     */\r\n    fakeVersion?: string;\r\n};\r\n\r\nexport type RxStorageRemoteExposeSettingsRxDatabase = RxStorageRemoteExposeSettingsBase & {\r\n    /**\r\n     * The database which must be mapped to the remote storage server.\r\n     */\r\n    database: RxDatabase;\r\n};\r\n\r\nexport type RxStorageRemoteExposeSettingsRxStorage = RxStorageRemoteExposeSettingsBase & {\r\n    /**\r\n     * The original storage\r\n     * which actually stores the data.\r\n     */\r\n    storage: RxStorage<any, any>;\r\n};\r\n\r\nexport type RxStorageRemoteExposeSettings = RxStorageRemoteExposeSettingsRxDatabase | RxStorageRemoteExposeSettingsRxStorage;\r\n\r\nexport type RxStorageRemoteExposeType = {\r\n    instanceByFullName: Map<string, any>;\r\n};\r\n\r\n/**\r\n * If set, the clients can send RxDB-unrelated custom messages\r\n * to the remote storage and it will  answer them.\r\n */\r\nexport type CustomRequestHandler<In, Out> = (data: In) => MaybePromise<Out>;\r\n"],"mappings":"","ignoreList":[]}