{"version":3,"file":"types.js","names":[],"sources":["../../../../src/plugins/storage-remote-websocket/types.ts"],"sourcesContent":["import type {\r\n    WebsocketServerState\r\n} from '../replication-websocket/index.ts';\r\nimport type { ServerOptions, ClientOptions } from 'ws';\r\nimport type { RxDatabase, RxStorage } from '../../types/index.d.ts';\r\nimport type {\r\n    CustomRequestHandler,\r\n    RxStorageRemoteExposeType,\r\n    RxStorageRemoteSettings\r\n} from '../storage-remote/storage-remote-types.ts';\r\nimport { RxStorageRemote } from '../storage-remote/index.ts';\r\n\r\nexport type RxStorageRemoteWebsocketServerOptions = ServerOptions & {\r\n    storage?: RxStorage<any, any>;\r\n    database?: RxDatabase<any, any, any>;\r\n    customRequestHandler?: CustomRequestHandler<any, any>;\r\n    /**\r\n     * Used in tests to simulate what happens if the remote\r\n     * was build on a different RxDB version.\r\n     */\r\n    fakeVersion?: string;\r\n};\r\n\r\nexport type RxStorageRemoteWebsocketServerState = {\r\n    serverState: WebsocketServerState;\r\n    exposeState: RxStorageRemoteExposeType;\r\n};\r\n\r\nexport type RxStorageRemoteWebsocketClientOptions = ClientOptions & {\r\n    url: string;\r\n    mode: RxStorageRemoteSettings['mode'];\r\n};\r\n\r\nexport type RxStorageRemoteWebsocketClient = RxStorageRemote;\r\n"],"mappings":"","ignoreList":[]}