{"version":3,"file":"index.js","names":["appendToArray","asyncFilter","ensureNotFalsy","errorToPlainJson","flatClone","lastOfArray","toArray","doc","query","where","orderBy","limit","getDocs","onSnapshot","runTransaction","writeBatch","serverTimestamp","waitForPendingWrites","documentId","RxDBLeaderElectionPlugin","RxReplicationState","startReplicationOnLeaderShip","addRxPlugin","getSchemaByObjectPath","newRxError","Subject","firestoreRowToDocData","getContentByIds","isoStringToServerTimestamp","serverTimestampToIsoString","stripPrimaryKey","stripServerTimestampField","RxFirestoreReplicationState","_RxReplicationState","firestore","replicationIdentifierHash","collection","pull","push","live","retryTime","autoStart","_this","call","_inheritsLoose","replicateFirestore","options","pullStream$","replicationPrimitivesPull","waitForLeadership","serverTimestampField","primaryPath","schema","schemaPart","jsonSchema","includes","field","pullFilters","filter","undefined","pullQuery","handler","lastPulledCheckpoint","batchSize","newerQuery","sameTimeQuery","lastServerTimestamp","id","mustsReRun","useDocs","database","_tx","newerQueryResult","sameTimeQueryResult","Promise","all","metadata","hasPendingWrites","docs","missingAmount","length","additionalDocs","slice","x","checkpoint","documents","lastDoc","map","row","newCheckpoint","data","ret","modifier","stream$","asObservable","replicationPrimitivesPush","pushFilter","rows","newDocumentState","writeRowsById","docIds","docId","conflicts","getQuery","ids","docsInDbResult","docsInDbById","forEach","docDataInDb","batch","hasWrite","Object","entries","writeRow","docInDb","assumedMasterState","conflictHandler","isEqual","docRef","writeDocData","set","update","commit","replicationState","replicationIdentifier","startBefore","start","bind","cancelBefore","cancel","lastChangeQuery","unsubscribe","_querySnapshot","reSync","error","subjects","next"],"sources":["../../../../src/plugins/replication-firestore/index.ts"],"sourcesContent":["import {\r\n    appendToArray,\r\n    asyncFilter,\r\n    ensureNotFalsy,\r\n    errorToPlainJson,\r\n    flatClone,\r\n    lastOfArray,\r\n    toArray\r\n} from '../../plugins/utils/index.ts';\r\n\r\nimport {\r\n    doc,\r\n    query,\r\n    where,\r\n    orderBy,\r\n    limit,\r\n    getDocs,\r\n    onSnapshot,\r\n    runTransaction,\r\n    writeBatch,\r\n    serverTimestamp,\r\n    QueryDocumentSnapshot,\r\n    waitForPendingWrites,\r\n    documentId\r\n} from 'firebase/firestore';\r\n\r\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\r\nimport type {\r\n    RxCollection,\r\n    ReplicationPullOptions,\r\n    ReplicationPushOptions,\r\n    RxReplicationWriteToMasterRow,\r\n    RxReplicationPullStreamItem\r\n} from '../../types/index.d.ts';\r\nimport {\r\n    RxReplicationState,\r\n    startReplicationOnLeaderShip\r\n} from '../replication/index.ts';\r\nimport {\r\n    addRxPlugin,\r\n    ById,\r\n    getSchemaByObjectPath,\r\n    newRxError,\r\n    WithDeleted\r\n} from '../../index.ts';\r\n\r\nimport type {\r\n    FirestoreCheckpointType,\r\n    FirestoreOptions,\r\n    SyncOptionsFirestore\r\n} from './firestore-types.ts';\r\nimport { Subject } from 'rxjs';\r\nimport {\r\n    firestoreRowToDocData,\r\n    getContentByIds,\r\n    isoStringToServerTimestamp,\r\n    serverTimestampToIsoString,\r\n    stripPrimaryKey,\r\n    stripServerTimestampField\r\n} from './firestore-helper.ts';\r\n\r\nexport * from './firestore-helper.ts';\r\nexport * from './firestore-types.ts';\r\n\r\nexport class RxFirestoreReplicationState<RxDocType> extends RxReplicationState<RxDocType, FirestoreCheckpointType> {\r\n    constructor(\r\n        public readonly firestore: FirestoreOptions<RxDocType>,\r\n        public readonly replicationIdentifierHash: string,\r\n        public readonly collection: RxCollection<RxDocType>,\r\n        public readonly pull?: ReplicationPullOptions<RxDocType, FirestoreCheckpointType>,\r\n        public readonly push?: ReplicationPushOptions<RxDocType>,\r\n        public readonly live: boolean = true,\r\n        public retryTime: number = 1000 * 5,\r\n        public autoStart: boolean = true\r\n    ) {\r\n        super(\r\n            replicationIdentifierHash,\r\n            collection,\r\n            '_deleted',\r\n            pull,\r\n            push,\r\n            live,\r\n            retryTime,\r\n            autoStart\r\n        );\r\n    }\r\n}\r\n\r\nexport function replicateFirestore<RxDocType>(\r\n    options: SyncOptionsFirestore<RxDocType>\r\n): RxFirestoreReplicationState<RxDocType> {\r\n    const collection: RxCollection<RxDocType> = options.collection;\r\n    addRxPlugin(RxDBLeaderElectionPlugin);\r\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, FirestoreCheckpointType>> = new Subject();\r\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, FirestoreCheckpointType> | undefined;\r\n    options.live = typeof options.live === 'undefined' ? true : options.live;\r\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\r\n    const serverTimestampField = typeof options.serverTimestampField === 'undefined' ? 'serverTimestamp' : options.serverTimestampField;\r\n    options.serverTimestampField = serverTimestampField;\r\n    const primaryPath = collection.schema.primaryPath;\r\n\r\n    /**\r\n     * The serverTimestampField MUST NOT be part of the collections RxJsonSchema.\r\n     */\r\n    const schemaPart = getSchemaByObjectPath(collection.schema.jsonSchema, serverTimestampField);\r\n    if (\r\n        schemaPart ||\r\n        // also must not be nested.\r\n        serverTimestampField.includes('.')\r\n    ) {\r\n        throw newRxError('RC6', {\r\n            field: serverTimestampField,\r\n            schema: collection.schema.jsonSchema\r\n        });\r\n    }\r\n\r\n    const pullFilters = options.pull?.filter !== undefined\r\n        ? toArray(options.pull.filter)\r\n        : [];\r\n\r\n    const pullQuery = query(options.firestore.collection, ...pullFilters);\r\n\r\n    if (options.pull) {\r\n        replicationPrimitivesPull = {\r\n            async handler(\r\n                lastPulledCheckpoint: FirestoreCheckpointType | undefined,\r\n                batchSize: number\r\n            ) {\r\n                let newerQuery: ReturnType<typeof query>;\r\n                let sameTimeQuery: ReturnType<typeof query> | undefined;\r\n\r\n                if (lastPulledCheckpoint) {\r\n                    const lastServerTimestamp = isoStringToServerTimestamp(lastPulledCheckpoint.serverTimestamp);\r\n                    newerQuery = query(pullQuery,\r\n                        where(serverTimestampField, '>', lastServerTimestamp),\r\n                        orderBy(serverTimestampField, 'asc'),\r\n                        limit(batchSize)\r\n                    );\r\n                    sameTimeQuery = query(pullQuery,\r\n                        where(serverTimestampField, '==', lastServerTimestamp),\r\n                        where(documentId(), '>', lastPulledCheckpoint.id),\r\n                        orderBy(documentId(), 'asc'),\r\n                        limit(batchSize)\r\n                    );\r\n                } else {\r\n                    newerQuery = query(pullQuery,\r\n                        orderBy(serverTimestampField, 'asc'),\r\n                        limit(batchSize)\r\n                    );\r\n                }\r\n\r\n                let mustsReRun = true;\r\n                let useDocs: QueryDocumentSnapshot<RxDocType>[] = [];\r\n                while (mustsReRun) {\r\n                    /**\r\n                     * Local writes that have not been persisted to the server\r\n                     * are in pending state and do not have a correct serverTimestamp set.\r\n                     * We have to ensure we only use document states that are in sync with the server.\r\n                     * @link https://medium.com/firebase-developers/the-secrets-of-firestore-fieldvalue-servertimestamp-revealed-29dd7a38a82b\r\n                     */\r\n                    await waitForPendingWrites(options.firestore.database);\r\n                    await runTransaction(options.firestore.database, async (_tx) => {\r\n                        useDocs = [];\r\n                        const [\r\n                            newerQueryResult,\r\n                            sameTimeQueryResult\r\n                        ] = await Promise.all([\r\n                            getDocs(newerQuery),\r\n                            sameTimeQuery ? getDocs(sameTimeQuery) : undefined\r\n                        ]);\r\n\r\n                        if (\r\n                            newerQueryResult.metadata.hasPendingWrites ||\r\n                            (sameTimeQuery && ensureNotFalsy(sameTimeQueryResult).metadata.hasPendingWrites)\r\n                        ) {\r\n                            return;\r\n                        } else {\r\n                            mustsReRun = false;\r\n\r\n                            if (sameTimeQuery) {\r\n                                useDocs = ensureNotFalsy(sameTimeQueryResult).docs as any;\r\n                            }\r\n                            const missingAmount = batchSize - useDocs.length;\r\n                            if (missingAmount > 0) {\r\n                                const additionalDocs = newerQueryResult.docs.slice(0, missingAmount).filter(x => !!x);\r\n                                appendToArray(useDocs, additionalDocs);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (useDocs.length === 0) {\r\n                    return {\r\n                        checkpoint: lastPulledCheckpoint ?? null,\r\n                        documents: []\r\n                    };\r\n                }\r\n                const lastDoc = ensureNotFalsy(lastOfArray(useDocs));\r\n                const documents: WithDeleted<RxDocType>[] = useDocs\r\n                    .map(row => firestoreRowToDocData(\r\n                        serverTimestampField,\r\n                        primaryPath,\r\n                        row\r\n                    ));\r\n                const newCheckpoint: FirestoreCheckpointType = {\r\n                    id: lastDoc.id,\r\n                    serverTimestamp: serverTimestampToIsoString(serverTimestampField, lastDoc.data())\r\n                };\r\n                const ret = {\r\n                    documents: documents,\r\n                    checkpoint: newCheckpoint\r\n                };\r\n                return ret;\r\n            },\r\n            batchSize: ensureNotFalsy(options.pull).batchSize,\r\n            modifier: ensureNotFalsy(options.pull).modifier,\r\n            stream$: pullStream$.asObservable()\r\n        };\r\n    }\r\n\r\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\r\n    if (options.push) {\r\n        const pushFilter = options.push?.filter;\r\n        replicationPrimitivesPush = {\r\n            async handler(\r\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\r\n            ) {\r\n                if (pushFilter !== undefined) {\r\n                    rows = await asyncFilter(rows, (row) => pushFilter(row.newDocumentState));\r\n                }\r\n\r\n                const writeRowsById: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\r\n                const docIds: string[] = rows.map(row => {\r\n                    const docId = (row.newDocumentState as any)[primaryPath];\r\n                    writeRowsById[docId] = row;\r\n                    return docId;\r\n                });\r\n                await waitForPendingWrites(options.firestore.database);\r\n                let conflicts: WithDeleted<RxDocType>[] = [];\r\n\r\n                /**\r\n                 * Everything must run INSIDE of the transaction\r\n                 * because on tx-errors, firebase will re-run the transaction on some cases.\r\n                 * @link https://firebase.google.com/docs/firestore/manage-data/transactions#transaction_failure\r\n                 * @link https://firebase.google.com/docs/firestore/manage-data/transactions\r\n                 */\r\n                await runTransaction(options.firestore.database, async (_tx) => {\r\n                    conflicts = []; // reset in case the tx has re-run.\r\n                    /**\r\n                     * @link https://stackoverflow.com/a/48423626/3443137\r\n                     */\r\n\r\n                    const getQuery = (ids: string[]) => {\r\n                        return getDocs(\r\n                            query(\r\n                                options.firestore.collection,\r\n                                where(documentId(), 'in', ids)\r\n                            )\r\n                        );\r\n                    };\r\n\r\n                    const docsInDbResult = await getContentByIds<RxDocType>(docIds, getQuery);\r\n\r\n                    const docsInDbById: ById<RxDocType> = {};\r\n                    docsInDbResult.forEach(row => {\r\n                        const docDataInDb = stripServerTimestampField(serverTimestampField, row.data());\r\n                        const docId = row.id;\r\n                        (docDataInDb as any)[primaryPath] = docId;\r\n                        docsInDbById[docId] = docDataInDb;\r\n                    });\r\n\r\n                    /**\r\n                     * @link https://firebase.google.com/docs/firestore/manage-data/transactions#batched-writes\r\n                     */\r\n                    const batch = writeBatch(options.firestore.database);\r\n                    let hasWrite = false;\r\n                    await Promise.all(\r\n                        Object.entries(writeRowsById).map(async ([docId, writeRow]) => {\r\n                            const docInDb: RxDocType | undefined = docsInDbById[docId];\r\n\r\n                            if (\r\n                                docInDb &&\r\n                                (\r\n                                    !writeRow.assumedMasterState ||\r\n                                    collection.conflictHandler.isEqual(docInDb as any, writeRow.assumedMasterState, 'replication-firestore-push') === false\r\n                                )\r\n                            ) {\r\n                                // conflict\r\n                                conflicts.push(docInDb as any);\r\n                            } else {\r\n                                // no conflict\r\n                                hasWrite = true;\r\n                                const docRef = doc(options.firestore.collection, docId);\r\n                                const writeDocData = flatClone(writeRow.newDocumentState);\r\n                                (writeDocData as any)[serverTimestampField] = serverTimestamp();\r\n                                if (!docInDb) {\r\n                                    // insert\r\n                                    batch.set(docRef, stripPrimaryKey(primaryPath, writeDocData));\r\n                                } else {\r\n                                    // update\r\n                                    batch.update(docRef, stripPrimaryKey(primaryPath, writeDocData));\r\n                                }\r\n                            }\r\n                        })\r\n                    );\r\n\r\n                    if (hasWrite) {\r\n                        await batch.commit();\r\n                    }\r\n                });\r\n                await waitForPendingWrites(options.firestore.database);\r\n                return conflicts;\r\n            },\r\n            batchSize: options.push.batchSize,\r\n            modifier: options.push.modifier\r\n        };\r\n    }\r\n\r\n\r\n    const replicationState = new RxFirestoreReplicationState<RxDocType>(\r\n        options.firestore,\r\n        options.replicationIdentifier,\r\n        collection,\r\n        replicationPrimitivesPull,\r\n        replicationPrimitivesPush,\r\n        options.live,\r\n        options.retryTime,\r\n        options.autoStart\r\n    );\r\n\r\n    /**\r\n     * Use long polling to get live changes for the pull.stream$\r\n     */\r\n    if (options.live && options.pull) {\r\n        const startBefore = replicationState.start.bind(replicationState);\r\n        const cancelBefore = replicationState.cancel.bind(replicationState);\r\n        replicationState.start = () => {\r\n            const lastChangeQuery = query(\r\n                pullQuery,\r\n                orderBy(serverTimestampField, 'desc'),\r\n                limit(1)\r\n            );\r\n            const unsubscribe = onSnapshot(\r\n                lastChangeQuery,\r\n                (_querySnapshot) => {\r\n                    /**\r\n                     * There is no good way to observe the event stream in firestore.\r\n                     * So instead we listen to any write to the collection\r\n                     * and then emit a 'RESYNC' flag.\r\n                     */\r\n                    replicationState.reSync();\r\n                },\r\n                (error) => {\r\n                    replicationState.subjects.error.next(\r\n                        newRxError('RC_STREAM', { error: errorToPlainJson(error) })\r\n                    );\r\n                }\r\n            );\r\n            replicationState.cancel = () => {\r\n                unsubscribe();\r\n                return cancelBefore();\r\n            };\r\n            return startBefore();\r\n        };\r\n    }\r\n\r\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\r\n\r\n    return replicationState;\r\n}\r\n"],"mappings":"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","ignoreList":[]}