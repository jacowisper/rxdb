{"version":3,"file":"foundationdb-query.js","names":["changeIndexableStringByOneQuantum","getStartIndexStringFromLowerBound","getStartIndexStringFromUpperBound","ensureNotFalsy","lastOfArray","getFoundationDBIndexName","getQueryMatcher","getSortComparator","queryFoundationDB","instance","preparedQuery","queryPlan","query","skip","limit","Infinity","skipPlusLimit","queryPlanFields","index","mustManuallyResort","sortSatisfiedByIndex","queryMatcher","selectorSatisfiedByIndex","schema","dbs","internals","dbsPromise","indexForName","slice","indexName","indexDB","indexes","db","lowerBound","startKeys","lowerBoundString","upperBound","endKeys","upperBoundString","result","root","doTransaction","tx","innerResult","indexTx","at","subspace","mainTx","main","docId","get","docData","push","inclusiveStart","inclusiveEnd","range","getRangeBatch","done","next","rows","value","firstRow","shift","lastRow","pop","docIds","map","row","docsData","Promise","all","forEach","length","return","sortComparator","sort","documents"],"sources":["../../../../src/plugins/storage-foundationdb/foundationdb-query.ts"],"sourcesContent":["import {\r\n    changeIndexableStringByOneQuantum,\r\n    getStartIndexStringFromLowerBound,\r\n    getStartIndexStringFromUpperBound\r\n} from '../../custom-index.ts';\r\nimport type {\r\n    PreparedQuery,\r\n    QueryMatcher,\r\n    RxDocumentData,\r\n    RxStorageQueryResult\r\n} from '../../types/index.d.ts';\r\nimport { ensureNotFalsy, lastOfArray } from '../../plugins/utils/index.ts';\r\nimport { getFoundationDBIndexName } from './foundationdb-helpers.ts';\r\nimport { RxStorageInstanceFoundationDB } from './rx-storage-instance-foundationdb.ts';\r\nimport { getQueryMatcher, getSortComparator } from '../../rx-query-helper.ts';\r\n\r\nexport async function queryFoundationDB<RxDocType>(\r\n    instance: RxStorageInstanceFoundationDB<RxDocType>,\r\n    preparedQuery: PreparedQuery<RxDocType>\r\n): Promise<RxStorageQueryResult<RxDocType>> {\r\n    const queryPlan = preparedQuery.queryPlan;\r\n    const query = preparedQuery.query;\r\n    const skip = query.skip ? query.skip : 0;\r\n    const limit = query.limit ? query.limit : Infinity;\r\n    const skipPlusLimit = skip + limit;\r\n    const queryPlanFields: string[] = queryPlan.index;\r\n    const mustManuallyResort = !queryPlan.sortSatisfiedByIndex;\r\n\r\n\r\n    let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\r\n    if (!queryPlan.selectorSatisfiedByIndex) {\r\n        queryMatcher = getQueryMatcher(\r\n            instance.schema,\r\n            preparedQuery.query\r\n        );\r\n    }\r\n\r\n    const dbs = await instance.internals.dbsPromise;\r\n\r\n\r\n    const indexForName = queryPlanFields.slice(0);\r\n    const indexName = getFoundationDBIndexName(indexForName);\r\n    const indexDB = ensureNotFalsy(dbs.indexes[indexName]).db;\r\n\r\n    let lowerBound: any[] = queryPlan.startKeys;\r\n    let lowerBoundString = getStartIndexStringFromLowerBound(\r\n        instance.schema,\r\n        indexForName,\r\n        lowerBound\r\n    );\r\n\r\n    let upperBound: any[] = queryPlan.endKeys;\r\n    let upperBoundString = getStartIndexStringFromUpperBound(\r\n        instance.schema,\r\n        indexForName,\r\n        upperBound\r\n    );\r\n    let result: RxDocumentData<RxDocType>[] = await dbs.root.doTransaction(async (tx: any) => {\r\n        const innerResult: RxDocumentData<RxDocType>[] = [];\r\n        const indexTx = tx.at(indexDB.subspace);\r\n        const mainTx = tx.at(dbs.main.subspace);\r\n\r\n\r\n        /**\r\n         * TODO for whatever reason the keySelectors like firstGreaterThan etc.\r\n         * do not work properly. So we have to hack here to find the correct\r\n         * document in case lowerBoundString===upperBoundString.\r\n         * This likely must be fixed in the foundationdb library.\r\n         * When it is fixed, we do not need this if-case and instead\r\n         * can rely on .getRangeBatch() in all cases.\r\n         */\r\n        if (lowerBoundString === upperBoundString) {\r\n            const docId: string = await indexTx.get(lowerBoundString);\r\n            if (docId) {\r\n                const docData = await mainTx.get(docId);\r\n                if (!queryMatcher || queryMatcher(docData)) {\r\n                    innerResult.push(docData);\r\n                }\r\n            }\r\n            return innerResult;\r\n        }\r\n\r\n        if (!queryPlan.inclusiveStart) {\r\n            lowerBoundString = changeIndexableStringByOneQuantum(lowerBoundString, 1);\r\n        }\r\n        if (queryPlan.inclusiveEnd) {\r\n            upperBoundString = changeIndexableStringByOneQuantum(upperBoundString, +1);\r\n        }\r\n\r\n        const range = indexTx.getRangeBatch(\r\n            lowerBoundString,\r\n            upperBoundString,\r\n            // queryPlan.inclusiveStart ? keySelector.firstGreaterThan(lowerBoundString) : keySelector.firstGreaterOrEqual(lowerBoundString),\r\n            // queryPlan.inclusiveEnd ? keySelector.lastLessOrEqual(upperBoundString) : keySelector.lastLessThan(upperBoundString),\r\n            {\r\n                // TODO these options seem to be broken in the foundationdb node bindings\r\n                // limit: instance.settings.batchSize,\r\n                // streamingMode: StreamingMode.Exact\r\n            }\r\n        );\r\n        let done = false;\r\n        while (!done) {\r\n            const next = await range.next();\r\n            if (next.done) {\r\n                done = true;\r\n                break;\r\n            }\r\n            const rows: [string, string] = next.value;\r\n\r\n            if (!queryPlan.inclusiveStart) {\r\n                const firstRow = rows[0];\r\n                if (\r\n                    firstRow &&\r\n                    firstRow[0] === lowerBoundString\r\n                ) {\r\n                    rows.shift();\r\n                }\r\n            }\r\n            if (!queryPlan.inclusiveEnd) {\r\n                const lastRow = lastOfArray(rows);\r\n                if (\r\n                    lastRow &&\r\n                    lastRow[0] === upperBoundString\r\n                ) {\r\n                    rows.pop();\r\n                }\r\n            }\r\n\r\n            const docIds = rows.map(row => row[1]);\r\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(docIds.map((docId: string) => mainTx.get(docId)));\r\n\r\n            docsData.forEach((docData) => {\r\n                if (!done) {\r\n                    if (!queryMatcher || queryMatcher(docData)) {\r\n                        innerResult.push(docData);\r\n                    }\r\n                }\r\n                if (\r\n                    !mustManuallyResort &&\r\n                    innerResult.length === skipPlusLimit\r\n                ) {\r\n                    done = true;\r\n                    range.return();\r\n                }\r\n            });\r\n        }\r\n        return innerResult;\r\n    });\r\n    if (mustManuallyResort) {\r\n        const sortComparator = getSortComparator(instance.schema, preparedQuery.query);\r\n        result = result.sort(sortComparator);\r\n    }\r\n\r\n    // apply skip and limit boundaries.\r\n    result = result.slice(skip, skipPlusLimit);\r\n\r\n    return {\r\n        documents: result\r\n    };\r\n}\r\n"],"mappings":"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","ignoreList":[]}