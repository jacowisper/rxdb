{"version":3,"file":"check-migration-strategies.js","names":["newRxTypeError","newRxError","getPreviousVersions","checkMigrationStrategies","schema","migrationStrategies","Array","isArray","previousVersions","length","Object","keys","have","should","map","vNr","v","s","filter","strategy","forEach","version","type"],"sources":["../../../../src/plugins/dev-mode/check-migration-strategies.ts"],"sourcesContent":["import type { RxJsonSchema, NumberFunctionMap } from '../../types/index.d.ts';\r\nimport { newRxTypeError, newRxError } from '../../rx-error.ts';\r\nimport { getPreviousVersions } from '../../rx-schema.ts';\r\n\r\n\r\n/**\r\n * checks if the migrationStrategies are ok, throws if not\r\n * @throws {Error|TypeError} if not ok\r\n */\r\nexport function checkMigrationStrategies(\r\n    schema: RxJsonSchema<any>,\r\n    migrationStrategies: NumberFunctionMap\r\n): boolean {\r\n    // migrationStrategies must be object not array\r\n    if (\r\n        typeof migrationStrategies !== 'object' ||\r\n        Array.isArray(migrationStrategies)\r\n    ) {\r\n        throw newRxTypeError('COL11', {\r\n            schema\r\n        });\r\n    }\r\n\r\n    const previousVersions = getPreviousVersions(schema);\r\n\r\n    // for every previousVersion there must be strategy\r\n    if (\r\n        previousVersions.length !== Object\r\n            .keys(migrationStrategies).length\r\n    ) {\r\n        throw newRxError('COL12', {\r\n            have: Object.keys(migrationStrategies),\r\n            should: previousVersions\r\n        });\r\n    }\r\n\r\n    // every strategy must have number as property and be a function\r\n    previousVersions\r\n        .map(vNr => ({\r\n            v: vNr,\r\n            s: migrationStrategies[(vNr + 1)]\r\n        }))\r\n        .filter(strategy => typeof strategy.s !== 'function')\r\n        .forEach(strategy => {\r\n            throw newRxTypeError('COL13', {\r\n                version: strategy.v,\r\n                type: typeof strategy,\r\n                schema\r\n            });\r\n        });\r\n\r\n    return true;\r\n}\r\n"],"mappings":"AACA,SAASA,cAAc,EAAEC,UAAU,QAAQ,mBAAmB;AAC9D,SAASC,mBAAmB,QAAQ,oBAAoB;;AAGxD;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CACpCC,MAAyB,EACzBC,mBAAsC,EAC/B;EACP;EACA,IACI,OAAOA,mBAAmB,KAAK,QAAQ,IACvCC,KAAK,CAACC,OAAO,CAACF,mBAAmB,CAAC,EACpC;IACE,MAAML,cAAc,CAAC,OAAO,EAAE;MAC1BI;IACJ,CAAC,CAAC;EACN;EAEA,IAAMI,gBAAgB,GAAGN,mBAAmB,CAACE,MAAM,CAAC;;EAEpD;EACA,IACII,gBAAgB,CAACC,MAAM,KAAKC,MAAM,CAC7BC,IAAI,CAACN,mBAAmB,CAAC,CAACI,MAAM,EACvC;IACE,MAAMR,UAAU,CAAC,OAAO,EAAE;MACtBW,IAAI,EAAEF,MAAM,CAACC,IAAI,CAACN,mBAAmB,CAAC;MACtCQ,MAAM,EAAEL;IACZ,CAAC,CAAC;EACN;;EAEA;EACAA,gBAAgB,CACXM,GAAG,CAACC,GAAG,KAAK;IACTC,CAAC,EAAED,GAAG;IACNE,CAAC,EAAEZ,mBAAmB,CAAEU,GAAG,GAAG,CAAC;EACnC,CAAC,CAAC,CAAC,CACFG,MAAM,CAACC,QAAQ,IAAI,OAAOA,QAAQ,CAACF,CAAC,KAAK,UAAU,CAAC,CACpDG,OAAO,CAACD,QAAQ,IAAI;IACjB,MAAMnB,cAAc,CAAC,OAAO,EAAE;MAC1BqB,OAAO,EAAEF,QAAQ,CAACH,CAAC;MACnBM,IAAI,EAAE,OAAOH,QAAQ;MACrBf;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;EAEN,OAAO,IAAI;AACf","ignoreList":[]}