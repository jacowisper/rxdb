{"version":3,"file":"utils-document.js","names":["flatClone","RX_META_LWT_MINIMUM","getDefaultRxDocumentMeta","lwt","getDefaultRevision","stripMetaDataFromDocument","docData","Object","assign","_meta","undefined","_deleted","_rev","areRxDocumentArraysEqual","primaryPath","ar1","ar2","length","i","len","row1","row2","getSortDocumentsByLastWriteTimeComparator","a","b","sortDocumentsByLastWriteTime","docs","sort","toWithDeleted","_attachments"],"sources":["../../../../src/plugins/utils/utils-document.ts"],"sourcesContent":["import type {\r\n    DeepReadonly,\r\n    RxDocumentData,\r\n    RxDocumentMeta,\r\n    StringKeys,\r\n    WithDeleted,\r\n    WithDeletedAndAttachments\r\n} from '../../types/index.d.ts';\r\nimport { flatClone } from './utils-object.ts';\r\n/**\r\n * We use 1 as minimum so that the value is never falsy.\r\n * This const is used in several places because querying\r\n * with a value lower then the minimum could give false results.\r\n */\r\nexport const RX_META_LWT_MINIMUM = 1;\r\n\r\nexport function getDefaultRxDocumentMeta(): RxDocumentMeta {\r\n    return {\r\n        /**\r\n         * Set this to 1 to not waste performance\r\n         * while calling new Date()..\r\n         * The storage wrappers will anyway update\r\n         * the lastWrite time while calling transformDocumentDataFromRxDBToRxStorage()\r\n         */\r\n        lwt: RX_META_LWT_MINIMUM\r\n    };\r\n}\r\n\r\n/**\r\n * Returns a revision that is not valid.\r\n * Use this to have correct typings\r\n * while the storage wrapper anyway will overwrite the revision.\r\n */\r\nexport function getDefaultRevision(): string {\r\n    /**\r\n     * Use a non-valid revision format,\r\n     * to ensure that the RxStorage will throw\r\n     * when the revision is not replaced downstream.\r\n     */\r\n    return '';\r\n}\r\n\r\n\r\nexport function stripMetaDataFromDocument<RxDocType>(docData: RxDocumentData<RxDocType>): RxDocType {\r\n    return Object.assign({}, docData, {\r\n        _meta: undefined,\r\n        _deleted: undefined,\r\n        _rev: undefined\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Faster way to check the equality of document lists\r\n * compared to doing a deep-equal.\r\n * Here we only check the ids and revisions.\r\n */\r\nexport function areRxDocumentArraysEqual<RxDocType>(\r\n    primaryPath: StringKeys<RxDocumentData<RxDocType>>,\r\n    ar1: RxDocumentData<RxDocType>[],\r\n    ar2: RxDocumentData<RxDocType>[]\r\n): boolean {\r\n    if (ar1.length !== ar2.length) {\r\n        return false;\r\n    }\r\n    let i = 0;\r\n    const len = ar1.length;\r\n    while (i < len) {\r\n        const row1 = ar1[i];\r\n        const row2 = ar2[i];\r\n        i++;\r\n\r\n        if (\r\n            row1._rev !== row2._rev ||\r\n            row1[primaryPath] !== row2[primaryPath]\r\n        ) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n\r\nexport function getSortDocumentsByLastWriteTimeComparator<RxDocType>(primaryPath: string) {\r\n    return (a: RxDocumentData<RxDocType>, b: RxDocumentData<RxDocType>) => {\r\n        if (a._meta.lwt === b._meta.lwt) {\r\n            if ((b as any)[primaryPath] < (a as any)[primaryPath]) {\r\n                return 1;\r\n            } else {\r\n                return -1;\r\n            }\r\n        } else {\r\n            return a._meta.lwt - b._meta.lwt;\r\n        }\r\n    };\r\n}\r\nexport function sortDocumentsByLastWriteTime<RxDocType>(\r\n    primaryPath: string,\r\n    docs: RxDocumentData<RxDocType>[]\r\n): RxDocumentData<RxDocType>[] {\r\n    return docs.sort(getSortDocumentsByLastWriteTimeComparator(primaryPath));\r\n}\r\n\r\ntype AnyDocFormat<RxDocType> = RxDocType | WithDeleted<RxDocType> | RxDocumentData<RxDocType> | WithDeletedAndAttachments<RxDocType>;\r\nexport function toWithDeleted<RxDocType>(\r\n    docData: AnyDocFormat<RxDocType> | DeepReadonly<AnyDocFormat<RxDocType>>\r\n): WithDeleted<RxDocType> {\r\n    docData = flatClone(docData);\r\n    (docData as any)._deleted = !!(docData as any)._deleted;\r\n    return Object.assign(docData as any, {\r\n        _attachments: undefined,\r\n        _meta: undefined,\r\n        _rev: undefined\r\n    }) as any;\r\n}\r\n"],"mappings":"AAQA,SAASA,SAAS,QAAQ,mBAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,mBAAmB,GAAG,CAAC;AAEpC,OAAO,SAASC,wBAAwBA,CAAA,EAAmB;EACvD,OAAO;IACH;AACR;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAEF;EACT,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,kBAAkBA,CAAA,EAAW;EACzC;AACJ;AACA;AACA;AACA;EACI,OAAO,EAAE;AACb;AAGA,OAAO,SAASC,yBAAyBA,CAAYC,OAAkC,EAAa;EAChG,OAAOC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,OAAO,EAAE;IAC9BG,KAAK,EAAEC,SAAS;IAChBC,QAAQ,EAAED,SAAS;IACnBE,IAAI,EAAEF;EACV,CAAC,CAAC;AACN;;AAGA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,wBAAwBA,CACpCC,WAAkD,EAClDC,GAAgC,EAChCC,GAAgC,EACzB;EACP,IAAID,GAAG,CAACE,MAAM,KAAKD,GAAG,CAACC,MAAM,EAAE;IAC3B,OAAO,KAAK;EAChB;EACA,IAAIC,CAAC,GAAG,CAAC;EACT,IAAMC,GAAG,GAAGJ,GAAG,CAACE,MAAM;EACtB,OAAOC,CAAC,GAAGC,GAAG,EAAE;IACZ,IAAMC,IAAI,GAAGL,GAAG,CAACG,CAAC,CAAC;IACnB,IAAMG,IAAI,GAAGL,GAAG,CAACE,CAAC,CAAC;IACnBA,CAAC,EAAE;IAEH,IACIE,IAAI,CAACR,IAAI,KAAKS,IAAI,CAACT,IAAI,IACvBQ,IAAI,CAACN,WAAW,CAAC,KAAKO,IAAI,CAACP,WAAW,CAAC,EACzC;MACE,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf;AAIA,OAAO,SAASQ,yCAAyCA,CAAYR,WAAmB,EAAE;EACtF,OAAO,CAACS,CAA4B,EAAEC,CAA4B,KAAK;IACnE,IAAID,CAAC,CAACd,KAAK,CAACN,GAAG,KAAKqB,CAAC,CAACf,KAAK,CAACN,GAAG,EAAE;MAC7B,IAAKqB,CAAC,CAASV,WAAW,CAAC,GAAIS,CAAC,CAAST,WAAW,CAAC,EAAE;QACnD,OAAO,CAAC;MACZ,CAAC,MAAM;QACH,OAAO,CAAC,CAAC;MACb;IACJ,CAAC,MAAM;MACH,OAAOS,CAAC,CAACd,KAAK,CAACN,GAAG,GAAGqB,CAAC,CAACf,KAAK,CAACN,GAAG;IACpC;EACJ,CAAC;AACL;AACA,OAAO,SAASsB,4BAA4BA,CACxCX,WAAmB,EACnBY,IAAiC,EACN;EAC3B,OAAOA,IAAI,CAACC,IAAI,CAACL,yCAAyC,CAACR,WAAW,CAAC,CAAC;AAC5E;AAGA,OAAO,SAASc,aAAaA,CACzBtB,OAAwE,EAClD;EACtBA,OAAO,GAAGN,SAAS,CAACM,OAAO,CAAC;EAC3BA,OAAO,CAASK,QAAQ,GAAG,CAAC,CAAEL,OAAO,CAASK,QAAQ;EACvD,OAAOJ,MAAM,CAACC,MAAM,CAACF,OAAO,EAAS;IACjCuB,YAAY,EAAEnB,SAAS;IACvBD,KAAK,EAAEC,SAAS;IAChBE,IAAI,EAAEF;EACV,CAAC,CAAC;AACN","ignoreList":[]}