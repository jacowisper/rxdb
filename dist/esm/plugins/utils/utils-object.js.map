{"version":3,"file":"utils-object.js","names":["deepFreeze","o","Object","freeze","getOwnPropertyNames","forEach","prop","prototype","hasOwnProperty","call","isFrozen","objectPathMonad","objectPath","split","splitLength","length","obj","currentVal","i","subPath","getFromObjectOrThrow","key","val","Error","flattenObject","ob","toReturn","flatObject","x","flatClone","assign","firstPropertyNameOfObject","keys","firstPropertyValueOfObject","sortObject","noArraySort","Array","isArray","sort","a","b","localeCompare","map","out","deepClone","src","ret","dest","clone","overwriteGetterForCaching","getterName","value","defineProperty","get","hasDeepProperty","property","has","find","item","findUndefinedPath","parentPath","currentPath","result"],"sources":["../../../../src/plugins/utils/utils-object.ts"],"sourcesContent":["import type {\r\n    DeepReadonlyObject\r\n} from '../../types/index.d.ts';\r\n\r\nexport function deepFreeze<T>(o: T): T {\r\n    Object.freeze(o);\r\n    Object.getOwnPropertyNames(o).forEach(function (prop) {\r\n        if (\r\n            Object.prototype.hasOwnProperty.call(o, prop) &&\r\n            (o as any)[prop] !== null &&\r\n            (\r\n                typeof (o as any)[prop] === 'object'\r\n                ||\r\n                typeof (o as any)[prop] === 'function'\r\n            ) &&\r\n            !Object.isFrozen((o as any)[prop])\r\n        ) {\r\n            deepFreeze((o as any)[prop]);\r\n        }\r\n    });\r\n    return o;\r\n}\r\n\r\n\r\n\r\n/**\r\n * To get specific nested path values from objects,\r\n * RxDB normally uses the 'dot-prop' npm module.\r\n * But when performance is really relevant, this is not fast enough.\r\n * Instead we use a monad that can prepare some stuff up front\r\n * and we can reuse the generated function.\r\n */\r\nexport type ObjectPathMonadFunction<T, R = any> = (obj: T) => R;\r\nexport function objectPathMonad<T, R = any>(objectPath: string): ObjectPathMonadFunction<T, R> {\r\n    const split = objectPath.split('.');\r\n\r\n    // reuse this variable for better performance.\r\n    const splitLength = split.length;\r\n\r\n    /**\r\n     * Performance shortcut,\r\n     * if no nested path is used,\r\n     * directly return the field of the object.\r\n     */\r\n    if (splitLength === 1) {\r\n        return (obj: T) => (obj as any)[objectPath];\r\n    }\r\n\r\n\r\n    return (obj: T) => {\r\n        let currentVal: any = obj;\r\n        for (let i = 0; i < splitLength; ++i) {\r\n            const subPath = split[i];\r\n            currentVal = currentVal[subPath];\r\n            if (typeof currentVal === 'undefined') {\r\n                return currentVal;\r\n            }\r\n        }\r\n        return currentVal;\r\n    };\r\n}\r\n\r\n\r\nexport function getFromObjectOrThrow<V>(\r\n    obj: { [k: string]: V; },\r\n    key: string\r\n): V {\r\n    const val = obj[key];\r\n    if (!val) {\r\n        throw new Error('missing value from object ' + key);\r\n    }\r\n    return val;\r\n}\r\n\r\n/**\r\n * returns a flattened object\r\n * @link https://gist.github.com/penguinboy/762197\r\n */\r\nexport function flattenObject(ob: any) {\r\n    const toReturn: any = {};\r\n\r\n    for (const i in ob) {\r\n        if (!Object.prototype.hasOwnProperty.call(ob, i)) continue;\r\n        if ((typeof ob[i]) === 'object') {\r\n            const flatObject = flattenObject(ob[i]);\r\n            for (const x in flatObject) {\r\n                if (!Object.prototype.hasOwnProperty.call(flatObject, x)) continue;\r\n                toReturn[i + '.' + x] = flatObject[x];\r\n            }\r\n        } else {\r\n            toReturn[i] = ob[i];\r\n        }\r\n    }\r\n    return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * does a flat copy on the objects,\r\n * is about 3 times faster then using deepClone\r\n * @link https://jsperf.com/object-rest-spread-vs-clone/2\r\n */\r\nexport function flatClone<T>(obj: T | DeepReadonlyObject<T> | Readonly<T>): T {\r\n    return Object.assign({}, obj) as any;\r\n}\r\n\r\n/**\r\n * @link https://stackoverflow.com/a/11509718/3443137\r\n */\r\nexport function firstPropertyNameOfObject(obj: any): string {\r\n    return Object.keys(obj)[0];\r\n}\r\nexport function firstPropertyValueOfObject<T>(obj: { [k: string]: T; }): T {\r\n    const key = Object.keys(obj)[0];\r\n    return obj[key];\r\n}\r\n\r\n\r\n/**\r\n * deep-sort an object so its attributes are in lexical order.\r\n * Also sorts the arrays inside of the object if no-array-sort not set\r\n */\r\nexport function sortObject(obj: any, noArraySort = false): any {\r\n    if (!obj) return obj; // do not sort null, false or undefined\r\n\r\n    // array\r\n    if (!noArraySort && Array.isArray(obj)) {\r\n        return obj\r\n            .sort((a, b) => {\r\n                if (typeof a === 'string' && typeof b === 'string')\r\n                    return a.localeCompare(b);\r\n\r\n                if (typeof a === 'object') return 1;\r\n                else return -1;\r\n            })\r\n            .map(i => sortObject(i, noArraySort));\r\n    }\r\n\r\n    // object\r\n    // array is also of type object\r\n    if (typeof obj === 'object' && !Array.isArray(obj)) {\r\n        const out: any = {};\r\n        Object.keys(obj)\r\n            .sort((a, b) => a.localeCompare(b))\r\n            .forEach(key => {\r\n                out[key] = sortObject(obj[key], noArraySort);\r\n            });\r\n        return out;\r\n    }\r\n\r\n    // everything else\r\n    return obj;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Deep clone a plain json object.\r\n * Does not work with recursive stuff\r\n * or non-plain-json.\r\n * IMPORTANT: Performance of this is very important,\r\n * do not change it without running performance tests!\r\n *\r\n * @link https://github.com/zxdong262/deep-copy/blob/master/src/index.ts\r\n */\r\nfunction deepClone<T>(src: T | DeepReadonlyObject<T>): T {\r\n    if (!src) {\r\n        return src;\r\n    }\r\n    if (src === null || typeof (src) !== 'object') {\r\n        return src;\r\n    }\r\n    if (Array.isArray(src)) {\r\n        const ret = new Array(src.length);\r\n        let i = ret.length;\r\n        while (i--) {\r\n            ret[i] = deepClone(src[i]);\r\n        }\r\n        return ret as any;\r\n    }\r\n    const dest: any = {};\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const key in src) {\r\n        dest[key] = deepClone(src[key]);\r\n    }\r\n    return dest;\r\n}\r\nexport const clone = deepClone;\r\n\r\n\r\n\r\n/**\r\n * overwrites the getter with the actual value\r\n * Mostly used for caching stuff on the first run\r\n */\r\nexport function overwriteGetterForCaching<ValueType = any>(\r\n    obj: any,\r\n    getterName: string,\r\n    value: ValueType\r\n): ValueType {\r\n    Object.defineProperty(obj, getterName, {\r\n        get: function () {\r\n            return value;\r\n        }\r\n    });\r\n    return value;\r\n}\r\n\r\n\r\nexport function hasDeepProperty(obj: any, property: string): boolean {\r\n    if (obj.hasOwnProperty(property)) {\r\n        return true;\r\n    }\r\n\r\n    if (Array.isArray(obj)) {\r\n        const has = !!obj.find(item => hasDeepProperty(item, property));\r\n        return has;\r\n    }\r\n\r\n    // Recursively check for property in nested objects\r\n    for (const key in obj) {\r\n        if (typeof obj[key] === 'object' && obj[key] !== null) {\r\n            if (hasDeepProperty(obj[key], property)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Return false if 'foobar' is not found at any level\r\n    return false;\r\n}\r\n\r\n\r\n/**\r\n * Deeply checks if an object contains any property\r\n * with the value of undefined\r\n * If yes, returns the path to it.\r\n */\r\nexport function findUndefinedPath(obj: unknown, parentPath = ''): string | false {\r\n    // If `obj` is not an object or is null, we can't go deeper, so return false\r\n    if (typeof obj !== \"object\" || obj === null) {\r\n        return false;\r\n    }\r\n\r\n    for (const key of Object.keys(obj)) {\r\n        const value = (obj as Record<string, unknown>)[key];\r\n        // Build the full path. For the root level, it's just the key;\r\n        // for nested levels, prepend the parent path followed by a dot.\r\n        const currentPath = parentPath ? `${parentPath}.${key}` : key;\r\n\r\n        // If the value is undefined, return the path\r\n        if (typeof value === 'undefined') {\r\n            return currentPath;\r\n        }\r\n\r\n        // If the value is an object, recurse to check deeper\r\n        if (typeof value === \"object\" && value !== null) {\r\n            const result = findUndefinedPath(value, currentPath);\r\n            // If a path was found in the nested object, return it\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    // If no property with undefined was found\r\n    return false;\r\n}\r\n"],"mappings":"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","ignoreList":[]}