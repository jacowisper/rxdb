{"version":3,"file":"rx-collection.d.js","names":[],"sources":["../../../src/types/rx-collection.d.ts"],"sourcesContent":["import type {\r\n    RxJsonSchema,\r\n    RxDocument,\r\n    MigrationStrategies,\r\n    RxConflictHandler\r\n} from './index.d.ts';\r\nimport type {\r\n    RxCollectionBase\r\n} from '../rx-collection.d.ts';\r\nimport type { QueryCache } from '../query-cache.d.ts';\r\nimport type { RxLocalDocumentMutation } from './rx-database.d.ts';\r\n\r\nexport interface KeyFunctionMap {\r\n    [key: string]: Function;\r\n}\r\nexport interface NumberFunctionMap {\r\n    [key: number]: Function;\r\n}\r\n\r\n\r\n/**\r\n * Params to create a new collection.\r\n * Notice the name of the collection is set one level higher\r\n * when calling addCollections()\r\n */\r\nexport type RxCollectionCreator<RxDocType = any> = {\r\n    schema: RxJsonSchema<RxDocType>;\r\n    instanceCreationOptions?: any;\r\n    migrationStrategies?: MigrationStrategies;\r\n    autoMigrate?: boolean;\r\n    statics?: KeyFunctionMap;\r\n    methods?: KeyFunctionMap;\r\n    attachments?: KeyFunctionMap;\r\n    options?: any;\r\n    /**\r\n     * Set this to true if you want to store local documents\r\n     * in the RxCollection instance.\r\n     */\r\n    localDocuments?: boolean;\r\n    cacheReplacementPolicy?: RxCacheReplacementPolicy;\r\n\r\n    /**\r\n     * Depending on which plugins or storage is used,\r\n     * the RxCollection might need a way to resolve conflicts\r\n     * which is done by this conflict handler.\r\n     * If no conflict handler is provided, a master-always-wins handler\r\n     * will be used as default\r\n     */\r\n    conflictHandler?: RxConflictHandler<RxDocType>;\r\n};\r\n\r\nexport type RxCacheReplacementPolicy = (collection: RxCollection, queryCache: QueryCache) => void;\r\n\r\nexport type RxCollectionHookCallback<\r\n    RxDocumentType,\r\n    OrmMethods,\r\n    Reactivity\r\n> = (\r\n    data: RxDocumentType,\r\n    instance: RxDocument<RxDocumentType, OrmMethods, Reactivity>\r\n) => void | Promise<void> | any;\r\nexport type RxCollectionHookNoInstance<RxDocumentType> = (data: RxDocumentType) => void | Promise<void> | any;\r\nexport type RxCollectionHookCallbackNonAsync<RxDocumentType, OrmMethods, Reactivity> = (\r\n    data: RxDocumentType,\r\n    instance: RxDocument<RxDocumentType, OrmMethods, Reactivity>\r\n) => void | any;\r\nexport type RxCollectionHookNoInstanceCallback<\r\n    RxDocumentType,\r\n    OrmMethods,\r\n    Reactivity\r\n> = (\r\n    data: RxDocumentType,\r\n    instance: RxCollection<RxDocumentType, OrmMethods, Reactivity>\r\n) => Promise<void> | void | any;\r\n\r\nexport type RxCollection<\r\n    RxDocumentType = any,\r\n    OrmMethods = {},\r\n    StaticMethods = {},\r\n    InstanceCreationOptions = {},\r\n    Reactivity = unknown\r\n> = StaticMethods &\r\n    RxCollectionBase<InstanceCreationOptions, RxDocumentType, OrmMethods, StaticMethods, Reactivity> &\r\n    RxCollectionGenerated<RxDocumentType, OrmMethods, Reactivity>;\r\n\r\nexport interface RxCollectionGenerated<RxDocumentType = any, OrmMethods = {}, Reactivity = unknown> extends RxLocalDocumentMutation<RxCollection<RxDocumentType, OrmMethods, any, any, Reactivity>> {\r\n\r\n    // HOOKS\r\n    preInsert(fun: RxCollectionHookNoInstanceCallback<RxDocumentType, OrmMethods, Reactivity>, parallel: boolean): void;\r\n    preSave(fun: RxCollectionHookCallback<RxDocumentType, OrmMethods, Reactivity>, parallel: boolean): void;\r\n    preRemove(fun: RxCollectionHookCallback<RxDocumentType, OrmMethods, Reactivity>, parallel: boolean): void;\r\n    postInsert(fun: RxCollectionHookCallback<RxDocumentType, OrmMethods, Reactivity>, parallel: boolean): void;\r\n    postSave(fun: RxCollectionHookCallback<RxDocumentType, OrmMethods, Reactivity>, parallel: boolean): void;\r\n    postRemove(fun: RxCollectionHookCallback<RxDocumentType, OrmMethods, Reactivity>, parallel: boolean): void;\r\n    postCreate(fun: RxCollectionHookCallbackNonAsync<RxDocumentType, OrmMethods, Reactivity>): void;\r\n\r\n    // only inMemory-collections\r\n    awaitPersistence(): Promise<void>;\r\n}\r\n\r\n/**\r\n * Properties are possibly encrypted so type them as any. TODO this is no longer needed.\r\n */\r\nexport type RxDumpCollectionAsAny<T> = { [P in keyof T]: any };\r\n\r\ninterface RxDumpCollectionBase {\r\n    name: string;\r\n    passwordHash?: string;\r\n    schemaHash: string;\r\n}\r\nexport interface RxDumpCollection<RxDocumentType> extends RxDumpCollectionBase {\r\n    docs: RxDocumentType[];\r\n}\r\n/**\r\n * All base properties are typed as any because they can be encrypted.\r\n */\r\nexport interface RxDumpCollectionAny<RxDocumentType> extends RxDumpCollectionBase {\r\n    docs: RxDumpCollectionAsAny<RxDocumentType>[];\r\n}\r\n"],"mappings":"","ignoreList":[]}