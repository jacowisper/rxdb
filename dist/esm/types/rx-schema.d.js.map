{"version":3,"file":"rx-schema.d.js","names":[],"sources":["../../../src/types/rx-schema.d.ts"],"sourcesContent":["import { AsTyped } from 'as-typed';\r\nimport type { CRDTSchemaOptions } from './plugins/crdt.d.ts';\r\nimport type { StringKeys } from './util.d.ts';\r\n\r\n/**\r\n * @link https://github.com/types/lib-json-schema/blob/master/v4/index.d.ts\r\n */\r\nexport type JsonSchemaTypes = 'array' | 'boolean' | 'integer' | 'number' | 'null' | 'object' | 'string' | (string & {});\r\n\r\nexport type CompositePrimaryKey<RxDocType> = {\r\n    /**\r\n     * The top level field of the document that will be used\r\n     * to store the composite key as string.\r\n     */\r\n    key: StringKeys<RxDocType>;\r\n\r\n    /**\r\n     * The fields of the composite key,\r\n     * the fields must be required and final\r\n     * and have the type number, int, or string.\r\n     */\r\n    fields: (StringKeys<RxDocType> | string)[] | readonly (StringKeys<RxDocType> | string)[];\r\n    /**\r\n     * The separator which is used to concat the\r\n     * primary fields values.\r\n     * Choose a character as separator that is known\r\n     * to never appear inside of the primary fields values.\r\n     * I recommend to use the pipe char '|'.\r\n     */\r\n    separator: string;\r\n};\r\n\r\nexport type PrimaryKey<RxDocType> = StringKeys<RxDocType> | CompositePrimaryKey<RxDocType>;\r\n\r\nexport type JsonSchema<RxDocType = any> = {\r\n    allOf?: JsonSchema[] | readonly JsonSchema[];\r\n    anyOf?: JsonSchema[] | readonly JsonSchema[];\r\n    oneOf?: JsonSchema[] | readonly JsonSchema[];\r\n    additionalItems?: boolean | JsonSchema;\r\n    additionalProperties?: boolean | JsonSchema;\r\n    type?: JsonSchemaTypes | JsonSchemaTypes[] | readonly JsonSchemaTypes[];\r\n    description?: string;\r\n    dependencies?: {\r\n        [key: string]: JsonSchema | string[] | readonly string[];\r\n    };\r\n    exclusiveMinimum?: boolean;\r\n    exclusiveMaximum?: boolean;\r\n    items?: JsonSchema | JsonSchema[] | readonly JsonSchema[];\r\n    multipleOf?: number;\r\n    maxProperties?: number;\r\n    maximum?: number;\r\n    minimum?: number;\r\n    maxLength?: number;\r\n    minLength?: number;\r\n    maxItems?: number;\r\n    minItems?: number;\r\n    minProperties?: number;\r\n    pattern?: string;\r\n    patternProperties?: {\r\n        [key: string]: JsonSchema;\r\n    };\r\n    properties?: {\r\n        [key in StringKeys<RxDocType>]: JsonSchema;\r\n    };\r\n    required?: string[] | readonly string[];\r\n    uniqueItems?: boolean;\r\n    enum?: any[] | readonly any[];\r\n    not?: JsonSchema;\r\n    definitions?: {\r\n        [key: string]: JsonSchema;\r\n    };\r\n    format?: 'date-time' | 'email' | 'hostname' | 'ipv4' | 'ipv6' | 'uri' | string;\r\n    example?: any;\r\n\r\n    // RxDB-specific\r\n    ref?: string;\r\n    final?: boolean;\r\n};\r\n\r\nexport interface TopLevelProperty extends JsonSchema {\r\n    default?: any;\r\n}\r\n\r\n/**\r\n * @link https://developer.mozilla.org/en-US/docs/Web/API/Compression_Streams_API\r\n */\r\nexport type CompressionMode = 'deflate' | 'gzip';\r\n\r\nexport type RxJsonSchema<\r\n    /**\r\n     * The doctype must be given, and '=any' cannot be used,\r\n     * otherwise the keyof of primaryKey\r\n     * would be optional when the type of the document is not known.\r\n     */\r\n    RxDocType\r\n> = {\r\n    title?: string;\r\n    description?: string;\r\n    version: number;\r\n\r\n    /**\r\n     * The primary key of the documents.\r\n     * Must be in the top level of the properties of the schema\r\n     * and that property must have the type 'string'\r\n     */\r\n    primaryKey: PrimaryKey<RxDocType>;\r\n\r\n    /**\r\n     * TODO this looks like a typescript-bug\r\n     * we have to allows all string because the 'object'-literal is not recognized\r\n     * retry this in later typescript-versions\r\n     */\r\n    type: 'object' | string;\r\n    properties: { [key in StringKeys<RxDocType>]: TopLevelProperty };\r\n\r\n    /**\r\n     * On the top level the required-array must be set\r\n     * because we always have to set the primary key to required.\r\n     */\r\n    required?: StringKeys<RxDocType>[] | readonly StringKeys<RxDocType>[];\r\n\r\n    /**\r\n     * Indexes that will be used for the queries.\r\n     * RxDB will internally prepend the _deleted field to the index\r\n     * because queries do NOT return documents with _deleted=true.\r\n     */\r\n    indexes?: (string | string[])[] | (string | readonly string[])[] | readonly (string | string[])[] | readonly (string | readonly string[])[];\r\n\r\n    /**\r\n     * Internally used indexes that do not get _deleted prepended\r\n     * by RxDB. Use these to speed up queries that are run manually on the storage\r\n     * or to speed up requests when you use the RxDB server.\r\n     * These could also be utilised when you build a plugin that\r\n     * has to query documents without respecting the _deleted value.\r\n     */\r\n    internalIndexes?: string[][] | readonly string[][];\r\n\r\n\r\n    encrypted?: string[] | readonly string[];\r\n    keyCompression?: boolean;\r\n    /**\r\n     * if not set, rxdb will set 'false' as default\r\n     * Having additionalProperties: true is not allowed on the root level to ensure\r\n     * that property names do not clash with properties of the RxDocument class\r\n     * or ORM methods.\r\n     */\r\n    additionalProperties?: false;\r\n    attachments?: {\r\n        encrypted?: boolean;\r\n        /**\r\n         * @link https://developer.mozilla.org/en-US/docs/Web/API/Compression_Streams_API\r\n         */\r\n        compression?: CompressionMode;\r\n    };\r\n    /**\r\n     * Options for the sharding plugin of rxdb-premium.\r\n     * We set these on the schema because changing the shard amount or mode\r\n     * will require a migration.\r\n     * @link https://rxdb.info/rx-storage-sharding.html\r\n     */\r\n    sharding?: {\r\n        /**\r\n         * Amount of shards.\r\n         * This value cannot be changed after you have stored data,\r\n         * if you change it anyway, you will loose the existing data.\r\n         */\r\n        shards: number;\r\n        /**\r\n         * Either shard by collection or by database.\r\n         * For most use cases (IndexedDB based storages), sharding by collection is the way to go\r\n         * because it has a faster initial load time.\r\n         */\r\n        mode: 'database' | 'collection';\r\n    };\r\n    crdt?: CRDTSchemaOptions<RxDocType>;\r\n};\r\n\r\n/**\r\n * Used to aggregate the document type from the schema.\r\n * @link https://github.com/pubkey/rxdb/discussions/3467\r\n */\r\nexport type ExtractDocumentTypeFromTypedRxJsonSchema<TypedRxJsonSchema> = AsTyped<TypedRxJsonSchema>;\r\n"],"mappings":"","ignoreList":[]}