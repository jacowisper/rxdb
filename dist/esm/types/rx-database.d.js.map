{"version":3,"file":"rx-database.d.js","names":[],"sources":["../../../src/types/rx-database.d.ts"],"sourcesContent":["import type {\r\n    RxCollection,\r\n    RxDumpCollection,\r\n    RxDumpCollectionAsAny\r\n} from './rx-collection.d.ts';\r\nimport type {\r\n    RxDatabaseBase\r\n} from '../rx-database.d.ts';\r\nimport { Observable } from 'rxjs';\r\nimport type { RxStorage } from './rx-storage.interface.d.ts';\r\nimport type { RxLocalDocument } from './plugins/local-documents.d.ts';\r\nimport type { RxCleanupPolicy } from './plugins/cleanup.d.ts';\r\nimport type { ById, HashFunction } from './util.d.ts';\r\nimport type { RxReactivityFactory } from './plugins/reactivity.d.ts';\r\n\r\nexport interface RxDatabaseCreator<Internals = any, InstanceCreationOptions = any, Reactivity = unknown> {\r\n    storage: RxStorage<Internals, InstanceCreationOptions>;\r\n    instanceCreationOptions?: InstanceCreationOptions;\r\n    name: string;\r\n    password?: string | any;\r\n    multiInstance?: boolean;\r\n    eventReduce?: boolean;\r\n    ignoreDuplicate?: boolean;\r\n    options?: any;\r\n    cleanupPolicy?: Partial<RxCleanupPolicy>;\r\n    /**\r\n     * Set this to true if you want to store local documents\r\n     * in the RxDatabase instance.\r\n     */\r\n    localDocuments?: boolean;\r\n\r\n    /**\r\n     * Hash method used to hash strings and json-stringified objects.\r\n     * This hash does not have to be cryptographically secure,\r\n     * but it is very important that is does have not create\r\n     * collisions.\r\n     * Default is the sha256 from crypto.subtle.digest('SHA-256', data)\r\n     */\r\n    hashFunction?: HashFunction;\r\n\r\n    /**\r\n     * By default, count() queries in 'slow' mode are not allowed.\r\n     */\r\n    allowSlowCount?: boolean;\r\n\r\n    /**\r\n     * Can be used to add a custom reactivity Factory\r\n     * that is used on all getters and values that end with the double $$.\r\n     * For example you can use the signals api of your framework and vuejs ref()\r\n     */\r\n    reactivity?: RxReactivityFactory<Reactivity>;\r\n}\r\n\r\nexport type CollectionsOfDatabase = ById<RxCollection>;\r\nexport type RxDatabase<\r\n    Collections = CollectionsOfDatabase,\r\n    Internals = any,\r\n    InstanceCreationOptions = any,\r\n    Reactivity = any\r\n> = RxDatabaseBase<\r\n    Internals,\r\n    InstanceCreationOptions,\r\n    Collections,\r\n    Reactivity\r\n> & Collections & RxDatabaseGenerated<Collections, Reactivity>;\r\n\r\n\r\nexport interface RxLocalDocumentMutation<StorageType, Reactivity = unknown> {\r\n    insertLocal<LocalDocType = any>(id: string, data: LocalDocType): Promise<\r\n        RxLocalDocument<StorageType, LocalDocType, Reactivity>\r\n    >;\r\n    upsertLocal<LocalDocType = any>(id: string, data: LocalDocType): Promise<\r\n        RxLocalDocument<StorageType, LocalDocType, Reactivity>\r\n    >;\r\n    getLocal<LocalDocType = any>(id: string): Promise<\r\n        RxLocalDocument<StorageType, LocalDocType, Reactivity> | null\r\n    >;\r\n    getLocal$<LocalDocType = any>(id: string): Observable<\r\n        RxLocalDocument<StorageType, LocalDocType, Reactivity> | null\r\n    >;\r\n}\r\n\r\nexport interface RxDatabaseGenerated<Collections, Reactivity> extends RxLocalDocumentMutation<RxDatabase<Collections, any, any, Reactivity>> { }\r\n\r\n/**\r\n * Extract the **DocumentType** of a collection.\r\n */\r\ntype ExtractDTcol<P> = P extends RxCollection<infer T> ? T : { [prop: string]: any; };\r\n\r\ninterface RxDumpDatabaseBase {\r\n    instanceToken: string;\r\n    name: string;\r\n    passwordHash: string | null;\r\n}\r\nexport interface RxDumpDatabase<Col> extends RxDumpDatabaseBase {\r\n    collections: RxDumpCollection<ExtractDTcol<Col[keyof Col]>>[];\r\n}\r\n/**\r\n * All base properties are typed as any because they can be encrypted.\r\n */\r\nexport interface RxDumpDatabaseAny<Col> extends RxDumpDatabaseBase {\r\n    collections: RxDumpCollection<RxDumpCollectionAsAny<ExtractDTcol<Col[keyof Col]>>>[];\r\n}\r\n"],"mappings":"","ignoreList":[]}