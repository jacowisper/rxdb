{"version":3,"file":"rx-query.d.js","names":[],"sources":["../../../src/types/rx-query.d.ts"],"sourcesContent":["import type {\r\n    RxQueryBase\r\n} from '../rx-query.d.ts';\r\nimport type { Paths, StringKeys } from './util.d.ts';\r\n\r\n/**\r\n * Typed Mango Query Selector\r\n * @link https://github.com/mongodb/node-mongodb-native/blob/26bce4a8debb65df5a42dc8599e886c9c83de10d/src/mongo_types.ts\r\n * @link https://stackoverflow.com/a/58436959/3443137\r\n */\r\n\r\n\r\nexport type PropertyType<Type, Property extends string> = string extends Property\r\n    ? unknown\r\n    : Property extends keyof Type\r\n    ? Type[Property]\r\n    : Property extends `${number}`\r\n    ? Type extends ReadonlyArray<infer ArrayType>\r\n    ? ArrayType\r\n    : unknown\r\n    : Property extends `${infer Key}.${infer Rest}`\r\n    ? Key extends `${number}`\r\n    ? Type extends ReadonlyArray<infer ArrayType>\r\n    ? PropertyType<ArrayType, Rest>\r\n    : unknown\r\n    : Key extends keyof Type\r\n    ? Type[Key] extends Map<string, infer MapType>\r\n    ? MapType\r\n    : PropertyType<Type[Key], Rest>\r\n    : unknown\r\n    : unknown;\r\n\r\n\r\nexport type MangoQueryRegexOptions = 'i' | 'g' | 'm' | 'gi' | 'ig' | 'igm' | string;\r\n\r\n/*\r\n * The MongoDB query library is huge and we do not need all the operators.\r\n * If you add an operator here, make sure that you properly add a test in\r\n * the file /test/unit/rx-storage-query-correctness.test.ts\r\n *\r\n * @link https://github.com/kofrasa/mingo#es6\r\n */\r\nexport interface MangoQueryOperators<PathValueType> {\r\n    $eq?: PathValueType;\r\n    $gt?: PathValueType;\r\n    $gte?: PathValueType;\r\n    $lt?: PathValueType;\r\n    $lte?: PathValueType;\r\n    $ne?: PathValueType;\r\n    $in?: PathValueType[];\r\n    $nin?: PathValueType[];\r\n    $regex?: string;\r\n    $options?: MangoQueryRegexOptions;\r\n    $exists?: boolean;\r\n    $type?: 'null' | 'boolean' | 'number' | 'string' | 'array' | 'object';\r\n    $mod?: number;\r\n    $not?: PathValueType;\r\n    $size?: number;\r\n    $elemMatch?: MangoQuerySelector<PathValueType>;\r\n}\r\n\r\nexport type MangoQuerySelector<DocType> = Partial<{\r\n    [Property in Paths<DocType>]: MangoQueryOperators<any> | PropertyType<DocType, Property>;\r\n}> & {\r\n    $and?: MangoQuerySelector<DocType>[];\r\n    $or?: MangoQuerySelector<DocType>[];\r\n    $nor?: MangoQuerySelector<DocType>[];\r\n};\r\n\r\n/**\r\n * Discussion was at:\r\n * @link https://github.com/pubkey/rxdb/issues/1972\r\n */\r\nexport type MangoQuerySortDirection = 'asc' | 'desc';\r\nexport type MangoQuerySortPart<RxDocType = any> = {\r\n    [k in StringKeys<RxDocType> | string]: MangoQuerySortDirection;\r\n};\r\n\r\nexport type MangoQuerySelectorAndIndex<RxDocType = any> = {\r\n    /**\r\n     * Selector is optional,\r\n     * if not given, the query matches all documents\r\n     * that are not _deleted=true.\r\n     */\r\n    selector?: MangoQuerySelector<RxDocType>;\r\n    /**\r\n     * By default, the RxStorage implementation\r\n     * decides which index to use when running the query.\r\n     *\r\n     * For better performance, a different index might be defined\r\n     * by setting it in the query.\r\n     * How this improves performance and if the defined index is used,\r\n     * depends on the RxStorage implementation.\r\n     */\r\n    index?: string | string[];\r\n};\r\n\r\nexport type MangoQueryNoLimit<RxDocType> = MangoQuerySelectorAndIndex<RxDocType> & {\r\n    /**\r\n     * Sorting of the results.\r\n     * If no sort is set, RxDB will sort by the primary key.\r\n     * Also if sort is set, RxDB will add primaryKey sorting\r\n     * if the primaryKey was not in the sort parameters before.\r\n     * This ensures that there is a deterministic sorting of the\r\n     * results, not mather at which order the documents have been\r\n     * inserted into the storage.\r\n     */\r\n    sort?: MangoQuerySortPart<RxDocType>[];\r\n};\r\n\r\nexport type MangoQuery<RxDocType = any> = MangoQueryNoLimit<RxDocType> & {\r\n    skip?: number;\r\n    limit?: number;\r\n};\r\n\r\nexport type RxQueryOP = 'find' | 'findOne' | 'count' | 'findByIds';\r\n\r\nexport declare class RxQuery<\r\n    RxDocumentType = any,\r\n    RxQueryResult = any,\r\n    OrmMethods = {},\r\n    Reactivity = unknown\r\n> extends RxQueryBase<RxDocumentType, RxQueryResult, OrmMethods, Reactivity> {\r\n    equals(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\r\n    eq(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\r\n    or(queryObj: keyof RxDocumentType | string | any[]): RxQuery<RxDocumentType, RxQueryResult>;\r\n    nor(queryObj: keyof RxDocumentType | string | any[]): RxQuery<RxDocumentType, RxQueryResult>;\r\n    and(queryObj: keyof RxDocumentType | string | any[]): RxQuery<RxDocumentType, RxQueryResult>;\r\n    gt(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\r\n    gte(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\r\n    lt(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\r\n    lte(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\r\n    ne(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\r\n    in(queryObj: any[]): RxQuery<RxDocumentType, RxQueryResult>;\r\n    nin(queryObj: any[]): RxQuery<RxDocumentType, RxQueryResult>;\r\n    all(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\r\n    regex(queryObj: string | {\r\n        $regex: string;\r\n        $options: MangoQueryRegexOptions;\r\n    }): RxQuery<RxDocumentType, RxQueryResult>;\r\n    exists(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\r\n    elemMatch(queryObj: any): RxQuery<RxDocumentType, RxQueryResult>;\r\n    mod(p1: any, p2: any, p3: any): RxQuery<RxDocumentType, RxQueryResult>;\r\n}\r\n"],"mappings":"","ignoreList":[]}