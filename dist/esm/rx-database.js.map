{"version":3,"file":"rx-database.js","names":["IdleQueue","ObliviousSet","pluginMissing","flatClone","PROMISE_RESOLVE_FALSE","randomToken","ensureNotFalsy","getDefaultRevision","getDefaultRxDocumentMeta","defaultHashSha256","RXDB_VERSION","newRxError","createRxSchema","runPluginHooks","runAsyncPluginHooks","Subject","mergeMap","createRxCollection","flatCloneDocWithMeta","getSingleDocument","getWrappedStorageInstance","INTERNAL_STORAGE_NAME","ensureStorageTokenDocumentExists","getAllCollectionDocuments","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","INTERNAL_STORE_SCHEMA","_collectionNamePrimary","removeCollectionStorages","overwritable","rxChangeEventBulkToRxChangeEvents","USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","name","token","storage","instanceCreationOptions","password","multiInstance","eventReduce","options","internalStore","hashFunction","cleanupPolicy","allowSlowCount","reactivity","idleQueue","rxdbVersion","storageInstances","_subs","startupErrors","onClose","closed","collections","states","eventBulks$","observable$","pipe","changeEventBulk","storageToken","storageTokenDocument","emittedEventBulkIds","asRxDatabase","catch","err","push","then","doc","data","_proto","prototype","getReactivityFactory","database","$emit","has","id","add","next","removeCollectionDoc","schema","writeDoc","_deleted","bulkWrite","document","previous","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","Promise","all","Object","entries","map","args","collectionName","rxJsonSchema","collectionNameWithVersion","collectionDocData","key","context","schemaHash","hash","jsonSchema","version","connectedStorages","_meta","_rev","_attachments","useArgs","assign","hookData","conflictHandler","putDocsResult","ensureNoStartupErrors","error","status","writeError","docInDb","documentInDb","collection","previousSchemaHash","previousSchema","ret","keys","defineProperty","get","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","addState","_name","importJSON","_exportedJSON","backup","_options","leaderElector","isLeader","waitForLeadership","migrationStates","close","complete","sub","unsubscribe","col","delete","remove","removeRxDatabase","_createClass","throwIfDatabaseNameUsed","link","createRxDatabaseStorageInstance","databaseInstanceToken","databaseName","createStorageInstance","devMode","isDevMode","createRxDatabase","ignoreDuplicate","localDocuments","storageInstance","rxDatabase","creator","dbInternalsStorageInstance","collectionDocs","collectionNames","forEach","removedCollectionNames","Array","from","isRxDatabase","obj","dbCount","isRxDatabaseFirstTimeInstantiated","tokenDoc","instanceToken"],"sources":["../../src/rx-database.ts"],"sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\r\nimport type {\r\n    LeaderElector\r\n} from 'broadcast-channel';\r\nimport { ObliviousSet } from 'oblivious-set';\r\nimport type {\r\n    CollectionsOfDatabase,\r\n    RxDatabase,\r\n    RxCollectionCreator,\r\n    RxJsonSchema,\r\n    RxCollection,\r\n    RxDumpDatabase,\r\n    RxDumpDatabaseAny,\r\n    BackupOptions,\r\n    RxStorage,\r\n    RxStorageInstance,\r\n    BulkWriteRow,\r\n    RxChangeEvent,\r\n    RxDatabaseCreator,\r\n    RxChangeEventBulk,\r\n    RxDocumentData,\r\n    RxCleanupPolicy,\r\n    InternalStoreDocType,\r\n    InternalStoreStorageTokenDocType,\r\n    InternalStoreCollectionDocType,\r\n    RxTypeError,\r\n    RxError,\r\n    HashFunction,\r\n    MaybePromise,\r\n    RxState\r\n} from './types/index.d.ts';\r\n\r\nimport {\r\n    pluginMissing,\r\n    flatClone,\r\n    PROMISE_RESOLVE_FALSE,\r\n    randomToken,\r\n    ensureNotFalsy,\r\n    getDefaultRevision,\r\n    getDefaultRxDocumentMeta,\r\n    defaultHashSha256,\r\n    RXDB_VERSION\r\n} from './plugins/utils/index.ts';\r\nimport {\r\n    newRxError\r\n} from './rx-error.ts';\r\nimport {\r\n    createRxSchema,\r\n    RxSchema\r\n} from './rx-schema.ts';\r\nimport {\r\n    runPluginHooks,\r\n    runAsyncPluginHooks\r\n} from './hooks.ts';\r\nimport {\r\n    Subject,\r\n    Subscription,\r\n    Observable\r\n} from 'rxjs';\r\nimport {\r\n    mergeMap\r\n} from 'rxjs/operators';\r\nimport {\r\n    createRxCollection\r\n} from './rx-collection.ts';\r\nimport {\r\n    flatCloneDocWithMeta,\r\n    getSingleDocument,\r\n    getWrappedStorageInstance,\r\n    INTERNAL_STORAGE_NAME,\r\n    WrappedRxStorageInstance\r\n} from './rx-storage-helper.ts';\r\nimport type { RxBackupState } from './plugins/backup/index.ts';\r\nimport {\r\n    ensureStorageTokenDocumentExists,\r\n    getAllCollectionDocuments,\r\n    getPrimaryKeyOfInternalDocument,\r\n    INTERNAL_CONTEXT_COLLECTION,\r\n    INTERNAL_STORE_SCHEMA,\r\n    _collectionNamePrimary\r\n} from './rx-database-internal-store.ts';\r\nimport { removeCollectionStorages } from './rx-collection-helper.ts';\r\nimport { overwritable } from './overwritable.ts';\r\nimport type { RxMigrationState } from './plugins/migration-schema/index.ts';\r\nimport type { RxReactivityFactory } from './types/plugins/reactivity.d.ts';\r\nimport { rxChangeEventBulkToRxChangeEvents } from './rx-change-event.ts';\r\n\r\n/**\r\n * stores the used database names+storage names\r\n * so we can throw when the same database is created more then once.\r\n */\r\nconst USED_DATABASE_NAMES: Set<string> = new Set();\r\n\r\nlet DB_COUNT = 0;\r\n\r\nexport class RxDatabaseBase<\r\n    Internals,\r\n    InstanceCreationOptions,\r\n    Collections = CollectionsOfDatabase,\r\n    Reactivity = unknown\r\n> {\r\n\r\n    public readonly idleQueue: IdleQueue = new IdleQueue();\r\n    public readonly rxdbVersion = RXDB_VERSION;\r\n\r\n    /**\r\n     * Contains all known non-closed storage instances\r\n     * that belong to this database.\r\n     * Used in plugins and unit tests.\r\n     */\r\n    public readonly storageInstances = new Set<WrappedRxStorageInstance<any, Internals, InstanceCreationOptions>>();\r\n\r\n    constructor(\r\n        public readonly name: string,\r\n        /**\r\n         * Uniquely identifies the instance\r\n         * of this RxDatabase.\r\n         */\r\n        public readonly token: string,\r\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\r\n        public readonly instanceCreationOptions: InstanceCreationOptions,\r\n        public readonly password: any,\r\n        public readonly multiInstance: boolean,\r\n        public readonly eventReduce: boolean = false,\r\n        public options: any = {},\r\n        /**\r\n         * Stores information documents about the collections of the database\r\n         */\r\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\r\n        public readonly hashFunction: HashFunction,\r\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>,\r\n        public readonly allowSlowCount?: boolean,\r\n        public readonly reactivity?: RxReactivityFactory<any>\r\n    ) {\r\n        DB_COUNT++;\r\n\r\n        /**\r\n         * In the dev-mode, we create a pseudoInstance\r\n         * to get all properties of RxDatabase and ensure they do not\r\n         * conflict with the collection names etc.\r\n         * So only if it is not pseudoInstance,\r\n         * we have all values to prepare a real RxDatabase.\r\n         *\r\n         * TODO this is ugly, we should use a different way in the dev-mode\r\n         * so that all non-dev-mode code can be cleaner.\r\n         */\r\n        if (this.name !== 'pseudoInstance') {\r\n            /**\r\n             * Wrap the internal store\r\n             * to ensure that calls to it also end up in\r\n             * calculation of the idle state and the hooks.\r\n             */\r\n            this.internalStore = getWrappedStorageInstance(\r\n                this.asRxDatabase,\r\n                internalStore,\r\n                INTERNAL_STORE_SCHEMA\r\n            );\r\n\r\n            /**\r\n             * Start writing the storage token.\r\n             * Do not await the creation because it would run\r\n             * in a critical path that increases startup time.\r\n             *\r\n             * Writing the token takes about 20 milliseconds\r\n             * even on a fast adapter, so this is worth it.\r\n             */\r\n            this.storageTokenDocument = ensureStorageTokenDocumentExists(this.asRxDatabase)\r\n                .catch(err => this.startupErrors.push(err) as any);\r\n            this.storageToken = this.storageTokenDocument\r\n                .then(doc => doc.data.token)\r\n                .catch(err => this.startupErrors.push(err) as any);\r\n        }\r\n    }\r\n\r\n    get $(): Observable<RxChangeEvent<any>> {\r\n        return this.observable$;\r\n    }\r\n\r\n    public getReactivityFactory(): RxReactivityFactory<Reactivity> {\r\n        if (!this.reactivity) {\r\n            throw newRxError('DB14', { database: this.name });\r\n        }\r\n        return this.reactivity;\r\n    }\r\n\r\n    public _subs: Subscription[] = [];\r\n\r\n    /**\r\n     * Because having unhandled exceptions would fail,\r\n     * we have to store the async errors of the constructor here\r\n     * so we can throw them later.\r\n     */\r\n    public startupErrors: (RxError | RxTypeError)[] = [];\r\n\r\n    /**\r\n     * When the database is closed,\r\n     * these functions will be called an awaited.\r\n     * Used to automatically clean up stuff that\r\n     * belongs to this collection.\r\n     */\r\n    public onClose: (() => MaybePromise<any>)[] = [];\r\n    public closed: boolean = false;\r\n    public collections: Collections = {} as any;\r\n    public states: { [name: string]: RxState<any, Reactivity>; } = {};\r\n\r\n    /**\r\n     * Internally only use eventBulks$\r\n     * Do not use .$ or .observable$ because that has to transform\r\n     * the events which decreases performance.\r\n     */\r\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\r\n\r\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\r\n        .pipe(\r\n            mergeMap(changeEventBulk => rxChangeEventBulkToRxChangeEvents(changeEventBulk))\r\n        );\r\n\r\n    /**\r\n     * Unique token that is stored with the data.\r\n     * Used to detect if the dataset has been deleted\r\n     * and if two RxDatabase instances work on the same dataset or not.\r\n     *\r\n     * Because reading and writing the storageToken runs in the hot path\r\n     * of database creation, we do not await the storageWrites but instead\r\n     * work with the promise when we need the value.\r\n     */\r\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\r\n    /**\r\n     * Stores the whole state of the internal storage token document.\r\n     * We need this in some plugins.\r\n     */\r\n    public storageTokenDocument: Promise<RxDocumentData<InternalStoreStorageTokenDocType>> = PROMISE_RESOLVE_FALSE as any;\r\n\r\n    /**\r\n     * Contains the ids of all event bulks that have been emitted\r\n     * by the database.\r\n     * Used to detect duplicates that come in again via BroadcastChannel\r\n     * or other streams.\r\n     * In the past we tried to remove this and to ensure\r\n     * all storages only emit the same event bulks only once\r\n     * but it turns out this is just not possible for all storages.\r\n     * JavaScript processes, workers and browser tabs can be closed and started at any time\r\n     * which can cause cases where it is not possible to know if an event bulk has been emitted already.\r\n     */\r\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\r\n\r\n    /**\r\n     * This is the main handle-point for all change events\r\n     * ChangeEvents created by this instance go:\r\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\r\n     * ChangeEvents created by other instances go:\r\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\r\n     */\r\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\r\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\r\n            return;\r\n        }\r\n        this.emittedEventBulkIds.add(changeEventBulk.id);\r\n        this.eventBulks$.next(changeEventBulk);\r\n    }\r\n\r\n    /**\r\n     * removes the collection-doc from the internalStore\r\n     */\r\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\r\n        const doc = await getSingleDocument(\r\n            this.internalStore,\r\n            getPrimaryKeyOfInternalDocument(\r\n                _collectionNamePrimary(name, schema),\r\n                INTERNAL_CONTEXT_COLLECTION\r\n            )\r\n        );\r\n        if (!doc) {\r\n            throw newRxError('SNH', { name, schema });\r\n        }\r\n        const writeDoc = flatCloneDocWithMeta(doc);\r\n        writeDoc._deleted = true;\r\n\r\n        await this.internalStore.bulkWrite([{\r\n            document: writeDoc,\r\n            previous: doc\r\n        }], 'rx-database-remove-collection');\r\n    }\r\n\r\n    /**\r\n     * creates multiple RxCollections at once\r\n     * to be much faster by saving db txs and doing stuff in bulk-operations\r\n     * This function is not called often, but mostly in the critical path at the initial page load\r\n     * So it must be as fast as possible.\r\n     */\r\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\r\n        [key in keyof CreatedCollections]: RxCollectionCreator<any>\r\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection<any, {}, {}, {}, Reactivity> }> {\r\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\r\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\r\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\r\n        const useArgsByCollectionName: any = {};\r\n\r\n        await Promise.all(\r\n            Object.entries(collectionCreators).map(async ([name, args]) => {\r\n                const collectionName: keyof CreatedCollections = name as any;\r\n                const rxJsonSchema = (args as RxCollectionCreator<any>).schema;\r\n                jsonSchemas[collectionName] = rxJsonSchema;\r\n                const schema = createRxSchema(rxJsonSchema, this.hashFunction);\r\n                schemas[collectionName] = schema;\r\n\r\n                // collection already exists\r\n                if ((this.collections as any)[name]) {\r\n                    throw newRxError('DB3', {\r\n                        name\r\n                    });\r\n                }\r\n\r\n                const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\r\n                const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\r\n                    id: getPrimaryKeyOfInternalDocument(\r\n                        collectionNameWithVersion,\r\n                        INTERNAL_CONTEXT_COLLECTION\r\n                    ),\r\n                    key: collectionNameWithVersion,\r\n                    context: INTERNAL_CONTEXT_COLLECTION,\r\n                    data: {\r\n                        name: collectionName as any,\r\n                        schemaHash: await schema.hash,\r\n                        schema: schema.jsonSchema,\r\n                        version: schema.version,\r\n                        connectedStorages: []\r\n                    },\r\n                    _deleted: false,\r\n                    _meta: getDefaultRxDocumentMeta(),\r\n                    _rev: getDefaultRevision(),\r\n                    _attachments: {}\r\n                };\r\n                bulkPutDocs.push({\r\n                    document: collectionDocData\r\n                });\r\n\r\n                const useArgs: any = Object.assign(\r\n                    {},\r\n                    args,\r\n                    {\r\n                        name: collectionName,\r\n                        schema,\r\n                        database: this\r\n                    }\r\n                );\r\n\r\n                // run hooks\r\n                const hookData: RxCollectionCreator<any> & { name: string; } = flatClone(args) as any;\r\n                (hookData as any).database = this;\r\n                hookData.name = name;\r\n                runPluginHooks('preCreateRxCollection', hookData);\r\n                useArgs.conflictHandler = hookData.conflictHandler;\r\n\r\n                useArgsByCollectionName[collectionName] = useArgs;\r\n            })\r\n        );\r\n\r\n\r\n        const putDocsResult = await this.internalStore.bulkWrite(\r\n            bulkPutDocs,\r\n            'rx-database-add-collection'\r\n        );\r\n\r\n        await ensureNoStartupErrors(this);\r\n\r\n        await Promise.all(\r\n            putDocsResult.error.map(async (error) => {\r\n                if (error.status !== 409) {\r\n                    throw newRxError('DB12', {\r\n                        database: this.name,\r\n                        writeError: error\r\n                    });\r\n                }\r\n                const docInDb: RxDocumentData<InternalStoreCollectionDocType> = ensureNotFalsy(error.documentInDb);\r\n                const collectionName = docInDb.data.name;\r\n                const schema = (schemas as any)[collectionName];\r\n                // collection already exists but has different schema\r\n                if (docInDb.data.schemaHash !== await schema.hash) {\r\n                    throw newRxError('DB6', {\r\n                        database: this.name,\r\n                        collection: collectionName,\r\n                        previousSchemaHash: docInDb.data.schemaHash,\r\n                        schemaHash: await schema.hash,\r\n                        previousSchema: docInDb.data.schema,\r\n                        schema: ensureNotFalsy((jsonSchemas as any)[collectionName])\r\n                    });\r\n                }\r\n            })\r\n        );\r\n\r\n        const ret: { [key in keyof CreatedCollections]: RxCollection<any, {}, {}, {}, Reactivity> } = {} as any;\r\n        await Promise.all(\r\n            Object.keys(collectionCreators).map(async (collectionName) => {\r\n                const useArgs = useArgsByCollectionName[collectionName];\r\n                const collection = await createRxCollection(useArgs);\r\n                (ret as any)[collectionName] = collection;\r\n\r\n                // set as getter to the database\r\n                (this.collections as any)[collectionName] = collection;\r\n                if (!(this as any)[collectionName]) {\r\n                    Object.defineProperty(this, collectionName, {\r\n                        get: () => (this.collections as any)[collectionName]\r\n                    });\r\n                }\r\n            })\r\n        );\r\n\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * runs the given function between idleQueue-locking\r\n     */\r\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\r\n        return this.idleQueue.wrapCall(fn) as any;\r\n    }\r\n\r\n    requestIdlePromise() {\r\n        return this.idleQueue.requestIdlePromise();\r\n    }\r\n\r\n    /**\r\n     * Export database to a JSON friendly format.\r\n     */\r\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\r\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\r\n    exportJSON(_collections?: string[]): Promise<any> {\r\n        throw pluginMissing('json-dump');\r\n    }\r\n\r\n    addState<T = any>(_name?: string): Promise<RxState<T, Reactivity>> {\r\n        throw pluginMissing('state');\r\n    }\r\n\r\n    /**\r\n     * Import the parsed JSON export into the collection.\r\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\r\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\r\n     * since data could be encrypted.\r\n     */\r\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\r\n        throw pluginMissing('json-dump');\r\n    }\r\n\r\n    backup(_options: BackupOptions): RxBackupState {\r\n        throw pluginMissing('backup');\r\n    }\r\n\r\n    public leaderElector(): LeaderElector {\r\n        throw pluginMissing('leader-election');\r\n    }\r\n\r\n    public isLeader(): boolean {\r\n        throw pluginMissing('leader-election');\r\n    }\r\n    /**\r\n     * returns a promise which resolves when the instance becomes leader\r\n     */\r\n    public waitForLeadership(): Promise<boolean> {\r\n        throw pluginMissing('leader-election');\r\n    }\r\n\r\n    public migrationStates(): Observable<RxMigrationState[]> {\r\n        throw pluginMissing('migration-schema');\r\n    }\r\n\r\n    /**\r\n     * closes the database-instance and all collections\r\n     */\r\n    public async close(): Promise<boolean> {\r\n        if (this.closed) {\r\n            return PROMISE_RESOLVE_FALSE;\r\n        }\r\n\r\n        // settings closed = true must be the first thing to do.\r\n        this.closed = true;\r\n\r\n        await runAsyncPluginHooks('preCloseRxDatabase', this);\r\n        /**\r\n         * Complete the event stream\r\n         * to stop all subscribers who forgot to unsubscribe.\r\n         */\r\n        this.eventBulks$.complete();\r\n\r\n        DB_COUNT--;\r\n        this._subs.map(sub => sub.unsubscribe());\r\n\r\n        /**\r\n         * closing the pseudo instance will throw\r\n         * because stuff is missing\r\n         * TODO we should not need the pseudo instance on runtime.\r\n         * we should generate the property list on build time.\r\n         */\r\n        if (this.name === 'pseudoInstance') {\r\n            return PROMISE_RESOLVE_FALSE;\r\n        }\r\n\r\n        /**\r\n         * First wait until the database is idle\r\n         */\r\n        return this.requestIdlePromise()\r\n            .then(() => Promise.all(this.onClose.map(fn => fn())))\r\n            // close all collections\r\n            .then(() => Promise.all(\r\n                Object.keys(this.collections as any)\r\n                    .map(key => (this.collections as any)[key])\r\n                    .map(col => col.close())\r\n            ))\r\n            // close internal storage instances\r\n            .then(() => this.internalStore.close())\r\n            // remove combination from USED_COMBINATIONS-map\r\n            .then(() => USED_DATABASE_NAMES.delete(this.storage.name + '|' + this.name))\r\n            .then(() => true);\r\n    }\r\n\r\n    /**\r\n     * deletes the database and its stored data.\r\n     * Returns the names of all removed collections.\r\n     */\r\n    remove(): Promise<string[]> {\r\n        return this\r\n            .close()\r\n            .then(() => removeRxDatabase(this.name, this.storage, this.multiInstance, this.password));\r\n    }\r\n\r\n    get asRxDatabase(): RxDatabase<\r\n        {},\r\n        Internals,\r\n        InstanceCreationOptions,\r\n        Reactivity\r\n    > {\r\n        return this as any;\r\n    }\r\n}\r\n\r\n/**\r\n * checks if an instance with same name and storage already exists\r\n * @throws {RxError} if used\r\n */\r\nfunction throwIfDatabaseNameUsed(\r\n    name: string,\r\n    storage: RxStorage<any, any>\r\n) {\r\n    const key = storage.name + '|' + name;\r\n    if (!USED_DATABASE_NAMES.has(key)) {\r\n        return;\r\n    } else {\r\n        throw newRxError('DB8', {\r\n            name,\r\n            storage: storage.name,\r\n            link: 'https://rxdb.info/rx-database.html#ignoreduplicate'\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Creates the storage instances that are used internally in the database\r\n * to store schemas and other configuration stuff.\r\n */\r\nexport async function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\r\n    databaseInstanceToken: string,\r\n    storage: RxStorage<Internals, InstanceCreationOptions>,\r\n    databaseName: string,\r\n    options: InstanceCreationOptions,\r\n    multiInstance: boolean,\r\n    password?: string\r\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\r\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\r\n        {\r\n            databaseInstanceToken,\r\n            databaseName,\r\n            collectionName: INTERNAL_STORAGE_NAME,\r\n            schema: INTERNAL_STORE_SCHEMA,\r\n            options,\r\n            multiInstance,\r\n            password,\r\n            devMode: overwritable.isDevMode()\r\n        }\r\n    );\r\n    return internalStore;\r\n}\r\n\r\nexport function createRxDatabase<\r\n    Collections = { [key: string]: RxCollection; },\r\n    Internals = any,\r\n    InstanceCreationOptions = any,\r\n    Reactivity = unknown\r\n>(\r\n    {\r\n        storage,\r\n        instanceCreationOptions,\r\n        name,\r\n        password,\r\n        multiInstance = true,\r\n        eventReduce = true,\r\n        ignoreDuplicate = false,\r\n        options = {},\r\n        cleanupPolicy,\r\n        allowSlowCount = false,\r\n        localDocuments = false,\r\n        hashFunction = defaultHashSha256,\r\n        reactivity\r\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions, Reactivity>\r\n): Promise<\r\n    RxDatabase<Collections, Internals, InstanceCreationOptions, Reactivity>\r\n> {\r\n    runPluginHooks('preCreateRxDatabase', {\r\n        storage,\r\n        instanceCreationOptions,\r\n        name,\r\n        password,\r\n        multiInstance,\r\n        eventReduce,\r\n        ignoreDuplicate,\r\n        options,\r\n        localDocuments\r\n    });\r\n    // check if combination already used\r\n    if (!ignoreDuplicate) {\r\n        throwIfDatabaseNameUsed(name, storage);\r\n    } else {\r\n        if (!overwritable.isDevMode()) {\r\n            throw newRxError('DB9', {\r\n                database: name\r\n            });\r\n        }\r\n    }\r\n    USED_DATABASE_NAMES.add(storage.name + '|' + name);\r\n\r\n    const databaseInstanceToken = randomToken(10);\r\n\r\n    return createRxDatabaseStorageInstance<\r\n        Internals,\r\n        InstanceCreationOptions\r\n    >(\r\n        databaseInstanceToken,\r\n        storage,\r\n        name,\r\n        instanceCreationOptions as any,\r\n        multiInstance,\r\n        password\r\n    )\r\n        /**\r\n         * Creating the internal store might fail\r\n         * if some RxStorage wrapper is used that does some checks\r\n         * and then throw.\r\n         * In that case we have to properly clean up the database.\r\n         */\r\n        .catch(err => {\r\n            USED_DATABASE_NAMES.delete(storage.name + '|' + name);\r\n            throw err;\r\n        })\r\n        .then(storageInstance => {\r\n            const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\r\n                name,\r\n                databaseInstanceToken,\r\n                storage,\r\n                instanceCreationOptions,\r\n                password,\r\n                multiInstance,\r\n                eventReduce,\r\n                options,\r\n                storageInstance,\r\n                hashFunction,\r\n                cleanupPolicy,\r\n                allowSlowCount,\r\n                reactivity\r\n            ) as any;\r\n\r\n            return runAsyncPluginHooks('createRxDatabase', {\r\n                database: rxDatabase,\r\n                creator: {\r\n                    storage,\r\n                    instanceCreationOptions,\r\n                    name,\r\n                    password,\r\n                    multiInstance,\r\n                    eventReduce,\r\n                    ignoreDuplicate,\r\n                    options,\r\n                    localDocuments\r\n                }\r\n            }).then(() => rxDatabase);\r\n        });\r\n}\r\n\r\n/**\r\n * Removes the database and all its known data\r\n * with all known collections and all internal meta data.\r\n *\r\n * Returns the names of the removed collections.\r\n */\r\nexport async function removeRxDatabase(\r\n    databaseName: string,\r\n    storage: RxStorage<any, any>,\r\n    multiInstance: boolean = true,\r\n    password?: string\r\n): Promise<string[]> {\r\n    const databaseInstanceToken = randomToken(10);\r\n    const dbInternalsStorageInstance = await createRxDatabaseStorageInstance(\r\n        databaseInstanceToken,\r\n        storage,\r\n        databaseName,\r\n        {},\r\n        multiInstance,\r\n        password\r\n    );\r\n    const collectionDocs = await getAllCollectionDocuments(dbInternalsStorageInstance);\r\n    const collectionNames = new Set<string>();\r\n    collectionDocs.forEach(doc => collectionNames.add(doc.data.name));\r\n    const removedCollectionNames: string[] = Array.from(collectionNames);\r\n\r\n    await Promise.all(\r\n        removedCollectionNames.map(collectionName => removeCollectionStorages(\r\n            storage,\r\n            dbInternalsStorageInstance,\r\n            databaseInstanceToken,\r\n            databaseName,\r\n            collectionName,\r\n            multiInstance,\r\n            password\r\n        ))\r\n    );\r\n\r\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\r\n        databaseName,\r\n        storage\r\n    });\r\n\r\n    await dbInternalsStorageInstance.remove();\r\n    return removedCollectionNames;\r\n}\r\n\r\nexport function isRxDatabase(obj: any) {\r\n    return obj instanceof RxDatabaseBase;\r\n}\r\n\r\nexport function dbCount(): number {\r\n    return DB_COUNT;\r\n}\r\n\r\n\r\n/**\r\n * Returns true if the given RxDatabase was the first\r\n * instance that was created on the storage with this name.\r\n *\r\n * Can be used for some optimizations because on the first instantiation,\r\n * we can assume that no data was written before.\r\n */\r\nexport async function isRxDatabaseFirstTimeInstantiated(\r\n    database: RxDatabase\r\n): Promise<boolean> {\r\n    const tokenDoc = await database.storageTokenDocument;\r\n    return tokenDoc.data.instanceToken === database.token;\r\n}\r\n\r\n\r\n/**\r\n * For better performance some tasks run async\r\n * and are awaited later.\r\n * But we still have to ensure that there have been no errors\r\n * on database creation.\r\n */\r\nexport async function ensureNoStartupErrors(\r\n    rxDatabase: RxDatabaseBase<any, any, any, any>\r\n) {\r\n    await rxDatabase.storageToken;\r\n    if (rxDatabase.startupErrors[0]) {\r\n        throw rxDatabase.startupErrors[0];\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]}