{"version":3,"file":"rx-storage-helper.js","names":["overwritable","newRxError","getPrimaryFieldOfPrimaryKey","PROMISE_RESOLVE_TRUE","RXDB_VERSION","RX_META_LWT_MINIMUM","appendToArray","createRevision","ensureNotFalsy","flatClone","getFromMapOrCreate","lastOfArray","now","promiseWait","randomToken","filter","map","startWith","switchMap","normalizeMangoQuery","prepareQuery","runPluginHooks","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","getSingleDocument","storageInstance","documentId","results","findDocumentsById","doc","undefined","writeSingle","instance","writeRow","context","writeResult","bulkWrite","error","length","primaryPath","schema","primaryKey","success","getWrittenDocumentsFromBulkWriteResponse","ret","observeSingle","firstFindPromise","changeStream","pipe","evBulk","events","find","ev","Promise","resolve","documentData","v","stackCheckpoints","checkpoints","Object","assign","throwIfIsStorageWriteError","collection","writeData","status","name","id","writeError","data","categorizeBulkWriteRows","docsInDb","bulkWriteRows","onInsert","onUpdate","hasAttachments","attachments","bulkInsertDocs","bulkUpdateDocs","errors","eventBulkId","eventBulk","checkpoint","eventBulkEvents","attachmentsAdd","attachmentsRemove","attachmentsUpdate","hasDocsInDb","size","newestRow","rowAmount","_loop","rowId","document","previous","docId","documentDeleted","_deleted","previousDeleted","documentInDb","get","attachmentError","insertedIsDeleted","entries","_attachments","forEach","attachmentId","attachmentData","isError","push","digest","stripAttachmentsDataFromRow","event","operation","stripAttachmentsDataFromDocument","previousDocumentData","revInDb","_rev","err","updatedRow","keys","previousAttachmentData","newDigest","eventDocumentData","previousEventDocumentData","args","getAttachmentSize","attachmentBase64String","atob","attachmentWriteDataToNormalData","type","useDoc","flatCloneDocWithMeta","_meta","getWrappedStorageInstance","database","rxJsonSchema","deepFreezeWhenDevMode","originalStorageInstance","internals","collectionName","databaseName","options","rows","databaseToken","token","toStorageWriteRows","Array","time","index","lwt","lockedRun","useWriteResult","BULK_WRITE_ROWS_BY_RESPONSE","set","reInsertErrors","reInsertIds","Set","reInserts","add","subResult","successArray","subSuccess","query","preparedQuery","count","ids","deleted","getAttachmentData","getChangedDocumentsSince","limit","cleanup","minDeletedTime","remove","storageInstances","delete","close","ensureRxStorageInstanceParamsAreCorrect","params","keyCompression","hasEncryption","compression","jsonSchema","encrypted","getChangedDocumentsSinceQuery","sinceLwt","sinceId","selector","$or","$gt","$eq","$gte","sort","skip","result","documents","lastDoc","WeakMap","BULK_WRITE_SUCCESS_MAP","writeRows","response","realWriteRows","errorIds","has","randomDelayStorage","input","randomDelayStorageWriteQueue","retStorage","storage","rxdbVersion","createStorageInstance","delayTimeBefore","delayTimeAfter","a","b","then","c"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\r\n * Helper functions for accessing the RxStorage instances.\r\n */\r\n\r\nimport { overwritable } from './overwritable.ts';\r\nimport { newRxError } from './rx-error.ts';\r\nimport {\r\n    getPrimaryFieldOfPrimaryKey\r\n} from './rx-schema-helper.ts';\r\nimport type {\r\n    BulkWriteRow,\r\n    BulkWriteRowProcessed,\r\n    CategorizeBulkWriteRowsOutput,\r\n    EventBulk,\r\n    RxAttachmentData,\r\n    RxAttachmentWriteData,\r\n    RxCollection,\r\n    RxDatabase,\r\n    RxDocumentData,\r\n    RxDocumentWriteData,\r\n    RxJsonSchema,\r\n    RxStorageWriteError,\r\n    RxStorageChangeEvent,\r\n    RxStorageInstance,\r\n    RxStorageInstanceCreationParams,\r\n    StringKeys,\r\n    RxStorageWriteErrorConflict,\r\n    RxStorageWriteErrorAttachment,\r\n    RxStorage,\r\n    RxStorageDefaultCheckpoint,\r\n    FilledMangoQuery,\r\n    RxStorageBulkWriteResponse\r\n} from './types/index.d.ts';\r\nimport {\r\n    PROMISE_RESOLVE_TRUE,\r\n    RXDB_VERSION,\r\n    RX_META_LWT_MINIMUM,\r\n    appendToArray,\r\n    createRevision,\r\n    ensureNotFalsy,\r\n    flatClone,\r\n    getFromMapOrCreate,\r\n    lastOfArray,\r\n    now,\r\n    promiseWait,\r\n    randomToken\r\n} from './plugins/utils/index.ts';\r\nimport { Observable, filter, map, startWith, switchMap } from 'rxjs';\r\nimport { normalizeMangoQuery, prepareQuery } from './rx-query-helper.ts';\r\nimport { runPluginHooks } from './hooks.ts';\r\n\r\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\r\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\r\n\r\nexport async function getSingleDocument<RxDocType>(\r\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\r\n    documentId: string\r\n): Promise<RxDocumentData<RxDocType> | undefined> {\r\n    const results = await storageInstance.findDocumentsById([documentId], false);\r\n    const doc = results[0];\r\n    if (doc) {\r\n        return doc;\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\n/**\r\n * Writes a single document,\r\n * throws RxStorageBulkWriteError on failure\r\n */\r\nexport async function writeSingle<RxDocType>(\r\n    instance: RxStorageInstance<RxDocType, any, any>,\r\n    writeRow: BulkWriteRow<RxDocType>,\r\n    context: string\r\n): Promise<RxDocumentData<RxDocType>> {\r\n    const writeResult = await instance.bulkWrite(\r\n        [writeRow],\r\n        context\r\n    );\r\n    if (writeResult.error.length > 0) {\r\n        const error = writeResult.error[0];\r\n        throw error;\r\n    } else {\r\n        const primaryPath = getPrimaryFieldOfPrimaryKey(instance.schema.primaryKey);\r\n        const success = getWrittenDocumentsFromBulkWriteResponse(primaryPath, [writeRow], writeResult);\r\n        const ret = success[0];\r\n        return ret;\r\n    }\r\n}\r\n\r\n/**\r\n * Observe the plain document data of a single document.\r\n * Do not forget to unsubscribe.\r\n */\r\nexport function observeSingle<RxDocType>(\r\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\r\n    documentId: string\r\n): Observable<RxDocumentData<RxDocType>> {\r\n    const firstFindPromise = getSingleDocument(storageInstance, documentId);\r\n    const ret = storageInstance\r\n        .changeStream()\r\n        .pipe(\r\n            map(evBulk => evBulk.events.find(ev => ev.documentId === documentId)),\r\n            filter(ev => !!ev),\r\n            map(ev => Promise.resolve(ensureNotFalsy(ev).documentData)),\r\n            startWith(firstFindPromise),\r\n            switchMap(v => v),\r\n            filter(v => !!v)\r\n        ) as any;\r\n    return ret;\r\n}\r\n\r\n/**\r\n * Checkpoints must be stackable over another.\r\n * This is required form some RxStorage implementations\r\n * like the sharding plugin, where a checkpoint only represents\r\n * the document state from some, but not all shards.\r\n */\r\nexport function stackCheckpoints<CheckpointType>(\r\n    checkpoints: CheckpointType[]\r\n): CheckpointType {\r\n    return Object.assign(\r\n        {},\r\n        ...checkpoints\r\n    );\r\n}\r\n\r\nexport function throwIfIsStorageWriteError<RxDocType>(\r\n    collection: RxCollection<RxDocType, any, any>,\r\n    documentId: string,\r\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\r\n    error: RxStorageWriteError<RxDocType> | undefined\r\n) {\r\n    if (error) {\r\n        if (error.status === 409) {\r\n            throw newRxError('CONFLICT', {\r\n                collection: collection.name,\r\n                id: documentId,\r\n                writeError: error,\r\n                data: writeData\r\n            });\r\n        } else if (error.status === 422) {\r\n            throw newRxError('VD2', {\r\n                collection: collection.name,\r\n                id: documentId,\r\n                writeError: error,\r\n                data: writeData\r\n            });\r\n        } else {\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Analyzes a list of BulkWriteRows and determines\r\n * which documents must be inserted, updated or deleted\r\n * and which events must be emitted and which documents cause a conflict\r\n * and must not be written.\r\n * Used as helper inside of some RxStorage implementations.\r\n * @hotPath The performance of this function is critical\r\n */\r\nexport function categorizeBulkWriteRows<RxDocType>(\r\n    storageInstance: RxStorageInstance<any, any, any>,\r\n    primaryPath: StringKeys<RxDocType>,\r\n    /**\r\n     * Current state of the documents\r\n     * inside of the storage. Used to determine\r\n     * which writes cause conflicts.\r\n     * This must be a Map for better performance.\r\n     */\r\n    docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>>,\r\n    /**\r\n     * The write rows that are passed to\r\n     * RxStorageInstance().bulkWrite().\r\n     */\r\n    bulkWriteRows: BulkWriteRow<RxDocType>[],\r\n    context: string,\r\n    /**\r\n     * Used by some storages for better performance.\r\n     * For example when get-by-id and insert/update can run in parallel.\r\n     */\r\n    onInsert?: (docData: RxDocumentData<RxDocType>) => void,\r\n    onUpdate?: (docData: RxDocumentData<RxDocType>) => void\r\n): CategorizeBulkWriteRowsOutput<RxDocType> {\r\n    const hasAttachments = !!storageInstance.schema.attachments;\r\n    const bulkInsertDocs: BulkWriteRowProcessed<RxDocType>[] = [];\r\n    const bulkUpdateDocs: BulkWriteRowProcessed<RxDocType>[] = [];\r\n    const errors: RxStorageWriteError<RxDocType>[] = [];\r\n    const eventBulkId = randomToken(10);\r\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\r\n        id: eventBulkId,\r\n        events: [],\r\n        checkpoint: null,\r\n        context\r\n    };\r\n    const eventBulkEvents = eventBulk.events;\r\n\r\n    const attachmentsAdd: {\r\n        documentId: string;\r\n        attachmentId: string;\r\n        attachmentData: RxAttachmentWriteData;\r\n        digest: string;\r\n    }[] = [];\r\n    const attachmentsRemove: {\r\n        documentId: string;\r\n        attachmentId: string;\r\n        digest: string;\r\n    }[] = [];\r\n    const attachmentsUpdate: {\r\n        documentId: string;\r\n        attachmentId: string;\r\n        attachmentData: RxAttachmentWriteData;\r\n        digest: string;\r\n    }[] = [];\r\n\r\n    const hasDocsInDb = docsInDb.size > 0;\r\n    let newestRow: BulkWriteRowProcessed<RxDocType> | undefined;\r\n\r\n    /**\r\n     * @performance is really important in this loop!\r\n     */\r\n    const rowAmount = bulkWriteRows.length;\r\n    for (let rowId = 0; rowId < rowAmount; rowId++) {\r\n        const writeRow = bulkWriteRows[rowId];\r\n\r\n        // use these variables to have less property accesses\r\n        const document = writeRow.document;\r\n        const previous = writeRow.previous;\r\n        const docId = document[primaryPath] as string;\r\n        const documentDeleted = document._deleted;\r\n        const previousDeleted = previous && previous._deleted;\r\n\r\n        let documentInDb: RxDocumentData<RxDocType> | undefined = undefined as any;\r\n        if (hasDocsInDb) {\r\n            documentInDb = docsInDb.get(docId);\r\n        }\r\n        let attachmentError: RxStorageWriteErrorAttachment<RxDocType> | undefined;\r\n\r\n        if (!documentInDb) {\r\n            /**\r\n             * It is possible to insert already deleted documents,\r\n             * this can happen on replication.\r\n             */\r\n            const insertedIsDeleted = documentDeleted ? true : false;\r\n            if (hasAttachments) {\r\n                Object\r\n                    .entries(document._attachments)\r\n                    .forEach(([attachmentId, attachmentData]) => {\r\n                        if (\r\n                            !(attachmentData as RxAttachmentWriteData).data\r\n                        ) {\r\n                            attachmentError = {\r\n                                documentId: docId,\r\n                                isError: true,\r\n                                status: 510,\r\n                                writeRow,\r\n                                attachmentId\r\n                            };\r\n                            errors.push(attachmentError);\r\n                        } else {\r\n                            attachmentsAdd.push({\r\n                                documentId: docId,\r\n                                attachmentId,\r\n                                attachmentData: attachmentData as any,\r\n                                digest: attachmentData.digest\r\n                            });\r\n                        }\r\n                    });\r\n            }\r\n            if (!attachmentError) {\r\n                if (hasAttachments) {\r\n                    bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\r\n                    if (onInsert) {\r\n                        onInsert(document);\r\n                    }\r\n                } else {\r\n                    bulkInsertDocs.push(writeRow as any);\r\n                    if (onInsert) {\r\n                        onInsert(document);\r\n                    }\r\n                }\r\n\r\n                newestRow = writeRow as any;\r\n            }\r\n\r\n            if (!insertedIsDeleted) {\r\n                const event = {\r\n                    documentId: docId,\r\n                    operation: 'INSERT' as const,\r\n                    documentData: hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any,\r\n                    previousDocumentData: hasAttachments && previous ? stripAttachmentsDataFromDocument(previous) : previous as any\r\n                };\r\n                eventBulkEvents.push(event);\r\n            }\r\n        } else {\r\n            // update existing document\r\n            const revInDb: string = documentInDb._rev;\r\n\r\n            /**\r\n             * Check for conflict\r\n             */\r\n            if (\r\n                (\r\n                    !previous\r\n                ) ||\r\n                (\r\n                    !!previous &&\r\n                    revInDb !== previous._rev\r\n                )\r\n            ) {\r\n                // is conflict error\r\n                const err: RxStorageWriteError<RxDocType> = {\r\n                    isError: true,\r\n                    status: 409,\r\n                    documentId: docId,\r\n                    writeRow: writeRow,\r\n                    documentInDb\r\n                };\r\n                errors.push(err);\r\n                continue;\r\n            }\r\n\r\n            // handle attachments data\r\n\r\n            const updatedRow: BulkWriteRowProcessed<RxDocType> = hasAttachments ? stripAttachmentsDataFromRow(writeRow) : writeRow as any;\r\n            if (hasAttachments) {\r\n                if (documentDeleted) {\r\n                    /**\r\n                     * Deleted documents must have cleared all their attachments.\r\n                     */\r\n                    if (previous) {\r\n                        Object\r\n                            .keys(previous._attachments)\r\n                            .forEach(attachmentId => {\r\n                                attachmentsRemove.push({\r\n                                    documentId: docId,\r\n                                    attachmentId,\r\n                                    digest: ensureNotFalsy(previous)._attachments[attachmentId].digest\r\n                                });\r\n                            });\r\n                    }\r\n                } else {\r\n                    // first check for errors\r\n                    Object\r\n                        .entries(document._attachments)\r\n                        .find(([attachmentId, attachmentData]) => {\r\n                            const previousAttachmentData = previous ? previous._attachments[attachmentId] : undefined;\r\n                            if (\r\n                                !previousAttachmentData &&\r\n                                !(attachmentData as RxAttachmentWriteData).data\r\n                            ) {\r\n                                attachmentError = {\r\n                                    documentId: docId,\r\n                                    documentInDb: documentInDb as any,\r\n                                    isError: true,\r\n                                    status: 510,\r\n                                    writeRow,\r\n                                    attachmentId\r\n                                };\r\n                            }\r\n                            return true;\r\n                        });\r\n                    if (!attachmentError) {\r\n                        Object\r\n                            .entries(document._attachments)\r\n                            .forEach(([attachmentId, attachmentData]) => {\r\n                                const previousAttachmentData = previous ? previous._attachments[attachmentId] : undefined;\r\n                                if (!previousAttachmentData) {\r\n                                    attachmentsAdd.push({\r\n                                        documentId: docId,\r\n                                        attachmentId,\r\n                                        attachmentData: attachmentData as any,\r\n                                        digest: attachmentData.digest\r\n                                    });\r\n                                } else {\r\n                                    const newDigest = updatedRow.document._attachments[attachmentId].digest;\r\n                                    if (\r\n                                        (attachmentData as RxAttachmentWriteData).data &&\r\n                                        /**\r\n                                         * Performance shortcut,\r\n                                         * do not update the attachment data if it did not change.\r\n                                         */\r\n                                        previousAttachmentData.digest !== newDigest\r\n                                    ) {\r\n                                        attachmentsUpdate.push({\r\n                                            documentId: docId,\r\n                                            attachmentId,\r\n                                            attachmentData: attachmentData as RxAttachmentWriteData,\r\n                                            digest: attachmentData.digest\r\n                                        });\r\n                                    }\r\n                                }\r\n                            });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (attachmentError) {\r\n                errors.push(attachmentError);\r\n            } else {\r\n                if (hasAttachments) {\r\n                    bulkUpdateDocs.push(stripAttachmentsDataFromRow(updatedRow));\r\n                    if (onUpdate) {\r\n                        onUpdate(document);\r\n                    }\r\n                } else {\r\n                    bulkUpdateDocs.push(updatedRow);\r\n                    if (onUpdate) {\r\n                        onUpdate(document);\r\n                    }\r\n                }\r\n                newestRow = updatedRow as any;\r\n            }\r\n\r\n            let eventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\r\n            let previousEventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\r\n            let operation: 'INSERT' | 'UPDATE' | 'DELETE' = null as any;\r\n\r\n            if (previousDeleted && !documentDeleted) {\r\n                operation = 'INSERT';\r\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any;\r\n            } else if (previous && !previousDeleted && !documentDeleted) {\r\n                operation = 'UPDATE';\r\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any;\r\n                previousEventDocumentData = previous;\r\n            } else if (documentDeleted) {\r\n                operation = 'DELETE';\r\n                eventDocumentData = ensureNotFalsy(document) as any;\r\n                previousEventDocumentData = previous;\r\n            } else {\r\n                throw newRxError('SNH', { args: { writeRow } });\r\n            }\r\n\r\n            const event = {\r\n                documentId: docId,\r\n                documentData: eventDocumentData as RxDocumentData<RxDocType>,\r\n                previousDocumentData: previousEventDocumentData,\r\n                operation: operation\r\n            };\r\n            eventBulkEvents.push(event);\r\n        }\r\n    }\r\n\r\n    return {\r\n        bulkInsertDocs,\r\n        bulkUpdateDocs,\r\n        newestRow,\r\n        errors,\r\n        eventBulk,\r\n        attachmentsAdd,\r\n        attachmentsRemove,\r\n        attachmentsUpdate\r\n    };\r\n}\r\n\r\nexport function stripAttachmentsDataFromRow<RxDocType>(writeRow: BulkWriteRow<RxDocType>): BulkWriteRowProcessed<RxDocType> {\r\n    return {\r\n        previous: writeRow.previous,\r\n        document: stripAttachmentsDataFromDocument(writeRow.document)\r\n    };\r\n}\r\n\r\nexport function getAttachmentSize(\r\n    attachmentBase64String: string\r\n): number {\r\n    return atob(attachmentBase64String).length;\r\n}\r\n\r\n/**\r\n * Used in custom RxStorage implementations.\r\n */\r\nexport function attachmentWriteDataToNormalData(writeData: RxAttachmentData | RxAttachmentWriteData): RxAttachmentData {\r\n    const data = (writeData as RxAttachmentWriteData).data;\r\n    if (!data) {\r\n        return writeData as any;\r\n    }\r\n    const ret: RxAttachmentData = {\r\n        length: getAttachmentSize(data),\r\n        digest: writeData.digest,\r\n        type: writeData.type\r\n    };\r\n    return ret;\r\n}\r\n\r\nexport function stripAttachmentsDataFromDocument<RxDocType>(doc: RxDocumentWriteData<RxDocType>): RxDocumentData<RxDocType> {\r\n    if (!doc._attachments || Object.keys(doc._attachments).length === 0) {\r\n        return doc;\r\n    }\r\n\r\n    const useDoc: RxDocumentData<RxDocType> = flatClone(doc) as any;\r\n    useDoc._attachments = {};\r\n    Object\r\n        .entries(doc._attachments)\r\n        .forEach(([attachmentId, attachmentData]) => {\r\n            useDoc._attachments[attachmentId] = attachmentWriteDataToNormalData(attachmentData);\r\n        });\r\n    return useDoc;\r\n}\r\n\r\n/**\r\n * Flat clone the document data\r\n * and also the _meta field.\r\n * Used many times when we want to change the meta\r\n * during replication etc.\r\n */\r\nexport function flatCloneDocWithMeta<RxDocType>(\r\n    doc: RxDocumentData<RxDocType>\r\n): RxDocumentData<RxDocType> {\r\n    return Object.assign(\r\n        {},\r\n        doc,\r\n        {\r\n            _meta: flatClone(doc._meta)\r\n        }\r\n    );\r\n}\r\n\r\nexport type WrappedRxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions> = RxStorageInstance<RxDocumentType, any, InstanceCreationOptions> & {\r\n    originalStorageInstance: RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>;\r\n};\r\n\r\n/**\r\n * Wraps the normal storageInstance of a RxCollection\r\n * to ensure that all access is properly using the hooks\r\n * and other data transformations and also ensure that database.lockedRun()\r\n * is used properly.\r\n */\r\nexport function getWrappedStorageInstance<\r\n    RxDocType,\r\n    Internals,\r\n    InstanceCreationOptions,\r\n    CheckpointType\r\n>(\r\n    database: RxDatabase<{}, Internals, InstanceCreationOptions, any>,\r\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions, CheckpointType>,\r\n    /**\r\n     * The original RxJsonSchema\r\n     * before it was mutated by hooks.\r\n     */\r\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\r\n): WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\r\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\r\n\r\n    const primaryPath = getPrimaryFieldOfPrimaryKey(storageInstance.schema.primaryKey);\r\n\r\n    const ret: WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\r\n        originalStorageInstance: storageInstance,\r\n        schema: storageInstance.schema,\r\n        internals: storageInstance.internals,\r\n        collectionName: storageInstance.collectionName,\r\n        databaseName: storageInstance.databaseName,\r\n        options: storageInstance.options,\r\n        async bulkWrite(\r\n            rows: BulkWriteRow<RxDocType>[],\r\n            context: string\r\n        ) {\r\n            const databaseToken = database.token;\r\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = new Array(rows.length);\r\n            /**\r\n             * Use the same timestamp for all docs of this rows-set.\r\n             * This improves performance because calling Date.now() inside of the now() function\r\n             * is too costly.\r\n             */\r\n            const time = now();\r\n            for (let index = 0; index < rows.length; index++) {\r\n                const writeRow = rows[index];\r\n                const document = flatCloneDocWithMeta(writeRow.document);\r\n                document._meta.lwt = time;\r\n\r\n                /**\r\n                 * Yes we really want to set the revision here.\r\n                 * If you make a plugin that relies on having its own revision\r\n                 * stored into the storage, use this.originalStorageInstance.bulkWrite() instead.\r\n                 */\r\n                const previous = writeRow.previous;\r\n                document._rev = createRevision(\r\n                    databaseToken,\r\n                    previous\r\n                );\r\n                toStorageWriteRows[index] = {\r\n                    document,\r\n                    previous\r\n                };\r\n            }\r\n\r\n            runPluginHooks('preStorageWrite', {\r\n                storageInstance: this.originalStorageInstance,\r\n                rows: toStorageWriteRows\r\n            });\r\n\r\n            const writeResult = await database.lockedRun(\r\n                () => storageInstance.bulkWrite(\r\n                    toStorageWriteRows,\r\n                    context\r\n                )\r\n            );\r\n\r\n            /**\r\n             * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\r\n             * without sending the previous document version.\r\n             * But for better developer experience, RxDB does allow to re-insert deleted documents.\r\n             * We do this by automatically fixing the conflict errors for that case\r\n             * by running another bulkWrite() and merging the results.\r\n             * @link https://github.com/pubkey/rxdb/pull/3839\r\n            */\r\n            const useWriteResult: typeof writeResult = {\r\n                error: []\r\n            };\r\n            BULK_WRITE_ROWS_BY_RESPONSE.set(useWriteResult, toStorageWriteRows);\r\n\r\n            const reInsertErrors: RxStorageWriteErrorConflict<RxDocType>[] = writeResult.error.length === 0\r\n                ? []\r\n                : writeResult.error\r\n                    .filter((error) => {\r\n                        if (\r\n                            error.status === 409 &&\r\n                            !error.writeRow.previous &&\r\n                            !error.writeRow.document._deleted &&\r\n                            ensureNotFalsy(error.documentInDb)._deleted\r\n                        ) {\r\n                            return true;\r\n                        }\r\n\r\n                        // add the \"normal\" errors to the parent error array.\r\n                        useWriteResult.error.push(error);\r\n                        return false;\r\n                    }) as any;\r\n            if (reInsertErrors.length > 0) {\r\n                const reInsertIds = new Set<string>();\r\n                const reInserts: BulkWriteRow<RxDocType>[] = reInsertErrors\r\n                    .map((error) => {\r\n                        reInsertIds.add(error.documentId);\r\n                        return {\r\n                            previous: error.documentInDb,\r\n                            document: Object.assign(\r\n                                {},\r\n                                error.writeRow.document,\r\n                                {\r\n                                    _rev: createRevision(\r\n                                        database.token,\r\n                                        error.documentInDb\r\n                                    )\r\n                                }\r\n                            )\r\n                        };\r\n                    });\r\n\r\n                const subResult = await database.lockedRun(\r\n                    () => storageInstance.bulkWrite(\r\n                        reInserts,\r\n                        context\r\n                    )\r\n                );\r\n\r\n                appendToArray(useWriteResult.error, subResult.error);\r\n                const successArray = getWrittenDocumentsFromBulkWriteResponse(\r\n                    primaryPath,\r\n                    toStorageWriteRows,\r\n                    useWriteResult,\r\n                    reInsertIds\r\n                );\r\n                const subSuccess = getWrittenDocumentsFromBulkWriteResponse(\r\n                    primaryPath,\r\n                    reInserts,\r\n                    subResult\r\n                );\r\n                appendToArray(successArray, subSuccess);\r\n                return useWriteResult;\r\n            }\r\n            return useWriteResult;\r\n        },\r\n        query(preparedQuery) {\r\n            return database.lockedRun(\r\n                () => storageInstance.query(preparedQuery)\r\n            );\r\n        },\r\n        count(preparedQuery) {\r\n            return database.lockedRun(\r\n                () => storageInstance.count(preparedQuery)\r\n            );\r\n        },\r\n        findDocumentsById(ids, deleted) {\r\n            return database.lockedRun(\r\n                () => storageInstance.findDocumentsById(ids, deleted)\r\n            );\r\n        },\r\n        getAttachmentData(\r\n            documentId: string,\r\n            attachmentId: string,\r\n            digest: string\r\n        ) {\r\n            return database.lockedRun(\r\n                () => storageInstance.getAttachmentData(documentId, attachmentId, digest)\r\n            );\r\n        },\r\n        getChangedDocumentsSince: !storageInstance.getChangedDocumentsSince ? undefined : (limit: number, checkpoint?: any) => {\r\n            return database.lockedRun(\r\n                () => ((storageInstance as any).getChangedDocumentsSince)(ensureNotFalsy(limit), checkpoint)\r\n            );\r\n        },\r\n        cleanup(minDeletedTime: number) {\r\n            return database.lockedRun(\r\n                () => storageInstance.cleanup(minDeletedTime)\r\n            );\r\n        },\r\n        remove() {\r\n            database.storageInstances.delete(ret);\r\n            return database.lockedRun(\r\n                () => storageInstance.remove()\r\n            );\r\n        },\r\n        close() {\r\n            database.storageInstances.delete(ret);\r\n            return database.lockedRun(\r\n                () => storageInstance.close()\r\n            );\r\n        },\r\n        changeStream() {\r\n            return storageInstance.changeStream();\r\n        }\r\n    };\r\n\r\n    database.storageInstances.add(ret);\r\n    return ret;\r\n}\r\n\r\n/**\r\n * Each RxStorage implementation should\r\n * run this method at the first step of createStorageInstance()\r\n * to ensure that the configuration is correct.\r\n */\r\nexport function ensureRxStorageInstanceParamsAreCorrect(\r\n    params: RxStorageInstanceCreationParams<any, any>\r\n) {\r\n    if (params.schema.keyCompression) {\r\n        throw newRxError('UT5', { args: { params } });\r\n    }\r\n    if (hasEncryption(params.schema)) {\r\n        throw newRxError('UT6', { args: { params } });\r\n    }\r\n    if (\r\n        params.schema.attachments &&\r\n        params.schema.attachments.compression\r\n    ) {\r\n        throw newRxError('UT7', { args: { params } });\r\n    }\r\n}\r\n\r\nexport function hasEncryption(jsonSchema: RxJsonSchema<any>): boolean {\r\n    if (\r\n        (!!jsonSchema.encrypted && jsonSchema.encrypted.length > 0) ||\r\n        (jsonSchema.attachments && jsonSchema.attachments.encrypted)\r\n    ) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function getChangedDocumentsSinceQuery<RxDocType, CheckpointType>(\r\n    storageInstance: RxStorageInstance<RxDocType, any, any, CheckpointType>,\r\n    limit: number,\r\n    checkpoint?: CheckpointType\r\n): FilledMangoQuery<RxDocType> {\r\n    const primaryPath = getPrimaryFieldOfPrimaryKey(storageInstance.schema.primaryKey);\r\n    const sinceLwt = checkpoint ? (checkpoint as unknown as RxStorageDefaultCheckpoint).lwt : RX_META_LWT_MINIMUM;\r\n    const sinceId = checkpoint ? (checkpoint as unknown as RxStorageDefaultCheckpoint).id : '';\r\n    return normalizeMangoQuery(storageInstance.schema, {\r\n        selector: {\r\n            $or: [\r\n                {\r\n                    '_meta.lwt': {\r\n                        $gt: sinceLwt\r\n                    }\r\n                },\r\n                {\r\n                    '_meta.lwt': {\r\n                        $eq: sinceLwt\r\n                    },\r\n                    [primaryPath]: {\r\n                        $gt: checkpoint ? sinceId : ''\r\n                    }\r\n                }\r\n            ],\r\n            // add this hint for better index usage\r\n            '_meta.lwt': {\r\n                $gte: sinceLwt\r\n            }\r\n        } as any,\r\n        sort: [\r\n            { '_meta.lwt': 'asc' },\r\n            { [primaryPath]: 'asc' }\r\n        ] as any,\r\n        skip: 0,\r\n        limit,\r\n        /**\r\n         * DO NOT SET A SPECIFIC INDEX HERE!\r\n         * The query might be modified by some plugin\r\n         * before sending it to the storage.\r\n         * We can be sure that in the end the query planner\r\n         * will find the best index.\r\n         */\r\n        // index: ['_meta.lwt', primaryPath]\r\n    });\r\n}\r\n\r\nexport async function getChangedDocumentsSince<RxDocType, CheckpointType>(\r\n    storageInstance: RxStorageInstance<RxDocType, any, any, CheckpointType>,\r\n    limit: number,\r\n    checkpoint?: CheckpointType\r\n): Promise<{\r\n    documents: RxDocumentData<RxDocType>[];\r\n    /**\r\n     * The checkpoint contains data so that another\r\n     * call to getChangedDocumentsSince() will continue\r\n     * from exactly the last document that was returned before.\r\n     */\r\n    checkpoint: CheckpointType;\r\n}> {\r\n    if (storageInstance.getChangedDocumentsSince) {\r\n        return storageInstance.getChangedDocumentsSince(limit, checkpoint);\r\n    }\r\n\r\n    const primaryPath = getPrimaryFieldOfPrimaryKey(storageInstance.schema.primaryKey);\r\n    const query = prepareQuery<RxDocumentData<any>>(\r\n        storageInstance.schema,\r\n        getChangedDocumentsSinceQuery(\r\n            storageInstance,\r\n            limit,\r\n            checkpoint\r\n        )\r\n    );\r\n\r\n    const result = await storageInstance.query(query);\r\n    const documents = result.documents;\r\n    const lastDoc = lastOfArray(documents);\r\n\r\n    return {\r\n        documents: documents,\r\n        checkpoint: lastDoc ? {\r\n            id: (lastDoc as any)[primaryPath],\r\n            lwt: lastDoc._meta.lwt\r\n        } as any : checkpoint ? checkpoint : {\r\n            id: '',\r\n            lwt: 0\r\n        }\r\n    };\r\n}\r\n\r\n\r\nconst BULK_WRITE_ROWS_BY_RESPONSE = new WeakMap<RxStorageBulkWriteResponse<any>, BulkWriteRow<any>[]>();\r\nconst BULK_WRITE_SUCCESS_MAP = new WeakMap<RxStorageBulkWriteResponse<any>, RxDocumentData<any>[]>();\r\n\r\n/**\r\n * For better performance, this is done only when accessed\r\n * because most of the time we do not need the results, only the errors.\r\n */\r\nexport function getWrittenDocumentsFromBulkWriteResponse<RxDocType>(\r\n    primaryPath: string,\r\n    writeRows: BulkWriteRow<RxDocType>[],\r\n    response: RxStorageBulkWriteResponse<RxDocType>,\r\n    reInsertIds?: Set<string>\r\n): RxDocumentData<RxDocType>[] {\r\n    return getFromMapOrCreate(\r\n        BULK_WRITE_SUCCESS_MAP,\r\n        response,\r\n        () => {\r\n            const ret: RxDocumentData<RxDocType>[] = [];\r\n            let realWriteRows = BULK_WRITE_ROWS_BY_RESPONSE.get(response);\r\n            if (!realWriteRows) {\r\n                realWriteRows = writeRows;\r\n            }\r\n            if (response.error.length > 0 || reInsertIds) {\r\n                const errorIds = reInsertIds ? reInsertIds : new Set<string>();\r\n                for (let index = 0; index < response.error.length; index++) {\r\n                    const error = response.error[index];\r\n                    errorIds.add(error.documentId);\r\n                }\r\n\r\n                for (let index = 0; index < realWriteRows.length; index++) {\r\n                    const doc = realWriteRows[index].document;\r\n                    if (!errorIds.has((doc as any)[primaryPath])) {\r\n                        ret.push(stripAttachmentsDataFromDocument(doc));\r\n                    }\r\n                }\r\n            } else {\r\n                // pre-set array size for better performance\r\n                ret.length = writeRows.length - response.error.length;\r\n                for (let index = 0; index < realWriteRows.length; index++) {\r\n                    const doc = realWriteRows[index].document;\r\n                    ret[index] = stripAttachmentsDataFromDocument(doc);\r\n                }\r\n            }\r\n            return ret;\r\n        }\r\n    );\r\n}\r\n\r\n\r\n/**\r\n * Wraps the storage and simluates\r\n * delays. Mostly used in tests.\r\n */\r\nexport function randomDelayStorage<Internals, InstanceCreationOptions>(\r\n    input: {\r\n        storage: RxStorage<Internals, InstanceCreationOptions>;\r\n        delayTimeBefore: () => number;\r\n        delayTimeAfter: () => number;\r\n    }\r\n): RxStorage<Internals, InstanceCreationOptions> {\r\n    /**\r\n     * Ensure writes to a delay storage\r\n     * are still correctly run in order.\r\n     */\r\n    let randomDelayStorageWriteQueue: Promise<any> = PROMISE_RESOLVE_TRUE;\r\n\r\n    const retStorage: RxStorage<Internals, InstanceCreationOptions> = {\r\n        name: 'random-delay-' + input.storage.name,\r\n        rxdbVersion: RXDB_VERSION,\r\n        async createStorageInstance(params) {\r\n            await promiseWait(input.delayTimeBefore());\r\n            const storageInstance = await input.storage.createStorageInstance(params);\r\n            await promiseWait(input.delayTimeAfter());\r\n\r\n            return {\r\n                databaseName: storageInstance.databaseName,\r\n                internals: storageInstance.internals,\r\n                options: storageInstance.options,\r\n                schema: storageInstance.schema,\r\n                collectionName: storageInstance.collectionName,\r\n                bulkWrite(a, b) {\r\n                    randomDelayStorageWriteQueue = randomDelayStorageWriteQueue.then(async () => {\r\n                        await promiseWait(input.delayTimeBefore());\r\n                        const response = await storageInstance.bulkWrite(a, b);\r\n                        await promiseWait(input.delayTimeAfter());\r\n                        return response;\r\n                    });\r\n                    const ret = randomDelayStorageWriteQueue;\r\n                    return ret;\r\n                },\r\n                async findDocumentsById(a, b) {\r\n                    await promiseWait(input.delayTimeBefore());\r\n                    const ret = await storageInstance.findDocumentsById(a, b);\r\n                    await promiseWait(input.delayTimeAfter());\r\n                    return ret;\r\n                },\r\n                async query(a) {\r\n                    await promiseWait(input.delayTimeBefore());\r\n                    const ret = await storageInstance.query(a);\r\n                    return ret;\r\n                },\r\n                async count(a) {\r\n                    await promiseWait(input.delayTimeBefore());\r\n                    const ret = await storageInstance.count(a);\r\n                    await promiseWait(input.delayTimeAfter());\r\n                    return ret;\r\n\r\n                },\r\n                async getAttachmentData(a, b, c) {\r\n                    await promiseWait(input.delayTimeBefore());\r\n                    const ret = await storageInstance.getAttachmentData(a, b, c);\r\n                    await promiseWait(input.delayTimeAfter());\r\n                    return ret;\r\n\r\n                },\r\n                getChangedDocumentsSince: !storageInstance.getChangedDocumentsSince ? undefined : async (a, b) => {\r\n                    await promiseWait(input.delayTimeBefore());\r\n                    const ret = await ensureNotFalsy(storageInstance.getChangedDocumentsSince)(a, b);\r\n                    await promiseWait(input.delayTimeAfter());\r\n                    return ret;\r\n\r\n                },\r\n                changeStream() {\r\n                    return storageInstance.changeStream();\r\n                },\r\n                async cleanup(a) {\r\n                    await promiseWait(input.delayTimeBefore());\r\n                    const ret = await storageInstance.cleanup(a);\r\n                    await promiseWait(input.delayTimeAfter());\r\n                    return ret;\r\n\r\n                },\r\n                async close() {\r\n                    await promiseWait(input.delayTimeBefore());\r\n                    const ret = await storageInstance.close();\r\n                    await promiseWait(input.delayTimeAfter());\r\n                    return ret;\r\n\r\n                },\r\n                async remove() {\r\n                    await promiseWait(input.delayTimeBefore());\r\n                    const ret = await storageInstance.remove();\r\n                    await promiseWait(input.delayTimeAfter());\r\n                    return ret;\r\n                },\r\n            };\r\n\r\n\r\n        }\r\n    };\r\n    return retStorage;\r\n}\r\n"],"mappings":"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","ignoreList":[]}