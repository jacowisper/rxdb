{"version":3,"file":"rx-storage-multiinstance.js","names":["Subject","mergeWith","BroadcastChannel","BROADCAST_CHANNEL_BY_TOKEN","Map","getBroadcastChannelReference","storageName","databaseInstanceToken","databaseName","refObject","state","get","bc","join","refs","Set","set","add","removeBroadcastChannelReference","delete","size","close","addRxStorageMultiInstanceSupport","instanceCreationParams","instance","providedBroadcastChannel","multiInstance","broadcastChannel","changesFromOtherInstances$","eventListener","msg","collectionName","version","schema","next","eventBulk","addEventListener","oldChangestream$","changeStream","closed","sub","subscribe","JSON","parse","stringify","postMessage","asObservable","pipe","oldClose","bind","unsubscribe","removeEventListener","oldRemove","remove"],"sources":["../../src/rx-storage-multiinstance.ts"],"sourcesContent":["/**\r\n * When a persistent RxStorage is used in more the one JavaScript process,\r\n * the even stream of the changestream() function must be broadcasted to the other\r\n * RxStorageInstances of the same databaseName+collectionName.\r\n *\r\n * In the past this was done by RxDB but it makes more sense to do this\r\n * at the RxStorage level so that the broadcasting etc can all happen inside of a WebWorker\r\n * and not on the main thread.\r\n * Also it makes it less complex to stack up different RxStorages onto each other\r\n * like what we do with the in-memory plugin.\r\n *\r\n * This is intended to be used inside of createStorageInstance() of a storage.\r\n * Do not use this if the storage anyway broadcasts the events like when using MongoDB\r\n * or in the future W3C might introduce a way to listen to IndexedDB changes.\r\n */\r\n\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { mergeWith } from 'rxjs/operators';\r\nimport type {\r\n    EventBulk,\r\n    RxStorageChangeEvent,\r\n    RxStorageInstance,\r\n    RxStorageInstanceCreationParams\r\n} from './types/index.d.ts';\r\n\r\nimport {\r\n    BroadcastChannel\r\n} from 'broadcast-channel';\r\n\r\n/**\r\n * The broadcast-channel is reused by the databaseInstanceToken.\r\n * This is required so that it is easy to simulate multi-tab usage\r\n * in the test where different instances of the same RxDatabase must\r\n * have different broadcast channels.\r\n * But also it ensures that for each RxDatabase we only create a single\r\n * broadcast channel that can even be reused in the leader election plugin.\r\n */\r\nexport const BROADCAST_CHANNEL_BY_TOKEN: Map<string, {\r\n    bc: BroadcastChannel<RxStorageMultiInstanceBroadcastType>;\r\n    /**\r\n     * Contains all context objects that currently use the channel.\r\n     * If this becomes empty, we can close the channel\r\n     */\r\n    refs: Set<any>;\r\n}> = new Map();\r\n\r\n\r\nexport type RxStorageMultiInstanceBroadcastType = {\r\n    storageName: string;\r\n    collectionName: string;\r\n    /**\r\n     * collection.schema.version\r\n     */\r\n    version: number;\r\n    databaseName: string;\r\n    eventBulk: EventBulk<any, any>;\r\n};\r\n\r\nexport function getBroadcastChannelReference(\r\n    storageName: string,\r\n    databaseInstanceToken: string,\r\n    databaseName: string,\r\n    refObject: any\r\n): BroadcastChannel<RxStorageMultiInstanceBroadcastType> {\r\n    let state = BROADCAST_CHANNEL_BY_TOKEN.get(databaseInstanceToken);\r\n    if (!state) {\r\n        state = {\r\n            /**\r\n             * We have to use the databaseName instead of the databaseInstanceToken\r\n             * in the BroadcastChannel name because different instances must end with the same\r\n             * channel name to be able to broadcast messages between each other.\r\n             */\r\n            bc: new BroadcastChannel(['RxDB:', storageName, databaseName].join('|')),\r\n            refs: new Set<any>()\r\n        };\r\n        BROADCAST_CHANNEL_BY_TOKEN.set(databaseInstanceToken, state);\r\n    }\r\n    state.refs.add(refObject);\r\n    return state.bc;\r\n}\r\n\r\nexport function removeBroadcastChannelReference(\r\n    databaseInstanceToken: string,\r\n    refObject: any\r\n) {\r\n    const state = BROADCAST_CHANNEL_BY_TOKEN.get(databaseInstanceToken);\r\n    if (!state) {\r\n        return;\r\n    }\r\n    state.refs.delete(refObject);\r\n    if (state.refs.size === 0) {\r\n        BROADCAST_CHANNEL_BY_TOKEN.delete(databaseInstanceToken);\r\n        return state.bc.close();\r\n    }\r\n}\r\n\r\n\r\nexport function addRxStorageMultiInstanceSupport<RxDocType>(\r\n    storageName: string,\r\n    instanceCreationParams: RxStorageInstanceCreationParams<RxDocType, any>,\r\n    instance: RxStorageInstance<RxDocType, any, any>,\r\n    /**\r\n     * If provided, that channel will be used\r\n     * instead of an own one.\r\n     */\r\n    providedBroadcastChannel?: BroadcastChannel<any>\r\n) {\r\n    if (!instanceCreationParams.multiInstance) {\r\n        return;\r\n    }\r\n\r\n    type Emit = EventBulk<RxStorageChangeEvent<RxDocType>, any>;\r\n\r\n    const broadcastChannel = providedBroadcastChannel ?\r\n        providedBroadcastChannel :\r\n        getBroadcastChannelReference(\r\n            storageName,\r\n            instanceCreationParams.databaseInstanceToken,\r\n            instance.databaseName,\r\n            instance\r\n        );\r\n\r\n    const changesFromOtherInstances$: Subject<Emit> = new Subject();\r\n\r\n\r\n    const eventListener = (msg: RxStorageMultiInstanceBroadcastType) => {\r\n        if (\r\n            msg.storageName === storageName &&\r\n            msg.databaseName === instanceCreationParams.databaseName &&\r\n            msg.collectionName === instanceCreationParams.collectionName &&\r\n            msg.version === instanceCreationParams.schema.version\r\n        ) {\r\n            changesFromOtherInstances$.next(msg.eventBulk);\r\n        }\r\n    };\r\n\r\n    broadcastChannel.addEventListener('message', eventListener);\r\n\r\n    const oldChangestream$ = instance.changeStream();\r\n\r\n    let closed = false;\r\n    const sub = oldChangestream$.subscribe(eventBulk => {\r\n        if (closed) {\r\n            return;\r\n        }\r\n        eventBulk = JSON.parse(JSON.stringify(eventBulk))\r\n        broadcastChannel.postMessage({\r\n            storageName: storageName,\r\n            databaseName: instanceCreationParams.databaseName,\r\n            collectionName: instanceCreationParams.collectionName,\r\n            version: instanceCreationParams.schema.version,\r\n            eventBulk\r\n        });\r\n    });\r\n\r\n    instance.changeStream = function (): Observable<Emit> {\r\n        return changesFromOtherInstances$.asObservable().pipe(\r\n            mergeWith(oldChangestream$)\r\n        );\r\n    };\r\n\r\n    const oldClose = instance.close.bind(instance);\r\n    instance.close = async function () {\r\n        closed = true;\r\n        sub.unsubscribe();\r\n        broadcastChannel.removeEventListener('message', eventListener);\r\n        if (!providedBroadcastChannel) {\r\n            await removeBroadcastChannelReference(\r\n                instanceCreationParams.databaseInstanceToken,\r\n                instance\r\n            );\r\n        }\r\n        return oldClose();\r\n    };\r\n\r\n    const oldRemove = instance.remove.bind(instance);\r\n    instance.remove = async function () {\r\n        closed = true;\r\n        sub.unsubscribe();\r\n        broadcastChannel.removeEventListener('message', eventListener);\r\n        if (!providedBroadcastChannel) {\r\n            await removeBroadcastChannelReference(\r\n                instanceCreationParams.databaseInstanceToken,\r\n                instance\r\n            );\r\n        }\r\n        return oldRemove();\r\n    };\r\n}\r\n"],"mappings":"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","ignoreList":[]}